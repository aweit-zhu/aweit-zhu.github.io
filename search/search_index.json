{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy --force - \u90e8\u7f72\u81f3 GITHUB PAGE Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy --force - \u90e8\u7f72\u81f3 GITHUB PAGE","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"dapr/","text":"Dapr \u5982\u4f55\u5728 Ubuntu \u5b89\u88dd Java 11 sudo apt-get update sudo apt-get install openjdk-11-jdk Deploy Dapr on K8S \u53c3\u8003 https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-deploy/ \u9810\u8a2d dapr-dashboard \u6c92\u6709\u5c0d\u5916\u958b\u7aef\u53e3\uff0c\u6240\u4ee5\u8981\u5728\u672c\u6a5f\u57f7\u884c kubectl port-forward \u5982\u4f55\u5728\u672c\u6a5f\u4f7f\u7528 kubectl port-forward\uff0c\u4ee5 service/{myservice} \u70ba\u4f8b \u78ba\u8a8d C:\\Users\\user.kube \u6a94\u6848\u7684\u8cc7\u8a0a\uff0c\u70ba microk8s config \u7684\u8cc7\u8a0a \u57f7\u884c\u6307\u4ee4\uff1a kubectl port-forward service/dapr-dashboard 8080:8080 -n dapr-system \u6253\u958b\u672c\u6a5f\u700f\u89bd\u5668 http://localhost:8080","title":"Dapr"},{"location":"dapr/#dapr","text":"","title":"Dapr"},{"location":"dapr/#ubuntu-java-11","text":"sudo apt-get update sudo apt-get install openjdk-11-jdk","title":"\u5982\u4f55\u5728 Ubuntu \u5b89\u88dd Java 11"},{"location":"dapr/#deploy-dapr-on-k8s","text":"\u53c3\u8003 https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-deploy/ \u9810\u8a2d dapr-dashboard \u6c92\u6709\u5c0d\u5916\u958b\u7aef\u53e3\uff0c\u6240\u4ee5\u8981\u5728\u672c\u6a5f\u57f7\u884c kubectl port-forward","title":"Deploy Dapr on K8S"},{"location":"dapr/#kubectl-port-forward-servicemyservice","text":"\u78ba\u8a8d C:\\Users\\user.kube \u6a94\u6848\u7684\u8cc7\u8a0a\uff0c\u70ba microk8s config \u7684\u8cc7\u8a0a \u57f7\u884c\u6307\u4ee4\uff1a kubectl port-forward service/dapr-dashboard 8080:8080 -n dapr-system \u6253\u958b\u672c\u6a5f\u700f\u89bd\u5668 http://localhost:8080","title":"\u5982\u4f55\u5728\u672c\u6a5f\u4f7f\u7528 kubectl port-forward\uff0c\u4ee5 service/{myservice} \u70ba\u4f8b"},{"location":"docker/","text":"\u4f7f\u7528 Docker \u7684 Volume \u4f86\u90e8\u7f72 war \u6a94 Dockerfile FROM openjdk:8 RUN apt-get update && apt-get install -y wget RUN cd / RUN wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.10/bin/apache-tomcat-10.1.10.tar.gz RUN tar zxvf apache-tomcat-10.1.10.tar.gz VOLUME [\"/apache-tomcat-10.1.10/webapps\"] CMD [\"/apache-tomcat-10.1.10/bin/catalina.sh\", \"run\"] \u900f\u904e VSCode \u57f7\u884c docker build \u57f7\u884c docker run -d --name tomcat -p 8080:8080 tomcatserver \u5377\u5b97\u6709\u5169\u7a2e\u639b\u8f09\u65b9\u5f0f\uff0c\u4e00\u7a2e\u5377\u5b97\u639b\u8f09\u3001\u4e00\u7a2e\u7e6b\u7d50\u639b\u8f09\u3002 docker inspect -f '{{.Mounts}}' tomcat [{volume 64c8c0866ae8f36f7471359d1d0c564b6fc3088fec5137a5f21b51c0d145cbb2 /var/lib/docker/volumes/64c8c0866ae8f36f7471359d1d0c564b6fc3088fec5137a5f21b51c0d145cbb2/_data /apache-tomcat-10.1.10/webapps local true }] \u5377\u5b97\u639b\u8f09\uff1a(\u9019\u6b21\u4f8b\u5b50\u9069\u7528) \u7e6b\u7d50\u639b\u8f09\uff1a(\u4e00\u822c\u63a8\u85a6\u7528\u9019\u7a2e) \u6bd4\u8f03\u5169\u8005\u4e0d\u540c\uff1a Volume \u5b58\u653e\u5728\u4e3b\u6a5f\u6a94\u6848\u7cfb\u7d71\u4e2d\u7531 Docker \u7ba1\u7406\u7684\u5730\u65b9\uff0c\u5728 Linux \u4f5c\u696d\u7cfb\u7d71\u662f /var/lib/docker/volumes/ \u6b64\u8def\u5f91\u3002\u975e Docker \u7684\u884c\u7a0b\u4e0d\u61c9\u8a72\u4fee\u6539\u6a94\u6848\u7cfb\u7d71\u4e2d\u7684\u9019\u4e00\u90e8\u5206\u3002\u8981\u5728 Docker \u4e2d\u7559\u5b58\u8cc7\u6599\uff0cvolumes \u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002 Bind mount \u53ef\u5b58\u653e\u5728\u4e3b\u6a5f\u6a94\u6848\u7cfb\u7d71\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u975e Docker \u884c\u7a0b\u6216 Docker \u5bb9\u5668\u53ef\u96a8\u6642\u4fee\u6539\u3002 tmpfs mount \u53ea\u5b58\u653e\u5728\u4e3b\u6a5f\u7684\u8a18\u61b6\u9ad4\u4e2d\uff0c\u4e0d\u6703\u5beb\u5165\u4e3b\u6a5f\u7684\u6a94\u6848\u7cfb\u7d71\u3002 https://ithelp.ithome.com.tw/articles/10207973","title":"Docker"},{"location":"docker/#docker-volume-war","text":"Dockerfile FROM openjdk:8 RUN apt-get update && apt-get install -y wget RUN cd / RUN wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.10/bin/apache-tomcat-10.1.10.tar.gz RUN tar zxvf apache-tomcat-10.1.10.tar.gz VOLUME [\"/apache-tomcat-10.1.10/webapps\"] CMD [\"/apache-tomcat-10.1.10/bin/catalina.sh\", \"run\"] \u900f\u904e VSCode \u57f7\u884c docker build \u57f7\u884c docker run -d --name tomcat -p 8080:8080 tomcatserver \u5377\u5b97\u6709\u5169\u7a2e\u639b\u8f09\u65b9\u5f0f\uff0c\u4e00\u7a2e\u5377\u5b97\u639b\u8f09\u3001\u4e00\u7a2e\u7e6b\u7d50\u639b\u8f09\u3002 docker inspect -f '{{.Mounts}}' tomcat [{volume 64c8c0866ae8f36f7471359d1d0c564b6fc3088fec5137a5f21b51c0d145cbb2 /var/lib/docker/volumes/64c8c0866ae8f36f7471359d1d0c564b6fc3088fec5137a5f21b51c0d145cbb2/_data /apache-tomcat-10.1.10/webapps local true }] \u5377\u5b97\u639b\u8f09\uff1a(\u9019\u6b21\u4f8b\u5b50\u9069\u7528) \u7e6b\u7d50\u639b\u8f09\uff1a(\u4e00\u822c\u63a8\u85a6\u7528\u9019\u7a2e) \u6bd4\u8f03\u5169\u8005\u4e0d\u540c\uff1a Volume \u5b58\u653e\u5728\u4e3b\u6a5f\u6a94\u6848\u7cfb\u7d71\u4e2d\u7531 Docker \u7ba1\u7406\u7684\u5730\u65b9\uff0c\u5728 Linux \u4f5c\u696d\u7cfb\u7d71\u662f /var/lib/docker/volumes/ \u6b64\u8def\u5f91\u3002\u975e Docker \u7684\u884c\u7a0b\u4e0d\u61c9\u8a72\u4fee\u6539\u6a94\u6848\u7cfb\u7d71\u4e2d\u7684\u9019\u4e00\u90e8\u5206\u3002\u8981\u5728 Docker \u4e2d\u7559\u5b58\u8cc7\u6599\uff0cvolumes \u662f\u6700\u597d\u7684\u65b9\u6cd5\u3002 Bind mount \u53ef\u5b58\u653e\u5728\u4e3b\u6a5f\u6a94\u6848\u7cfb\u7d71\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u975e Docker \u884c\u7a0b\u6216 Docker \u5bb9\u5668\u53ef\u96a8\u6642\u4fee\u6539\u3002 tmpfs mount \u53ea\u5b58\u653e\u5728\u4e3b\u6a5f\u7684\u8a18\u61b6\u9ad4\u4e2d\uff0c\u4e0d\u6703\u5beb\u5165\u4e3b\u6a5f\u7684\u6a94\u6848\u7cfb\u7d71\u3002 https://ithelp.ithome.com.tw/articles/10207973","title":"\u4f7f\u7528 Docker \u7684 Volume \u4f86\u90e8\u7f72 war \u6a94"},{"location":"drone/","text":"Drone \u7b46\u8a18 1.\u900f\u904e ngrok\uff0c\u5efa\u7acb\u516c\u958bIP\uff0c\u7d81\u5b9a localhost:8082 (\u91cd\u555f\u3001\u91cd\u958b\u6a5f\u5c31\u6c92\u4e86) 2.\u7d81\u5b9agithub \u524d\u5f80 settings -> Developer Settings \u5efa\u7acb\u4e00\u500b OAuth APP Homepage URL\uff1a\u586b\u525b\u525b\u7528 ngrok \u63d0\u5171\u7684 \u516c\u958b IP https://b5c9-58-115-111-122.ngrok-free.app \u7522\u751f Client ID \u8207 Client Secret Client ID\uff1a 3ab12bcea99814fd59df Client Secret\uff1a 2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067 3.\u900f\u904e Docker Compose \u5efa\u7acb drone server \u958b\u555f CMD\uff0c\u8f38\u5165 WSL\u3002 \u5207\u5230 home \u8def\u5f91\u3002 cd ~ \u5efa\u7acb drone-server \u8cc7\u6599\u593e mkdir drone-server cd drone-server \u5efa\u7acb docker-compose.github.yml nano docker-compose.github.yml \u8cbc\u4e0a\u4ee5\u4e0b version: '2' services: drone-server: /assets/image: drone/drone:1 ports: - 8082:80 volumes: - ./:/data restart: always environment: - DRONE_SERVER_HOST=${DRONE_SERVER_HOST} - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO} - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} - DRONE_GITHUB_SERVER=<https://github.com> - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID} - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET} - DRONE_LOGS_PRETTY=true - DRONE_LOGS_COLOR=true - DRONE_USER_CREATE=username:aweit-zhu,admin:true runner for docker version drone-runner: /assets/image: drone/drone-runner-docker:1 restart: always depends_on: - drone-server volumes: - /var/run/docker.sock:/var/run/docker.sock environment: - DRONE_RPC_HOST=${DRONE_RPC_HOST} - DRONE_RPC_PROTO=${DRONE_RPC_PROTO} - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} - DRONE_RUNNER_CAPACITY=3 \u5efa\u7acb .env nano .env \u8cbc\u4e0a\u4ee5\u4e0b \u6211\u5011\u76ee\u524d\u6709\u7684\u8cc7\u8a0a\u70ba\uff1a \u516c\u958b IP <https://b5c9-58-115-111-122.ngrok-free.app> Client ID\uff1a 3ab12bcea99814fd59df Client Secret\uff1a 2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067 DRONE_SERVER_HOST=<https://b5c9-58-115-111-122.ngrok-free.app> DRONE_SERVER_PROTO=https DRONE_RPC_SECRET=123 DRONE_RPC_HOST=drone-server DRONE_RPC_PROTO=http DRONE_GITHUB_CLIENT_ID=3ab12bcea99814fd59df DRONE_GITHUB_CLIENT_SECRET=2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067 \u555f\u52d5\u5bb9\u5668 docker-compose -f docker-compose.github.yml up -d \u6253\u958b https://b5c9-58-115-111-122.ngrok-free.app \u9ede\u9078 Visit Site \u9ede\u9078 Authorize aweit-zhu Drone Server \u7684\u64cd\u4f5c \u9078\u64c7 aweit-zhu/docker-demo \u9032\u884c Activate \u9078\u64c7 Trusted \u9ede\u9078 Save \u56de\u5230 github \u505a\u8a2d\u5b9a \u5c07 Payload URL \u4fee\u6539\u70ba \u4fee\u6539\u70ba https://b5c9-58-115-111-122.ngrok-free.app /hook 4. \u64b0\u5beb .drone.yml \u6a94 \u5efa\u7acb ssh_password_master secret \u5efa\u7acb ssh_password secret \u89e3\u6790 .drone.yml (\u7565) kind: pipeline type: docker name: docker-demo-drone steps: - name: test /assets/image: maven:3-jdk-8 volumes: - name: maven-cache path: /root/.m2 - name: maven-build path: /app/build commands: - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V - mvn test -B - name: package /assets/image: maven:3-jdk-8 volumes: - name: maven-cache path: /root/.m2 - name: maven-build path: /app/build commands: - mvn clean package - cp target/docker-demo.jar /app/build/docker-demo.jar - cp Dockerfile /app/build/Dockerfile - cp docker-k8s-demo-deployment.yaml /app/build/docker-k8s-demo-deployment.yaml - cp deploymentservice.yaml /app/build/deploymentservice.yaml - cp run.sh /app/build/run.sh - name: scp files /assets/image: appleboy/drone-scp settings: host: 192.168.0.17 username: root password: from_secret: ssh_password_master port: 22 command_timeout: 2m target: /mydata/maven/build source: ./* - name: build-start01 /assets/image: appleboy/drone-ssh settings: host: 172.31.93.122 username: root password: from_secret: ssh_password port: 2222 command_timeout: 5m script: - cd /mydata/maven/build - chmod +x run.sh - ./run.sh - name: build-start02 /assets/image: appleboy/drone-ssh settings: host: 192.168.0.17 username: vboxuser password: from_secret: ssh_password_master port: 22 command_timeout: 5m script: - cd /mydata/maven/build - microk8s.kubectl delete deploy docker-k8s-demo-deployment - microk8s.kubectl apply -f ./docker-k8s-demo-deployment.yaml volumes: - name: maven-build host: path: /mydata/maven/build - name: maven-cache host: path: /mydata/maven/cache \u53ea\u8981 push \u5230\u9060\u7aef\uff0c\u5c31\u6703\u89f8\u767c drone \u57f7\u884c\u3002 \u9a57\u8b49 \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165URL\uff1a http://192.168.0.17:60000/","title":"Drone"},{"location":"drone/#drone","text":"","title":"Drone \u7b46\u8a18"},{"location":"drone/#1-ngrokip-localhost8082","text":"","title":"1.\u900f\u904e ngrok\uff0c\u5efa\u7acb\u516c\u958bIP\uff0c\u7d81\u5b9a localhost:8082  (\u91cd\u555f\u3001\u91cd\u958b\u6a5f\u5c31\u6c92\u4e86)"},{"location":"drone/#2github","text":"\u524d\u5f80 settings -> Developer Settings \u5efa\u7acb\u4e00\u500b OAuth APP Homepage URL\uff1a\u586b\u525b\u525b\u7528 ngrok \u63d0\u5171\u7684 \u516c\u958b IP https://b5c9-58-115-111-122.ngrok-free.app \u7522\u751f Client ID \u8207 Client Secret Client ID\uff1a 3ab12bcea99814fd59df Client Secret\uff1a 2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067","title":"2.\u7d81\u5b9agithub"},{"location":"drone/#3-docker-compose-drone-server","text":"\u958b\u555f CMD\uff0c\u8f38\u5165 WSL\u3002 \u5207\u5230 home \u8def\u5f91\u3002 cd ~ \u5efa\u7acb drone-server \u8cc7\u6599\u593e mkdir drone-server cd drone-server \u5efa\u7acb docker-compose.github.yml nano docker-compose.github.yml \u8cbc\u4e0a\u4ee5\u4e0b version: '2' services: drone-server: /assets/image: drone/drone:1 ports: - 8082:80 volumes: - ./:/data restart: always environment: - DRONE_SERVER_HOST=${DRONE_SERVER_HOST} - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO} - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} - DRONE_GITHUB_SERVER=<https://github.com> - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID} - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET} - DRONE_LOGS_PRETTY=true - DRONE_LOGS_COLOR=true - DRONE_USER_CREATE=username:aweit-zhu,admin:true","title":"3.\u900f\u904e Docker Compose \u5efa\u7acb drone server"},{"location":"drone/#runner-for-docker-version","text":"drone-runner: /assets/image: drone/drone-runner-docker:1 restart: always depends_on: - drone-server volumes: - /var/run/docker.sock:/var/run/docker.sock environment: - DRONE_RPC_HOST=${DRONE_RPC_HOST} - DRONE_RPC_PROTO=${DRONE_RPC_PROTO} - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} - DRONE_RUNNER_CAPACITY=3 \u5efa\u7acb .env nano .env \u8cbc\u4e0a\u4ee5\u4e0b \u6211\u5011\u76ee\u524d\u6709\u7684\u8cc7\u8a0a\u70ba\uff1a \u516c\u958b IP <https://b5c9-58-115-111-122.ngrok-free.app> Client ID\uff1a 3ab12bcea99814fd59df Client Secret\uff1a 2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067 DRONE_SERVER_HOST=<https://b5c9-58-115-111-122.ngrok-free.app> DRONE_SERVER_PROTO=https DRONE_RPC_SECRET=123 DRONE_RPC_HOST=drone-server DRONE_RPC_PROTO=http DRONE_GITHUB_CLIENT_ID=3ab12bcea99814fd59df DRONE_GITHUB_CLIENT_SECRET=2ae999f7e3e8bc29c1c5fec1918d1d1ba13a2067 \u555f\u52d5\u5bb9\u5668 docker-compose -f docker-compose.github.yml up -d \u6253\u958b https://b5c9-58-115-111-122.ngrok-free.app \u9ede\u9078 Visit Site \u9ede\u9078 Authorize aweit-zhu Drone Server \u7684\u64cd\u4f5c \u9078\u64c7 aweit-zhu/docker-demo \u9032\u884c Activate \u9078\u64c7 Trusted \u9ede\u9078 Save \u56de\u5230 github \u505a\u8a2d\u5b9a \u5c07 Payload URL \u4fee\u6539\u70ba \u4fee\u6539\u70ba https://b5c9-58-115-111-122.ngrok-free.app /hook","title":"runner for docker version"},{"location":"drone/#4-droneyml","text":"\u5efa\u7acb ssh_password_master secret \u5efa\u7acb ssh_password secret \u89e3\u6790 .drone.yml (\u7565) kind: pipeline type: docker name: docker-demo-drone steps: - name: test /assets/image: maven:3-jdk-8 volumes: - name: maven-cache path: /root/.m2 - name: maven-build path: /app/build commands: - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V - mvn test -B - name: package /assets/image: maven:3-jdk-8 volumes: - name: maven-cache path: /root/.m2 - name: maven-build path: /app/build commands: - mvn clean package - cp target/docker-demo.jar /app/build/docker-demo.jar - cp Dockerfile /app/build/Dockerfile - cp docker-k8s-demo-deployment.yaml /app/build/docker-k8s-demo-deployment.yaml - cp deploymentservice.yaml /app/build/deploymentservice.yaml - cp run.sh /app/build/run.sh - name: scp files /assets/image: appleboy/drone-scp settings: host: 192.168.0.17 username: root password: from_secret: ssh_password_master port: 22 command_timeout: 2m target: /mydata/maven/build source: ./* - name: build-start01 /assets/image: appleboy/drone-ssh settings: host: 172.31.93.122 username: root password: from_secret: ssh_password port: 2222 command_timeout: 5m script: - cd /mydata/maven/build - chmod +x run.sh - ./run.sh - name: build-start02 /assets/image: appleboy/drone-ssh settings: host: 192.168.0.17 username: vboxuser password: from_secret: ssh_password_master port: 22 command_timeout: 5m script: - cd /mydata/maven/build - microk8s.kubectl delete deploy docker-k8s-demo-deployment - microk8s.kubectl apply -f ./docker-k8s-demo-deployment.yaml volumes: - name: maven-build host: path: /mydata/maven/build - name: maven-cache host: path: /mydata/maven/cache \u53ea\u8981 push \u5230\u9060\u7aef\uff0c\u5c31\u6703\u89f8\u767c drone \u57f7\u884c\u3002 \u9a57\u8b49 \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165URL\uff1a http://192.168.0.17:60000/","title":"4. \u64b0\u5beb .drone.yml \u6a94"},{"location":"flutter/","text":"FlutterFire Step0. create a new Flutter app flutter create example Step1. Install the required command line tools install the Firebase CLI npm install -g firebase-tools \u767b\u5165 Firebase. firebase login \u5982\u679c\u5df2\u767b\u5165\uff0c\u6703\u986f\u793a Already logged in as aa4192696@gmail.com \u5982\u679c\u672a\u767b\u5165\uff0c\u5247\u6703\u8df3\u51fa\u767b\u5165\u8996\u7a97\uff0c\u8b93\u60a8\u900f\u904e Google \u5e33\u865f\u767b\u5165\u3002 ( https://console.firebase.google.com/ ) 3. \u5b89\u88dd FlutterFire CLI.(\u5168\u57df) dart pub global activate flutterfire_cli Step 2: Configure your apps to use Firebase \u9032\u5165\u5230 Flutter \u5c08\u6848\u6839\u76ee\u9304\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4 flutterfire configure (1) \u9019\u908a\u4ee5\u5efa\u7acb\u65b0\u7684 firebase \u5c08\u6848\u70ba\u4f8b\uff0c\u540d\u5b57\u53d6\uff1a aweit-example (2) \u5168\u90e8\u5c31\u5c0d\u4e86\uff0c\u9019\u6a23\u6703\u5728 Firebase \u5c08\u6848\u4e2d\uff0c\u5efa\u7acb\u56db\u500b\u61c9\u7528\u7a0b\u5f0f\u3002 (3) \u90fd\u6210\u529f\u5f8c\uff0c\u6703\u986f\u793a\u4ee5\u4e0b\u8cc7\u8a0a\u3002 Step 3: Initialize Firebase in your app \u5b89\u88dd firebase_core flutter pub add firebase_core \u518d\u6b21\u57f7\u884c flutterfire configure \uff0c\u4ee5\u78ba\u8a8d Flrebase \u8a2d\u5b9a\u662f\u6700\u65b0\u7684\u3002 \u6253\u958b lib/main.dart\uff0c\u63d2\u5165\u4ee5\u4e0b\u4ee3\u78bc \u539f\u672c ``` import 'package:flutter/material.dart'; void main() { runApp(const MyApp()); } ``` \u8b8a\u66f4\u70ba ``` import 'package:flutter/material.dart'; import 'package:firebase_core/firebase_core.dart'; import 'firebase_options.dart'; Future main() async { WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); runApp(const MyApp()); } ``` 4. flutter run \u76f8\u95dc\u932f\u8aa4\u8a0a\u606f\u8655\u7406\u65b9\u5f0f (1) \u82e5\u51fa\u73fe If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter \u8981\u65b0\u589e\u4e00\u884c\u7a0b\u5f0f\u78bc\u5728 lib/main.dart \u7684 main \u65b9\u6cd5\u4e2d\u7684\u7b2c\u4e00\u884c\u3002 WidgetsFlutterBinding.ensureInitialized(); Step 4: Add Firebase plugins You access Firebase in your Flutter app through the various Firebase Flutter plugins, one for each Firebase product (for example: Cloud Firestore, Authentication, Analytics, etc.). Since Flutter is a multi-platform framework, each Firebase plugin is applicable for Apple, Android, and web platforms. So, if you add any Firebase plugin to your Flutter app, it will be used by the Apple, Android, and web versions of your app. flutter pub add {PLUGIN_NAME} flutterfire configure flutter run Get Started with Firebase Authentication on Flutter Google Enable Android - SHA Key keytool -list -v -alias androiddebugkey -keystore .\\.android\\debug.keystore password: android SHA1: 29:C4:07:39:3C:33:37:25:06:73:34:D4:DC:11:D2:7B:6C:34:F8:B4 SHA256: >56:F3:29:12:BB:90:C9:D9:95:0F:16:80:F1:19:EE:D2:99:CB:6B:95:4D:30:5D:16:F6:43:FB:72:31:97:54:36 Flutter Project \u76f8\u95dc\u8a2d\u5b9a \u5b89\u88dd\u5957\u4ef6\u3001\u8a2d\u5b9a Firebase flutter pub add firebase_auth flutter pub add google_sign_in flutterfire configure \u4fee\u6539\u8a2d\u5b9a\u503c android\\app\\build.gradle defaultConfig { multiDexEnabled true minSdkVersion 19 } Demo \u7a0b\u5f0f home.dart import 'package:flutter/material.dart'; import 'package:google_sign_in/google_sign_in.dart'; class HomePage extends StatefulWidget { @override _HomePageState createState() => _HomePageState(); } class _HomePageState extends State<HomePage> { bool _isLoggedIn = false; late GoogleSignInAccount _userObj; final GoogleSignIn _googleSignIn = GoogleSignIn(); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text(\"Codesundar\")), body: Container( child: _isLoggedIn ? Column( children: [ Image.network(_userObj.photoUrl!), Text(_userObj.displayName!), Text(_userObj.email), TextButton( onPressed: () { _googleSignIn.signOut().then((value) { setState(() { _isLoggedIn = false; }); }).catchError((e) {}); }, child: Text(\"Logout\")) ], ) : Center( child: ElevatedButton( child: Text(\"Login with Google\"), onPressed: () { _googleSignIn.signIn().then((userData) { setState(() { _isLoggedIn = true; _userObj = userData!; }); }).catchError((e) { print(e); }); }, ), ), ), ); } } main.dart import 'package:firebase_auth/firebase_auth.dart'; import 'package:firebase_core/firebase_core.dart'; import 'package:flutter/material.dart'; import 'package:google_sign_in/google_sign_in.dart'; import 'firebase_options.dart'; import 'home.dart'; Future<void> main() async { WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'Google Authencation Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: HomePage(), ); } } \u756b\u9762 \u5982\u679c\u7528 Web \u6703\u7121\u6cd5\u505a\u51fa\u6548\u679c\uff0c\u51fa\u73fe\u4ee5\u4e0b\u932f\u8aa4\u8a0a\u606f\uff1a ClientID not set. Either set it on a <meta name=\\\"google-signin-client_id\\\" content=\\\"CLIENT_ID\\\" /> tag, or pass clientId when initializing GoogleSignIn (1) \u53bb\u627e Clitne id : 8073574655-9c9sa7onebk99ju1mf2i5e1kfi5m4hk0.apps.googleusercontent.com (2) \u4fee\u6539\u4ee3\u78bc home.dart \u539f\u672c final GoogleSignIn _googleSignIn = GoogleSignIn(); \u5f8c\u4f86 final GoogleSignIn _googleSignIn = GoogleSignIn(clientId: '8073574655-saga5315djjgbcgsgag5qfmgusl6tqpu.apps.googleusercontent.com'); (3) \u51fa\u73fe\u4ee5\u4e0b\u8a0a\u606f\uff0c\u5247\u76f4\u63a5\u9ede\u9078\uff0c\u7167\u8457\u6b65\u9a5f\u505a\u5373\u53ef\u3002 PlatformException(idpiframe_initialization_failed, Not a valid origin for the client: http://localhost:13529 has not been registered for client ID 8073574655-9c9sa7onebk99ju1mf2i5e1kfi5m4hk0.apps.googleusercontent.com. Please go to https://console.developers.google.com/ and register this origin for your project's client ID., https://developers.google.com/identity/sign-in/web/reference#error_codes, null) \u5df2\u6388\u6b0a\u7684 JavaScript \u4f86\u6e90\uff0c\u8981\u628a\u9019\u500bPort\u52a0\u4e0a\u53bb (4) Flutter run \u6642\uff0c\u6307\u5b9a PORT = 12621 \u53c3\u6578\u3002--web-port=12621 (5) \u518d\u6b21\u6253\u958b\u700f\u89bd\u5668\uff0c\u4e26\u4e14\u6e05\u9664\u5feb\u53d6\u548c\u700f\u89bd\u8cc7\u6599\u3002\u5c31\u53ef\u4ee5\u4e86\u3002 Try out an example app with Analytics flutter pub add firebase_analytics flutterfire configure Access the lib directory of the app, then delete the existing main.dart file. \u5c07\u4ee5\u4e0b\u5169\u500b\u6a94\u6848\uff0c\u8907\u88fd\u8cbc\u4e0a\u5230\u5c08\u6848\u4e2d lib/ https://github.com/firebase/flutterfire/blob/master/packages/firebase_analytics/firebase_analytics/example/lib/main.dart https://github.com/firebase/flutterfire/blob/master/packages/firebase_analytics/firebase_analytics/example/lib/tabs_page.dart \u57f7\u884c flutter run \u932f\u8aa4\u8a0a\u606f \u932f\u8aa41 \u932f\u8aa42 \u5982\u679c\u51fa\u73fe Missing google_app_id. Firebase Analytics disabled \u932f\u8aa4\u8a0a\u606f \u4ee3\u8868\u6709\u5169\u500b\u5730\u65b9\u9700\u8981\u4fee\u6539\uff1a - android\\build.gradle ``` classpath 'com.google.gms:google-services:4.3.15' ``` ![Alt text](image-61.png) - android\\app\\build.gradle ``` apply plugin: 'com.google.gms.google-services' ``` ![Alt text](image-62.png) \u6210\u679c","title":"FlutterFire"},{"location":"flutter/#flutterfire","text":"","title":"FlutterFire"},{"location":"flutter/#step0-create-a-new-flutter-app","text":"flutter create example","title":"Step0. create a new Flutter app"},{"location":"flutter/#step1-install-the-required-command-line-tools","text":"install the Firebase CLI npm install -g firebase-tools \u767b\u5165 Firebase. firebase login \u5982\u679c\u5df2\u767b\u5165\uff0c\u6703\u986f\u793a Already logged in as aa4192696@gmail.com \u5982\u679c\u672a\u767b\u5165\uff0c\u5247\u6703\u8df3\u51fa\u767b\u5165\u8996\u7a97\uff0c\u8b93\u60a8\u900f\u904e Google \u5e33\u865f\u767b\u5165\u3002 ( https://console.firebase.google.com/ ) 3. \u5b89\u88dd FlutterFire CLI.(\u5168\u57df) dart pub global activate flutterfire_cli","title":"Step1.  Install the required command line tools"},{"location":"flutter/#step-2-configure-your-apps-to-use-firebase","text":"\u9032\u5165\u5230 Flutter \u5c08\u6848\u6839\u76ee\u9304\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4 flutterfire configure (1) \u9019\u908a\u4ee5\u5efa\u7acb\u65b0\u7684 firebase \u5c08\u6848\u70ba\u4f8b\uff0c\u540d\u5b57\u53d6\uff1a aweit-example (2) \u5168\u90e8\u5c31\u5c0d\u4e86\uff0c\u9019\u6a23\u6703\u5728 Firebase \u5c08\u6848\u4e2d\uff0c\u5efa\u7acb\u56db\u500b\u61c9\u7528\u7a0b\u5f0f\u3002 (3) \u90fd\u6210\u529f\u5f8c\uff0c\u6703\u986f\u793a\u4ee5\u4e0b\u8cc7\u8a0a\u3002","title":"Step 2: Configure your apps to use Firebase"},{"location":"flutter/#step-3-initialize-firebase-in-your-app","text":"\u5b89\u88dd firebase_core flutter pub add firebase_core \u518d\u6b21\u57f7\u884c flutterfire configure \uff0c\u4ee5\u78ba\u8a8d Flrebase \u8a2d\u5b9a\u662f\u6700\u65b0\u7684\u3002 \u6253\u958b lib/main.dart\uff0c\u63d2\u5165\u4ee5\u4e0b\u4ee3\u78bc \u539f\u672c ``` import 'package:flutter/material.dart'; void main() { runApp(const MyApp()); } ``` \u8b8a\u66f4\u70ba ``` import 'package:flutter/material.dart'; import 'package:firebase_core/firebase_core.dart'; import 'firebase_options.dart'; Future main() async { WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); runApp(const MyApp()); } ``` 4. flutter run \u76f8\u95dc\u932f\u8aa4\u8a0a\u606f\u8655\u7406\u65b9\u5f0f (1) \u82e5\u51fa\u73fe If ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter \u8981\u65b0\u589e\u4e00\u884c\u7a0b\u5f0f\u78bc\u5728 lib/main.dart \u7684 main \u65b9\u6cd5\u4e2d\u7684\u7b2c\u4e00\u884c\u3002 WidgetsFlutterBinding.ensureInitialized();","title":"Step 3: Initialize Firebase in your app"},{"location":"flutter/#step-4-add-firebase-plugins","text":"You access Firebase in your Flutter app through the various Firebase Flutter plugins, one for each Firebase product (for example: Cloud Firestore, Authentication, Analytics, etc.). Since Flutter is a multi-platform framework, each Firebase plugin is applicable for Apple, Android, and web platforms. So, if you add any Firebase plugin to your Flutter app, it will be used by the Apple, Android, and web versions of your app. flutter pub add {PLUGIN_NAME} flutterfire configure flutter run","title":"Step 4: Add Firebase plugins"},{"location":"flutter/#get-started-with-firebase-authentication-on-flutter","text":"Google Enable Android - SHA Key keytool -list -v -alias androiddebugkey -keystore .\\.android\\debug.keystore password: android SHA1: 29:C4:07:39:3C:33:37:25:06:73:34:D4:DC:11:D2:7B:6C:34:F8:B4 SHA256: >56:F3:29:12:BB:90:C9:D9:95:0F:16:80:F1:19:EE:D2:99:CB:6B:95:4D:30:5D:16:F6:43:FB:72:31:97:54:36 Flutter Project \u76f8\u95dc\u8a2d\u5b9a \u5b89\u88dd\u5957\u4ef6\u3001\u8a2d\u5b9a Firebase flutter pub add firebase_auth flutter pub add google_sign_in flutterfire configure \u4fee\u6539\u8a2d\u5b9a\u503c android\\app\\build.gradle defaultConfig { multiDexEnabled true minSdkVersion 19 } Demo \u7a0b\u5f0f home.dart import 'package:flutter/material.dart'; import 'package:google_sign_in/google_sign_in.dart'; class HomePage extends StatefulWidget { @override _HomePageState createState() => _HomePageState(); } class _HomePageState extends State<HomePage> { bool _isLoggedIn = false; late GoogleSignInAccount _userObj; final GoogleSignIn _googleSignIn = GoogleSignIn(); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text(\"Codesundar\")), body: Container( child: _isLoggedIn ? Column( children: [ Image.network(_userObj.photoUrl!), Text(_userObj.displayName!), Text(_userObj.email), TextButton( onPressed: () { _googleSignIn.signOut().then((value) { setState(() { _isLoggedIn = false; }); }).catchError((e) {}); }, child: Text(\"Logout\")) ], ) : Center( child: ElevatedButton( child: Text(\"Login with Google\"), onPressed: () { _googleSignIn.signIn().then((userData) { setState(() { _isLoggedIn = true; _userObj = userData!; }); }).catchError((e) { print(e); }); }, ), ), ), ); } } main.dart import 'package:firebase_auth/firebase_auth.dart'; import 'package:firebase_core/firebase_core.dart'; import 'package:flutter/material.dart'; import 'package:google_sign_in/google_sign_in.dart'; import 'firebase_options.dart'; import 'home.dart'; Future<void> main() async { WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: 'Google Authencation Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: HomePage(), ); } } \u756b\u9762 \u5982\u679c\u7528 Web \u6703\u7121\u6cd5\u505a\u51fa\u6548\u679c\uff0c\u51fa\u73fe\u4ee5\u4e0b\u932f\u8aa4\u8a0a\u606f\uff1a ClientID not set. Either set it on a <meta name=\\\"google-signin-client_id\\\" content=\\\"CLIENT_ID\\\" /> tag, or pass clientId when initializing GoogleSignIn (1) \u53bb\u627e Clitne id : 8073574655-9c9sa7onebk99ju1mf2i5e1kfi5m4hk0.apps.googleusercontent.com (2) \u4fee\u6539\u4ee3\u78bc home.dart \u539f\u672c final GoogleSignIn _googleSignIn = GoogleSignIn(); \u5f8c\u4f86 final GoogleSignIn _googleSignIn = GoogleSignIn(clientId: '8073574655-saga5315djjgbcgsgag5qfmgusl6tqpu.apps.googleusercontent.com'); (3) \u51fa\u73fe\u4ee5\u4e0b\u8a0a\u606f\uff0c\u5247\u76f4\u63a5\u9ede\u9078\uff0c\u7167\u8457\u6b65\u9a5f\u505a\u5373\u53ef\u3002 PlatformException(idpiframe_initialization_failed, Not a valid origin for the client: http://localhost:13529 has not been registered for client ID 8073574655-9c9sa7onebk99ju1mf2i5e1kfi5m4hk0.apps.googleusercontent.com. Please go to https://console.developers.google.com/ and register this origin for your project's client ID., https://developers.google.com/identity/sign-in/web/reference#error_codes, null) \u5df2\u6388\u6b0a\u7684 JavaScript \u4f86\u6e90\uff0c\u8981\u628a\u9019\u500bPort\u52a0\u4e0a\u53bb (4) Flutter run \u6642\uff0c\u6307\u5b9a PORT = 12621 \u53c3\u6578\u3002--web-port=12621 (5) \u518d\u6b21\u6253\u958b\u700f\u89bd\u5668\uff0c\u4e26\u4e14\u6e05\u9664\u5feb\u53d6\u548c\u700f\u89bd\u8cc7\u6599\u3002\u5c31\u53ef\u4ee5\u4e86\u3002","title":"Get Started with Firebase Authentication on Flutter"},{"location":"flutter/#try-out-an-example-app-with-analytics","text":"flutter pub add firebase_analytics flutterfire configure Access the lib directory of the app, then delete the existing main.dart file. \u5c07\u4ee5\u4e0b\u5169\u500b\u6a94\u6848\uff0c\u8907\u88fd\u8cbc\u4e0a\u5230\u5c08\u6848\u4e2d lib/ https://github.com/firebase/flutterfire/blob/master/packages/firebase_analytics/firebase_analytics/example/lib/main.dart https://github.com/firebase/flutterfire/blob/master/packages/firebase_analytics/firebase_analytics/example/lib/tabs_page.dart \u57f7\u884c flutter run \u932f\u8aa4\u8a0a\u606f \u932f\u8aa41 \u932f\u8aa42 \u5982\u679c\u51fa\u73fe Missing google_app_id. Firebase Analytics disabled \u932f\u8aa4\u8a0a\u606f \u4ee3\u8868\u6709\u5169\u500b\u5730\u65b9\u9700\u8981\u4fee\u6539\uff1a - android\\build.gradle ``` classpath 'com.google.gms:google-services:4.3.15' ``` ![Alt text](image-61.png) - android\\app\\build.gradle ``` apply plugin: 'com.google.gms.google-services' ``` ![Alt text](image-62.png) \u6210\u679c","title":"Try out an example app with Analytics"},{"location":"microk8s/","text":"Microk8s \u7b46\u8a18 1.\u5efa\u4e3b\u7bc0\u9ede master (Oracle VM VirtualBox) \u4e0b\u8f09 iso \u5370\u8c61\u6a94\uff0c\u9078\u64c7 ubuntu-22.04.2-desktop-amd64.iso \u958b\u555f Oracle VM VirtualBox \u7ba1\u7406\u54e1\uff0c\u9ede\u9078\u65b0\u589e -> ISO\u6620\u50cf\u9078\u64c7 ubuntu-22.04.2-desktop-amd64.iso -> \u4e0b\u4e00\u6b65 \u3002 \u5e33\u865f\u5bc6\u78bc\u7528\u9810\u8a2d\u5373\u53ef\u3002\u4f7f\u7528\u8005\u540d\u7a31\u70ba vboxuser\uff1b\u5bc6\u78bc\u70ba changeme \u786c\u9ad4\u898f\u683c\uff1a\u9810\u8a2d\u5373\u53ef\u3002 \u865b\u64ec\u786c\u9ad4\uff1a\u9810\u8a2d\u5373\u53ef\u3002 \u6458\u8981\uff1a\u76f4\u63a5\u6309\u5b8c\u6210\u3002 \u986f\u793a master\uff0c\u6703\u5b89\u88dd\u4e00\u6bb5\u6642\u9593\uff0c\u7d04 20 \u5206\u9418\u3002 \u900f\u904e CTRL+ALT+F5 \u5207\u63db\u6210 Terminal \u6a21\u5f0f\uff1bCTRL+ALT+F1 \u5207\u56de UI \u6a21\u5f0f\u3002 \u8f38\u5165 CTRL+ALT+F5 \u8f38\u5165\u5e33\u865f\u3001\u5bc6\u78bc\u5f8c\u767b\u5165 \u53ef\u8f38\u5165 lsb_release -a \u67e5\u770b Ubuntu \u7248\u672c\uff0c\u6703\u986f\u793a Ubuntu 22.04.2 LTS\u3002 \u8a2d\u5b9a\u56fa\u5b9aIP\uff0c\u4e26\u4e14\u8981\u80fd\u5920\u9023\u81f3\u5916\u7db2\u3002 \u5148\u95dc\u9589VM\uff0c\u4e26\u4e14\u5728\u7db2\u8def\u8a2d\u5b9a\uff0c\u586b\u9078\u4ecb\u97622\uff0c\u9078\u64c7\u6a4b\u63a5\u4ecb\u9762\u5361\u3002 \u8acb\u5148\u5efa\u7acb LANBridge \u865b\u64ec\u4ea4\u63db\u5668 \u67e5\u8a62\u76ee\u524dIP hostname -I \u5207\u63db\u76ee\u9304\uff0c\u4e26\u5217\u51fa\u6a94\u6848\uff0c\u5176\u4e2d\u7684 01-network-manager-all.yaml \u70ba\u8981\u4fee\u6539\u7684\u8a2d\u5b9a\u6a94\u3002 cd /etc/netplan/ ls \u5207\u56de su root \uff0c\u5bc6\u78bc\u70ba changeme \u4fee\u6539\u8a2d\u5b9a\u6a94\uff0c\u4fee\u6539\u5b8c\u5f8c\uff0c\u6309\u4e0b CTRL+X\uff0c\u518d\u8f38\u5165 Y\uff0c\u518d\u6309\u4e0b Enter \u5373\u53ef\u3002 sudo nano 01-network-manager-all.yaml \u539f\u672c\uff1a network: version: 2 renderer: NetworkManager \u66f4\u65b0\uff1a #network: # version: 2 # renderer: NetworkManager network: ethernets: enp0s3: dhcp4: true enp0s8: dhcp4: false addresses: [192.168.0.17/24] version: 2 \u56e0\u70ba \u4e59\u592a\u7db2\u8def \u7684 IP \u70ba 192.168.0.14\uff0c\u6240\u4ee5\u5728\u5206\u914d\u6642\uff0c\u53ef\u4ee5\u7db2\u5f8c\u65b0\u589e\u5373\u53ef\u3002 \u57f7\u884c\u66f4\u65b0\uff0c\u8f38\u5165\u6307\u4ee4\uff0c\u4e26\u76f4\u63a5\u6309\u4e0b\uff0c\u5373\u6703\u7acb\u5373\u66f4\u65b0\u3002(\u6216\u91cd\u65b0\u555f\u52d5VM) sudo netplan try \u67e5\u8a62IP\uff0c\u5c31\u6703\u770b\u5230 192.168.0.17 hostname -I \u958b\u555f SSH \u670d\u52d9 \u5148\u5207\u56de su root\uff0c\u4e26\u5b89\u88dd\u8207\u555f\u52d5 SSH apt-get update apt-get install openssh-server sudo service ssh --full-restart \u767b\u5165SSH window cmd -> ssh vboxuser@192.168.0.17 \u6e2c\u8a66\u770b\u770b\u662f\u5426\u53ef\u4ee5\u9023\u7d50\u5916\u7db2 ping google.com \u5982\u4f55\u4fee\u6539 ssh \u7684\u9810\u8a2d port 1. \u767b\u5165 ssh console \u5f8c\uff0c\u57f7\u884c\u4e0b\u5217\u6307\u4ee4: nano /etc/ssh/sshd_config 2 \u5c07: #Port 22 \u6539\u70ba: Port 3333 3 \u5132\u5b58\u9000\u51fa\u5f8c\uff0c console\u5e95\u4e0b\u5728\u57f7\u884cssh \u91cd\u958b\u6307\u4ee4: service ssh restart \u5982\u4f55\u8b93 root \u4e5f\u80fd\u767b\u5165 SSH nano /etc/ssh/sshd_config \u52a0\u5165 PermitRootLogin yes service ssh restart 2.\u5efa\u7bc0\u9ede node (Oracle VM VirtualBox) \u6b65\u9a5f\u540c\u4e0a\uff0cIP \u6539\u70ba 192.168.0.18 \u5373\u53ef\u3002 3.\u5728 master \u8207 node \u4e2d\uff0c\u5b89\u88dd microk8s\u3002(\u5176\u4e2dmetallb\u7684IP\u70ba master\u7684 IP) master node sudo snap install microk8s --classic master microk8s enable metallb:192.168.0.17-192.168.0.100 master node microk8s enable dashboard dns registry istio helm3 storage master microk8s status --wait-ready master microk8s dashboard-proxy metallb\uff1a\u8981\u597d\u5e7e\u5206\u9418\uff0c\u76f4\u5230\u770b\u5230 MetaLB is enabled\u3002 microk8s status --wait-ready\uff0c\u770b\u5230 is runnung \u4ee3\u8868\u6210\u529f\u3002 microk8s dashboard-proxy \u6253\u958b\u700f\u89bd\u5668\uff0c\u7db2\u5740\u70ba\uff1ahttps://192.168.0.17:10443\u3002\u9ede\u9078\u9032\u968e\uff0c\u7e7c\u7e8c\u524d\u5f80\u3002\u8f38\u5165 Token\uff0c\u9ede\u9078 Sign in\u3002 \u5982\u679c \u4e0d\u559c\u6b61\u5148\u5207\u63db su root\uff0c\u6216\u662f\u51fa\u73fe vboxuser is not in the sudoers file. This incident will be reported. Step1. su root Step2. nano /etc/sudoers Step3. \u52a0\u5165 vboxuser ALL=(ALL:ALL) ALL 4. \u5efa\u7acb\u53e2\u96c6\u95dc\u4fc2 \u5728 master \u4e2d\u8f38\u5165 microk8s add-node # \u5982\u679c\u6709\u932f\uff0c\u4ee3\u8868\u6c92\u6709\u6b0a\u9650\uff0c\u8981\u5148\u57f7\u884c\u4ee5\u4e0b\u5169\u884c su root sudo usermod -a -G microk8s vboxuser sudo chown -R vboxuser ~/.kube microk8s add-node \u9078\u64c7 \u975c\u614b\u7684IP microk8s join 192.168.0.17:25000/d3594715ba0d9c6b63b359c7166421de/bc19f9886c4b \u5728 node \u4e2d\u8f38\u5165 microk8s join 192.168.0.17:25000/d3594715ba0d9c6b63b359c7166421de/bc19f9886c4b \u932f\u8aa4\uff1a Contacting cluster at 192.168.0.101 Connection failed. The hostname (node1) of the joining node does not resolve to the IP \"192.168.0.18\". Refusing join (400). \u89e3\u6c7a\uff1a 192.168.0.18 \u70ba node1 \u7684\u56fa\u5b9a IP\uff0c\u8acb\u5728 master\u7684 /etc/hosts \u6a94\u6848\u4e2d\u52a0\u5165 192.168.0.18 node.mshome.net \u4e00\u884c\u3002 nano /etc/hosts add 192.168.0.18 node.mshome.net 192.168.0.18 node \u932f\u8aa4\uff1a Contacting cluster at 192.168.0.17 Connection failed. Invalid token (500). \u89e3\u6c7a\uff1a \u53bb master \u91cd\u65b0\u7522\u751f\u65b0\u7684 token\u3002(microk8s add-node) \u770b\u5230 Waiting for this node to finish joining the cluster. .. .. .. \u5c31\u4ee3\u8868\u6210\u529f\u4e86 5. \u6e2c\u8a66\u8a2d\u5b9a\u6a94 Deployment\uff1a apiVersion: apps/v1 kind: Deployment metadata: name: docker-k8s-demo-deployment labels: app: docker-k8s-demo spec: replicas: 2 selector: matchLabels: app: docker-k8s-demo template: metadata: labels: app: docker-k8s-demo spec: containers: - name: docker-k8s-demo /assets/image: aweit/docker-demo env: - name: \"PORT\" value: \"8090\" \u5982\u679c\u51fa\u73feError: Err/assets/imagePull\uff0c\u4ee3\u8868 Docker Hub \u4e2d\u7684\u9019\u500b /assets/image \u662f Private \u7684\u3002 \u89e3\u6c7a\u8fa6\u6cd5\uff1a \u89e3\u6c7a\u65b9\u6848\u4e00\uff1a\u8abf\u6574 containerd \u7684 Docker Hub Registry \u8a2d\u5b9a [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"registry-1.docker.io\".auth] username = \"aweit\" password = \"dckr_pat_x2YLeiKrJ94HdPOosyteGOXLk04\" \u6b63\u78ba\u756b\u9762\u5982\u4e0b\uff1a Service\uff1a apiVersion: v1 kind: Service metadata: name: docker-k8s-demo-service spec: type: LoadBalancer selector: app: docker-k8s-demo ports: - protocol: TCP port: 60000 targetPort: 8090 \u6e2c\u8a66\u9023\u7d50 \u9ede\u9078 Service -> Services \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165 http://192.168.0.17:60000/ \u770b Log","title":"Microk8s"},{"location":"microk8s/#microk8s","text":"","title":"Microk8s \u7b46\u8a18"},{"location":"microk8s/#1-master-oracle-vm-virtualbox","text":"\u4e0b\u8f09 iso \u5370\u8c61\u6a94\uff0c\u9078\u64c7 ubuntu-22.04.2-desktop-amd64.iso \u958b\u555f Oracle VM VirtualBox \u7ba1\u7406\u54e1\uff0c\u9ede\u9078\u65b0\u589e -> ISO\u6620\u50cf\u9078\u64c7 ubuntu-22.04.2-desktop-amd64.iso -> \u4e0b\u4e00\u6b65 \u3002 \u5e33\u865f\u5bc6\u78bc\u7528\u9810\u8a2d\u5373\u53ef\u3002\u4f7f\u7528\u8005\u540d\u7a31\u70ba vboxuser\uff1b\u5bc6\u78bc\u70ba changeme \u786c\u9ad4\u898f\u683c\uff1a\u9810\u8a2d\u5373\u53ef\u3002 \u865b\u64ec\u786c\u9ad4\uff1a\u9810\u8a2d\u5373\u53ef\u3002 \u6458\u8981\uff1a\u76f4\u63a5\u6309\u5b8c\u6210\u3002 \u986f\u793a master\uff0c\u6703\u5b89\u88dd\u4e00\u6bb5\u6642\u9593\uff0c\u7d04 20 \u5206\u9418\u3002 \u900f\u904e CTRL+ALT+F5 \u5207\u63db\u6210 Terminal \u6a21\u5f0f\uff1bCTRL+ALT+F1 \u5207\u56de UI \u6a21\u5f0f\u3002 \u8f38\u5165 CTRL+ALT+F5 \u8f38\u5165\u5e33\u865f\u3001\u5bc6\u78bc\u5f8c\u767b\u5165 \u53ef\u8f38\u5165 lsb_release -a \u67e5\u770b Ubuntu \u7248\u672c\uff0c\u6703\u986f\u793a Ubuntu 22.04.2 LTS\u3002 \u8a2d\u5b9a\u56fa\u5b9aIP\uff0c\u4e26\u4e14\u8981\u80fd\u5920\u9023\u81f3\u5916\u7db2\u3002 \u5148\u95dc\u9589VM\uff0c\u4e26\u4e14\u5728\u7db2\u8def\u8a2d\u5b9a\uff0c\u586b\u9078\u4ecb\u97622\uff0c\u9078\u64c7\u6a4b\u63a5\u4ecb\u9762\u5361\u3002 \u8acb\u5148\u5efa\u7acb LANBridge \u865b\u64ec\u4ea4\u63db\u5668 \u67e5\u8a62\u76ee\u524dIP hostname -I \u5207\u63db\u76ee\u9304\uff0c\u4e26\u5217\u51fa\u6a94\u6848\uff0c\u5176\u4e2d\u7684 01-network-manager-all.yaml \u70ba\u8981\u4fee\u6539\u7684\u8a2d\u5b9a\u6a94\u3002 cd /etc/netplan/ ls \u5207\u56de su root \uff0c\u5bc6\u78bc\u70ba changeme \u4fee\u6539\u8a2d\u5b9a\u6a94\uff0c\u4fee\u6539\u5b8c\u5f8c\uff0c\u6309\u4e0b CTRL+X\uff0c\u518d\u8f38\u5165 Y\uff0c\u518d\u6309\u4e0b Enter \u5373\u53ef\u3002 sudo nano 01-network-manager-all.yaml \u539f\u672c\uff1a network: version: 2 renderer: NetworkManager \u66f4\u65b0\uff1a #network: # version: 2 # renderer: NetworkManager network: ethernets: enp0s3: dhcp4: true enp0s8: dhcp4: false addresses: [192.168.0.17/24] version: 2 \u56e0\u70ba \u4e59\u592a\u7db2\u8def \u7684 IP \u70ba 192.168.0.14\uff0c\u6240\u4ee5\u5728\u5206\u914d\u6642\uff0c\u53ef\u4ee5\u7db2\u5f8c\u65b0\u589e\u5373\u53ef\u3002 \u57f7\u884c\u66f4\u65b0\uff0c\u8f38\u5165\u6307\u4ee4\uff0c\u4e26\u76f4\u63a5\u6309\u4e0b\uff0c\u5373\u6703\u7acb\u5373\u66f4\u65b0\u3002(\u6216\u91cd\u65b0\u555f\u52d5VM) sudo netplan try \u67e5\u8a62IP\uff0c\u5c31\u6703\u770b\u5230 192.168.0.17 hostname -I \u958b\u555f SSH \u670d\u52d9 \u5148\u5207\u56de su root\uff0c\u4e26\u5b89\u88dd\u8207\u555f\u52d5 SSH apt-get update apt-get install openssh-server sudo service ssh --full-restart \u767b\u5165SSH window cmd -> ssh vboxuser@192.168.0.17 \u6e2c\u8a66\u770b\u770b\u662f\u5426\u53ef\u4ee5\u9023\u7d50\u5916\u7db2 ping google.com \u5982\u4f55\u4fee\u6539 ssh \u7684\u9810\u8a2d port 1. \u767b\u5165 ssh console \u5f8c\uff0c\u57f7\u884c\u4e0b\u5217\u6307\u4ee4: nano /etc/ssh/sshd_config 2 \u5c07: #Port 22 \u6539\u70ba: Port 3333 3 \u5132\u5b58\u9000\u51fa\u5f8c\uff0c console\u5e95\u4e0b\u5728\u57f7\u884cssh \u91cd\u958b\u6307\u4ee4: service ssh restart \u5982\u4f55\u8b93 root \u4e5f\u80fd\u767b\u5165 SSH nano /etc/ssh/sshd_config \u52a0\u5165 PermitRootLogin yes service ssh restart","title":"1.\u5efa\u4e3b\u7bc0\u9ede master (Oracle VM VirtualBox)"},{"location":"microk8s/#2-node-oracle-vm-virtualbox","text":"\u6b65\u9a5f\u540c\u4e0a\uff0cIP \u6539\u70ba 192.168.0.18 \u5373\u53ef\u3002","title":"2.\u5efa\u7bc0\u9ede node (Oracle VM VirtualBox)"},{"location":"microk8s/#3-master-node-microk8smetallbip-master-ip","text":"master node sudo snap install microk8s --classic master microk8s enable metallb:192.168.0.17-192.168.0.100 master node microk8s enable dashboard dns registry istio helm3 storage master microk8s status --wait-ready master microk8s dashboard-proxy metallb\uff1a\u8981\u597d\u5e7e\u5206\u9418\uff0c\u76f4\u5230\u770b\u5230 MetaLB is enabled\u3002 microk8s status --wait-ready\uff0c\u770b\u5230 is runnung \u4ee3\u8868\u6210\u529f\u3002 microk8s dashboard-proxy \u6253\u958b\u700f\u89bd\u5668\uff0c\u7db2\u5740\u70ba\uff1ahttps://192.168.0.17:10443\u3002\u9ede\u9078\u9032\u968e\uff0c\u7e7c\u7e8c\u524d\u5f80\u3002\u8f38\u5165 Token\uff0c\u9ede\u9078 Sign in\u3002 \u5982\u679c \u4e0d\u559c\u6b61\u5148\u5207\u63db su root\uff0c\u6216\u662f\u51fa\u73fe vboxuser is not in the sudoers file. This incident will be reported. Step1. su root Step2. nano /etc/sudoers Step3. \u52a0\u5165 vboxuser ALL=(ALL:ALL) ALL","title":"3.\u5728 master \u8207 node \u4e2d\uff0c\u5b89\u88dd microk8s\u3002(\u5176\u4e2dmetallb\u7684IP\u70ba master\u7684 IP)"},{"location":"microk8s/#4","text":"\u5728 master \u4e2d\u8f38\u5165 microk8s add-node # \u5982\u679c\u6709\u932f\uff0c\u4ee3\u8868\u6c92\u6709\u6b0a\u9650\uff0c\u8981\u5148\u57f7\u884c\u4ee5\u4e0b\u5169\u884c su root sudo usermod -a -G microk8s vboxuser sudo chown -R vboxuser ~/.kube microk8s add-node \u9078\u64c7 \u975c\u614b\u7684IP microk8s join 192.168.0.17:25000/d3594715ba0d9c6b63b359c7166421de/bc19f9886c4b \u5728 node \u4e2d\u8f38\u5165 microk8s join 192.168.0.17:25000/d3594715ba0d9c6b63b359c7166421de/bc19f9886c4b \u932f\u8aa4\uff1a Contacting cluster at 192.168.0.101 Connection failed. The hostname (node1) of the joining node does not resolve to the IP \"192.168.0.18\". Refusing join (400). \u89e3\u6c7a\uff1a 192.168.0.18 \u70ba node1 \u7684\u56fa\u5b9a IP\uff0c\u8acb\u5728 master\u7684 /etc/hosts \u6a94\u6848\u4e2d\u52a0\u5165 192.168.0.18 node.mshome.net \u4e00\u884c\u3002 nano /etc/hosts add 192.168.0.18 node.mshome.net 192.168.0.18 node \u932f\u8aa4\uff1a Contacting cluster at 192.168.0.17 Connection failed. Invalid token (500). \u89e3\u6c7a\uff1a \u53bb master \u91cd\u65b0\u7522\u751f\u65b0\u7684 token\u3002(microk8s add-node) \u770b\u5230 Waiting for this node to finish joining the cluster. .. .. .. \u5c31\u4ee3\u8868\u6210\u529f\u4e86","title":"4. \u5efa\u7acb\u53e2\u96c6\u95dc\u4fc2"},{"location":"microk8s/#5","text":"Deployment\uff1a apiVersion: apps/v1 kind: Deployment metadata: name: docker-k8s-demo-deployment labels: app: docker-k8s-demo spec: replicas: 2 selector: matchLabels: app: docker-k8s-demo template: metadata: labels: app: docker-k8s-demo spec: containers: - name: docker-k8s-demo /assets/image: aweit/docker-demo env: - name: \"PORT\" value: \"8090\" \u5982\u679c\u51fa\u73feError: Err/assets/imagePull\uff0c\u4ee3\u8868 Docker Hub \u4e2d\u7684\u9019\u500b /assets/image \u662f Private \u7684\u3002 \u89e3\u6c7a\u8fa6\u6cd5\uff1a \u89e3\u6c7a\u65b9\u6848\u4e00\uff1a\u8abf\u6574 containerd \u7684 Docker Hub Registry \u8a2d\u5b9a [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"registry-1.docker.io\".auth] username = \"aweit\" password = \"dckr_pat_x2YLeiKrJ94HdPOosyteGOXLk04\" \u6b63\u78ba\u756b\u9762\u5982\u4e0b\uff1a Service\uff1a apiVersion: v1 kind: Service metadata: name: docker-k8s-demo-service spec: type: LoadBalancer selector: app: docker-k8s-demo ports: - protocol: TCP port: 60000 targetPort: 8090 \u6e2c\u8a66\u9023\u7d50 \u9ede\u9078 Service -> Services \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165 http://192.168.0.17:60000/ \u770b Log","title":"5. \u6e2c\u8a66\u8a2d\u5b9a\u6a94"},{"location":"nfs/","text":"Use NFS for Persistent Volumes https://microk8s.io/docs/nfs 1. Setup an NFS server \u5047\u8a2d\u5728 192.168.0.16 \u67b6\u8a2d NFS server sudo apt update sudo apt-get install nfs-kernel-server Create a directory to be used for NFS: sudo mkdir -p /srv/nfs sudo chown nobody:nogroup /srv/nfs sudo chmod 0777 /srv/nfs Edit the /etc/exports file. Make sure that the IP addresses of all your MicroK8s nodes are able to mount this share. For example, to allow all IP addresses in the 10.0.0.0/24 subnet sudo mv /etc/exports /etc/exports.bak echo '/srv/nfs 192.168.0.0/24(rw,sync,no_subtree_check,no_root_squash)' | sudo tee /etc/exports \u91cd\u555f sudo systemctl restart nfs-kernel-server.service \u78ba\u8a8d NFS Server\u662f\u5426\u6b63\u5e38\u555f\u52d5 sudo systemctl status nfs-kernel-server.service \u6216\u662f\u53ef\u4ee5\u4f7f\u7528 showmount \u547d\u4ee4\u4f86\u6aa2\u67e5 NFS Server \u958b\u51fa\u4f86\u7684\u76ee\u9304 showmount -e 192.168.0.16 1-1. NFS Client (\u53ef\u9078\uff0c\u4f5c\u70ba\u6e2c\u8a66\u7528) \u4f7f\u7528 apt \u547d\u4ee4\u9032\u884c\u5b89\u88dd NFS Client sudo apt update sudo apt install nfs-common \u4f7f\u7528 showmount \u547d\u4ee4\u6aa2\u67e5 NFS Server \u53ef\u9023\u7dda\u7684\u76ee\u9304 showmount -e 192.168.0.16 ---output--- Export list for 192.168.0.16: /srv/nfs 192.168.0.0/24 \u5982\u679c\u51fa\u73fe\u5835\u585e\u73fe\u8c61(Stuck)\uff0c\u53ef\u80fd\u539f\u56e0\u70ba NFS Server \u7684\u9632\u706b\u7246\u5c0e\u81f4\uff0c\u53ea\u8981\u95dc\u6389\u9632\u706b\u7246\u5373\u53ef( sudo ufw disable )\u3002 \u5efa\u7acb\u639b\u8f09\u7528\u76ee\u9304\uff0c\u4e26\u5c07 NFS Server \u7684\u76ee\u9304\u639b\u8f09\u81f3\u672c\u6a5f\u76ee\u9304 sudo mkdir /srv/nfs sudo mount 192.168.0.16:/srv/nfs /srv/nfs \u5982\u679c\u51fa\u73fe mount.nfs: access denied by server while mounting 192.168.0.16:/srv/nfs \u554f\u984c\uff0c\u53ef\u4ee5\u5148\u900f\u904e sudo mount -t nfs -vvvv 192.168.0.16:/srv/nfs /srv/nfs \u67e5\u770b\u8a73\u7d30\u8cc7\u8a0a\u3002 \u6e2c\u8a66\uff1a \u767b\u5165 ssh vboxuser@192.168.17 # NFS Client \u767b\u5165 ssh vboxuser@192.168.16 # NFS Server \u56e0\u70ba NFS Client \u5c07\u672c\u6a5f\u7684 /srv/nfs \u8cc7\u6599\u593e\uff0c\u7d81\u5b9a\u5728 NFS Server \u7684 /srv/nfs \u8cc7\u6599\u593e \u8cc7\u6599\u593e\u4e2d\uff0c\u6240\u4ee5\u5169\u8005\u8cc7\u6599\u593e\u6703\u540c\u6b65\u3002 \u5148\u5728 NFS Client \u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4 touch /srv/nfs/123.txt ls \u518d\u53bb NFS Server \u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5c31\u6703\u770b\u5230 123.txt \u6a94\u6848\u4e86 cd /srv/nfs ls 2.Install the CSI driver for NFS 3.Create a StorageClass for NFS & Create a new PVC # sc-nfs.yaml --- apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: nfs-csi provisioner: nfs.csi.k8s.io parameters: server: 192.168.0.16 share: /srv/nfs reclaimPolicy: Delete volumeBindingMode: Immediate mountOptions: - hard - nfsvers=4.1 microk8s kubectl apply -f - < sc-nfs.yaml # pvc-nfs.yaml --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: storageClassName: nfs-csi accessModes: [ReadWriteOnce] resources: requests: storage: 5Gi microk8s kubectl apply -f - < pvc-nfs.yaml microk8s kubectl describe pvc my-pvc 4. \u6e2c\u8a66 Pod apiVersion: v1 kind: Pod metadata: name: hwchiu labels: app: hwchiu spec: containers: - name: busybox image: hwchiu/netutils:latest volumeMounts: - name: nfs-volume mountPath: /nfs volumes: - name: nfs-volume persistentVolumeClaim: claimName: my-pvc \u9032\u5165Pod kubectl exec -it hwchiu -n nfs-demo -- /bin/bash ls # \u770b\u770b\u6709\u6c92\u6709\u525b\u525b\u5efa\u7acb\u7684 456.txt \u4ee5\u4e0b\u662f\u9019\u500b Pod \u7684 Volume \u5b8c\u6574\u8cc7\u8a0a pvc \u8cc7\u8a0a pv \u8cc7\u8a0a 5. MySQL + NFS kubectl create namespace kube-demo kubectl create secret generic mysql-pass --from-literal=password=password321 -n kube-demo PV\u3001PVC apiVersion: v1 kind: PersistentVolume metadata: name: mysql-pv labels: pv: mysql-pv spec: storageClassName: nfs-csi capacity: storage: 15Gi accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Recycle nfs: path: /srv/nfs/mysql-pv server: 192.168.0.16 --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: mysql-pvc spec: storageClassName: \"nfs-csi\" accessModes: - ReadWriteMany resources: requests: storage: 10Gi selector: matchLabels: pv: mysql-pv Deployment apiVersion: v1 kind: Service metadata: name: mysql spec: selector: app: mysql ports: - protocol: TCP port: 3306 targetPort: 3306 nodePort: 31306 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: name: mysql labels: app: mysql-test spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: nodeName: node containers: - name: mysql-test image: mysql:5.7 env: - name: MYSQL_ROOT_PASSWORD valueFrom: secretKeyRef: name: mysql-pass key: password ports: - containerPort: 3306 volumeMounts: - mountPath: \"/var/lib/mysql\" name: mysql-data volumes: - name: mysql-data persistentVolumeClaim: claimName: mysql-pvc P.S\uff1a \u5982\u679c\u4e00\u76f4 Pending \uff0c\u751a\u81f3\u51fa\u73fe CrashLoopBackOff \u7684\u8a0a\u606f\uff0c\u53ef\u4ee5\u57f7\u884c kubectl logs mysql-848b44f4c5-kgdzc -n kube-demo \u770b\u770b\u54ea\u88e1\u51fa\u932f\u3002 \u53ef\u53c3\u8003 https://blog.csdn.net/m0_46090675/article/details/122276216 \u89e3\u6c7a\u6b64\u554f\u984c\u3002 \u6700\u5f8c\u5c31\u6703\u6210\u529f\u4e86~~~ \u9996\u5148\u6aa2\u67e5 NFS Server \u7684\u6a94\u6848\u4e2d\u662f\u5426\u6709 mysql \u7684\u76f8\u95dc\u8cc7\u6599 \u9032\u5165 Pod \u7684\u547d\u4ee4\u5217\u4e2d\uff0c\u67e5\u770b Mysql \u76f8\u95dc\u8cc7\u8a0a kubectl exec -it mysql-5b46fb64b4-t2m4c -n kube-demo -- /bin/bash","title":"NFS"},{"location":"nfs/#use-nfs-for-persistent-volumes","text":"https://microk8s.io/docs/nfs","title":"Use NFS for Persistent Volumes"},{"location":"nfs/#1-setup-an-nfs-server","text":"\u5047\u8a2d\u5728 192.168.0.16 \u67b6\u8a2d NFS server sudo apt update sudo apt-get install nfs-kernel-server Create a directory to be used for NFS: sudo mkdir -p /srv/nfs sudo chown nobody:nogroup /srv/nfs sudo chmod 0777 /srv/nfs Edit the /etc/exports file. Make sure that the IP addresses of all your MicroK8s nodes are able to mount this share. For example, to allow all IP addresses in the 10.0.0.0/24 subnet sudo mv /etc/exports /etc/exports.bak echo '/srv/nfs 192.168.0.0/24(rw,sync,no_subtree_check,no_root_squash)' | sudo tee /etc/exports \u91cd\u555f sudo systemctl restart nfs-kernel-server.service \u78ba\u8a8d NFS Server\u662f\u5426\u6b63\u5e38\u555f\u52d5 sudo systemctl status nfs-kernel-server.service \u6216\u662f\u53ef\u4ee5\u4f7f\u7528 showmount \u547d\u4ee4\u4f86\u6aa2\u67e5 NFS Server \u958b\u51fa\u4f86\u7684\u76ee\u9304 showmount -e 192.168.0.16","title":"1. Setup an NFS server"},{"location":"nfs/#1-1-nfs-client","text":"\u4f7f\u7528 apt \u547d\u4ee4\u9032\u884c\u5b89\u88dd NFS Client sudo apt update sudo apt install nfs-common \u4f7f\u7528 showmount \u547d\u4ee4\u6aa2\u67e5 NFS Server \u53ef\u9023\u7dda\u7684\u76ee\u9304 showmount -e 192.168.0.16 ---output--- Export list for 192.168.0.16: /srv/nfs 192.168.0.0/24 \u5982\u679c\u51fa\u73fe\u5835\u585e\u73fe\u8c61(Stuck)\uff0c\u53ef\u80fd\u539f\u56e0\u70ba NFS Server \u7684\u9632\u706b\u7246\u5c0e\u81f4\uff0c\u53ea\u8981\u95dc\u6389\u9632\u706b\u7246\u5373\u53ef( sudo ufw disable )\u3002 \u5efa\u7acb\u639b\u8f09\u7528\u76ee\u9304\uff0c\u4e26\u5c07 NFS Server \u7684\u76ee\u9304\u639b\u8f09\u81f3\u672c\u6a5f\u76ee\u9304 sudo mkdir /srv/nfs sudo mount 192.168.0.16:/srv/nfs /srv/nfs \u5982\u679c\u51fa\u73fe mount.nfs: access denied by server while mounting 192.168.0.16:/srv/nfs \u554f\u984c\uff0c\u53ef\u4ee5\u5148\u900f\u904e sudo mount -t nfs -vvvv 192.168.0.16:/srv/nfs /srv/nfs \u67e5\u770b\u8a73\u7d30\u8cc7\u8a0a\u3002 \u6e2c\u8a66\uff1a \u767b\u5165 ssh vboxuser@192.168.17 # NFS Client \u767b\u5165 ssh vboxuser@192.168.16 # NFS Server \u56e0\u70ba NFS Client \u5c07\u672c\u6a5f\u7684 /srv/nfs \u8cc7\u6599\u593e\uff0c\u7d81\u5b9a\u5728 NFS Server \u7684 /srv/nfs \u8cc7\u6599\u593e \u8cc7\u6599\u593e\u4e2d\uff0c\u6240\u4ee5\u5169\u8005\u8cc7\u6599\u593e\u6703\u540c\u6b65\u3002 \u5148\u5728 NFS Client \u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4 touch /srv/nfs/123.txt ls \u518d\u53bb NFS Server \u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5c31\u6703\u770b\u5230 123.txt \u6a94\u6848\u4e86 cd /srv/nfs ls","title":"1-1. NFS Client (\u53ef\u9078\uff0c\u4f5c\u70ba\u6e2c\u8a66\u7528)"},{"location":"nfs/#2install-the-csi-driver-for-nfs","text":"","title":"2.Install the CSI driver for NFS"},{"location":"nfs/#3create-a-storageclass-for-nfs-create-a-new-pvc","text":"# sc-nfs.yaml --- apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: nfs-csi provisioner: nfs.csi.k8s.io parameters: server: 192.168.0.16 share: /srv/nfs reclaimPolicy: Delete volumeBindingMode: Immediate mountOptions: - hard - nfsvers=4.1 microk8s kubectl apply -f - < sc-nfs.yaml # pvc-nfs.yaml --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: storageClassName: nfs-csi accessModes: [ReadWriteOnce] resources: requests: storage: 5Gi microk8s kubectl apply -f - < pvc-nfs.yaml microk8s kubectl describe pvc my-pvc","title":"3.Create a StorageClass for NFS &amp; Create a new PVC"},{"location":"nfs/#4-pod","text":"apiVersion: v1 kind: Pod metadata: name: hwchiu labels: app: hwchiu spec: containers: - name: busybox image: hwchiu/netutils:latest volumeMounts: - name: nfs-volume mountPath: /nfs volumes: - name: nfs-volume persistentVolumeClaim: claimName: my-pvc \u9032\u5165Pod kubectl exec -it hwchiu -n nfs-demo -- /bin/bash ls # \u770b\u770b\u6709\u6c92\u6709\u525b\u525b\u5efa\u7acb\u7684 456.txt \u4ee5\u4e0b\u662f\u9019\u500b Pod \u7684 Volume \u5b8c\u6574\u8cc7\u8a0a pvc \u8cc7\u8a0a pv \u8cc7\u8a0a","title":"4. \u6e2c\u8a66 Pod"},{"location":"nfs/#5-mysql-nfs","text":"kubectl create namespace kube-demo kubectl create secret generic mysql-pass --from-literal=password=password321 -n kube-demo PV\u3001PVC apiVersion: v1 kind: PersistentVolume metadata: name: mysql-pv labels: pv: mysql-pv spec: storageClassName: nfs-csi capacity: storage: 15Gi accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Recycle nfs: path: /srv/nfs/mysql-pv server: 192.168.0.16 --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: mysql-pvc spec: storageClassName: \"nfs-csi\" accessModes: - ReadWriteMany resources: requests: storage: 10Gi selector: matchLabels: pv: mysql-pv Deployment apiVersion: v1 kind: Service metadata: name: mysql spec: selector: app: mysql ports: - protocol: TCP port: 3306 targetPort: 3306 nodePort: 31306 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: name: mysql labels: app: mysql-test spec: replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: nodeName: node containers: - name: mysql-test image: mysql:5.7 env: - name: MYSQL_ROOT_PASSWORD valueFrom: secretKeyRef: name: mysql-pass key: password ports: - containerPort: 3306 volumeMounts: - mountPath: \"/var/lib/mysql\" name: mysql-data volumes: - name: mysql-data persistentVolumeClaim: claimName: mysql-pvc P.S\uff1a \u5982\u679c\u4e00\u76f4 Pending \uff0c\u751a\u81f3\u51fa\u73fe CrashLoopBackOff \u7684\u8a0a\u606f\uff0c\u53ef\u4ee5\u57f7\u884c kubectl logs mysql-848b44f4c5-kgdzc -n kube-demo \u770b\u770b\u54ea\u88e1\u51fa\u932f\u3002 \u53ef\u53c3\u8003 https://blog.csdn.net/m0_46090675/article/details/122276216 \u89e3\u6c7a\u6b64\u554f\u984c\u3002 \u6700\u5f8c\u5c31\u6703\u6210\u529f\u4e86~~~ \u9996\u5148\u6aa2\u67e5 NFS Server \u7684\u6a94\u6848\u4e2d\u662f\u5426\u6709 mysql \u7684\u76f8\u95dc\u8cc7\u6599 \u9032\u5165 Pod \u7684\u547d\u4ee4\u5217\u4e2d\uff0c\u67e5\u770b Mysql \u76f8\u95dc\u8cc7\u8a0a kubectl exec -it mysql-5b46fb64b4-t2m4c -n kube-demo -- /bin/bash","title":"5. MySQL + NFS"},{"location":"practicek8s/","text":"Kubernetes \u88dc\u5145 \u932f\u8aa4 Failed to allocate IP: No available IPs \u56e0\u70ba\u7576\u521d\u5728\u958b\u555f microk8s enable metallb:192.168.0.17-192.168.0.17 \u592a\u5c11\u4e86\u3002\u50cf\u662f\u4f8b\u5b50\u70ba\u53ea\u6709\u958b\u4e00\u500b\u3002 \u6b64\u6642\uff0c\u53ef\u4ee5\u5148\u95dc\u6389 metallb\uff0c\u518d\u91cd\u65b0\u958b\u555f\uff0c\u4e26\u4e14\u5c07IP\u6578\u5b57\u8b8a\u591a\u3002 microk8s disable metallb microk8s enable metallb:192.168.0.17-192.168.0.100 \u53c3\u8003\u7db2\u5740\uff1a https://discuss.kubernetes.io/t/addon-metallb/11790 \u77e5\u8b58 \u900f\u904e MicroK8s \u8a8d\u8b58 Kubernetes \u7684 Service Account (\u670d\u52d9\u5e33\u6236) \u53c3\u8003\u7db2\u5740\uff1a https://blog.miniasp.com/post/2022/08/24/Understanding-Service-Account-in-Kubernetes-through-MicroK8s \u5efa\u7acb\u5225\u540d\uff1a\u8b93 microk8s.kubectl = kubectl sudo snap alias microk8s.kubectl kubectl \u5982\u4f55\u53d6\u5f97 Pod \u7684\u8cc7\u8a0a\uff0c\u4e26\u4ee5 yaml \u5448\u73fe\u3002 kubectl get pod microbot -n dev -o yaml \u9032\u5165Pod\u7684console kubectl exec microbot -it -n dev -- sh RBAC k8s \u5728 1.8 \u7248\u4e4b\u5f8c\uff0c\u5f15\u7528\u4e86 Role-Base Access Control (RBAC\uff0c\u57fa\u65bc\u89d2\u8272\u7684\u8a2a\u554f\u63a7\u5236\uff0c\u597d\u50cf\u6709\u9ede\u7e5e\u820c) \u505a\u70ba\u6388\u6b0a (Authorization) \u7684\u57fa\u790e\uff0c\u4e5f\u5c31\u662f\u4e00\u7a2e\u7ba1\u5236\u8a2a\u554f k8s API \u7684\u6a5f\u5236\u3002\u7ba1\u7406\u8005\u53ef\u4ee5\u900f\u904e rbac.authorization.k8s.io \u9019\u500b API \u7fa4\u7d44\u4f86\u9032\u884c\u52d5\u614b\u7684\u7ba1\u7406\u914d\u7f6e\u3002\u5f15\u7528 https://ithelp.ithome.com.tw/articles/10195944 kubectl create namespace dev kubectl label namespace dev name=dev kubectl run microbot --/assets/image=dontrebootme/microbot:v1 -n dev kubectl create serviceaccount monitor -n dev kubectl create clusterrole aweit --verb=' ' --resource=' ' kubectl create clusterrolebinding aweit --clusterrole=aweit --serviceaccount='dev:monitor' microk8s kubectl create token monitor \u7bc4\u4f8b https://blog.miniasp.com/post/2022/08/24/Understanding-Service-Account-in-Kubernetes-through-MicroK8s Dashboard \u8207 Kubeconfig \u958b\u555f Dashboard microk8s enable dashboard \u767b\u5165\u9801\u9762 \u5982\u4f55\u7522\u751f .kueconfig mircok8s config \u5728\u672c\u6a5f\u5efa\u7acb .kubeconfig \u6a94\u6848\uff0c\u5c07\u4e0a\u5716\u7684\u6587\u5b57\u8cbc\u4e0a\u53bb\u3002 \u91cd\u65b0\u4e0a\u50b3 .kubeconfig \u6a94\u6848\u5373\u53ef\u3002 Token microk8s kubectl create token [service account] microk8s kubectl create token default Volume Type\uff1a emptyDir\u3001hostPath\u3001local\u3001nfs\u3001persistentVolumeClaim apiVersion: v1 kind: Pod metadata: name: test-pd spec: containers: - image: registry.k8s.io/test-webserver name: test-container volumeMounts: - mountPath: /test-pd name: test-volume volumes: - name: test-volume hostPath: # \u5bbf\u4e3b\u4e0a\u76ee\u5f55\u4f4d\u7f6e path: /data # \u6b64\u5b57\u6bb5\u4e3a\u53ef\u9009 type: DirectoryOrCreate nfs [Ubuntu NFS \u5b89\u88dd\u6559\u5b78] https://blog.devcloud.com.tw/ubuntu-nfs-install/ \u4f7f\u7528\u8aaa\u660e https://www.hwchiu.com/kubernetes-storage-ii.html NFS Server IP\uff1a 192.168.0.17 showmount -e 192.168.0.17 \u5982\u679c\u8981\u65b0\u589e\u639b\u8f09\u76ee\u9304 # \u5efa\u7acb\u5171\u4eab\u8cc7\u6599\u593e sudo mkdir /opt/nfsshare # \u7de8\u8f2f NFS Server \u7684 Expose \u8a2d\u5b9a sudo nano /etc/exports ... /opt/nfsshare 192.168.0.0/24(rw,sync,no_subtree_check,no_root_squash) # \u91cd\u555f sudo systemctl restart nfs-kernel-server.service # \u986f\u793a Mount \u8cc7\u8a0a showmount -e 192.168.0.17 PV/PVC/Pod apiVersion: v1 kind: PersistentVolume metadata: name: nfs spec: capacity: storage: 1Mi accessModes: - ReadWriteMany nfs: server: 192.168.0.17 path: \"/opt/nfsshare\" --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs spec: accessModes: - ReadOnlyMany storageClassName: \"\" resources: requests: storage: 1Mi --- apiVersion: v1 kind: Pod metadata: name: hwchiu labels: app: hwchiu spec: containers: - name: busybox image: hwchiu/netutils:latest volumeMounts: - name: nfs-volume mountPath: /nfs volumes: - name: nfs-volume persistentVolumeClaim: claimName: nfs Tomcat & Volume # PV: \u5148\u6709 nfs server\uff0c\u4e26\u4e14\u5efa\u7acb\u597d\u5c0d\u61c9\u7684\u8cc7\u6599\u593e\uff0c\u4f8b\u5982\uff1a/opt/nfsshare/demo/webapps apiVersion: v1 kind: PersistentVolume metadata: name: nfs-demo-tomcat spec: capacity: storage: 1Mi accessModes: - ReadOnlyMany nfs: server: 192.168.0.17 path: \"/opt/nfsshare/demo/webapps\" --- # PVC: \u5efa\u7acb PV \u8acb\u6c42 apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs-demo-tomcat spec: accessModes: - ReadOnlyMany storageClassName: \"\" resources: requests: storage: 1Mi --- # Deployment: tomcat \u93e1\u50cf\uff0c\u7d81\u5b9a nfs \u5171\u7528\u8cc7\u6599\u593e\u3002 # \u56e0\u70ba tomcat 8 \u4ee5\u5f8c\uff0c\u6703\u591a\u4e00\u500b webapps.dir \u8cc7\u6599\u593e\uff0c\u6240\u4ee5\u8981\u57f7\u884c cp -r webapps.dist/. webapps/ \u624d\u80fd\u5c07\u8cc7\u6599\u593e\u8207\u6a94\u6848\u5168\u90e8\u642c\u79fb\u904e\u53bb\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: tomcat-deployment-nautilus labels: name: webdep app: demo spec: replicas: 1 selector: matchLabels: name: webpod app: demo template: metadata: name: webpod labels: name: webpod app: demo spec: containers: - name: tomcat-container-nautilus image: tomcat ports: - containerPort: 8080 volumeMounts: - name: nfs-volume mountPath: /usr/local/tomcat/webapps volumes: - name: nfs-volume persistentVolumeClaim: claimName: nfs-demo-tomcat --- # Service apiVersion: v1 kind: Service metadata: name: tomcat-service-nautilus spec: selector: name: webpod app: demo ports: - port: 80 targetPort: 8080 --- # IngressRoute apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: tomcat-ingress-route namespace: default spec: entryPoints: - websecure routes: - kind: Rule match: Host(`localhost.mic.com.tw`) && PathPrefix(`/tomcat`) middlewares: - name: test-stripprefix - name: test-errors services: - name: tomcat-service-nautilus port: 80 tls: secretName: mic-tls \u628a webapps.dist \u76ee\u9304\u4e0b\u7684\u6240\u6709\u6a94\u6848\uff0c\u8907\u88fd\u5230 webapps \u5e95\u4e0b cp -r webapps.dist/. webapps/ traefik: \u628a /tomcat \u53bb\u6389 # Middleware apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-stripprefix spec: stripPrefix: prefixes: - /tomcat https://localhost.mic.com.tw/tomcat/ Namespace \u72c0\u614b\u70ba Terminal \u6642\uff0c\u5982\u4f55\u522a\u6389\uff1f kubectl delete namespace longhorn-system kubectl get ns/longhorn-system -o json > longhorn-system.json nano longhorn-system.json -> \u6e05\u9664 \"spec\": { \"finalizers\": [ \"kubernetes\" ] } -> \"spec\": { \"finalizers\": [] } kubectl replace --raw \"/api/v1/namespaces/longhorn-system/finalize\" -f ./longhorn-system.json","title":"Kubernetes"},{"location":"practicek8s/#kubernetes","text":"","title":"Kubernetes \u88dc\u5145"},{"location":"practicek8s/#_1","text":"Failed to allocate IP: No available IPs \u56e0\u70ba\u7576\u521d\u5728\u958b\u555f microk8s enable metallb:192.168.0.17-192.168.0.17 \u592a\u5c11\u4e86\u3002\u50cf\u662f\u4f8b\u5b50\u70ba\u53ea\u6709\u958b\u4e00\u500b\u3002 \u6b64\u6642\uff0c\u53ef\u4ee5\u5148\u95dc\u6389 metallb\uff0c\u518d\u91cd\u65b0\u958b\u555f\uff0c\u4e26\u4e14\u5c07IP\u6578\u5b57\u8b8a\u591a\u3002 microk8s disable metallb microk8s enable metallb:192.168.0.17-192.168.0.100 \u53c3\u8003\u7db2\u5740\uff1a https://discuss.kubernetes.io/t/addon-metallb/11790","title":"\u932f\u8aa4"},{"location":"practicek8s/#_2","text":"\u900f\u904e MicroK8s \u8a8d\u8b58 Kubernetes \u7684 Service Account (\u670d\u52d9\u5e33\u6236) \u53c3\u8003\u7db2\u5740\uff1a https://blog.miniasp.com/post/2022/08/24/Understanding-Service-Account-in-Kubernetes-through-MicroK8s \u5efa\u7acb\u5225\u540d\uff1a\u8b93 microk8s.kubectl = kubectl sudo snap alias microk8s.kubectl kubectl \u5982\u4f55\u53d6\u5f97 Pod \u7684\u8cc7\u8a0a\uff0c\u4e26\u4ee5 yaml \u5448\u73fe\u3002 kubectl get pod microbot -n dev -o yaml \u9032\u5165Pod\u7684console kubectl exec microbot -it -n dev -- sh RBAC k8s \u5728 1.8 \u7248\u4e4b\u5f8c\uff0c\u5f15\u7528\u4e86 Role-Base Access Control (RBAC\uff0c\u57fa\u65bc\u89d2\u8272\u7684\u8a2a\u554f\u63a7\u5236\uff0c\u597d\u50cf\u6709\u9ede\u7e5e\u820c) \u505a\u70ba\u6388\u6b0a (Authorization) \u7684\u57fa\u790e\uff0c\u4e5f\u5c31\u662f\u4e00\u7a2e\u7ba1\u5236\u8a2a\u554f k8s API \u7684\u6a5f\u5236\u3002\u7ba1\u7406\u8005\u53ef\u4ee5\u900f\u904e rbac.authorization.k8s.io \u9019\u500b API \u7fa4\u7d44\u4f86\u9032\u884c\u52d5\u614b\u7684\u7ba1\u7406\u914d\u7f6e\u3002\u5f15\u7528 https://ithelp.ithome.com.tw/articles/10195944 kubectl create namespace dev kubectl label namespace dev name=dev kubectl run microbot --/assets/image=dontrebootme/microbot:v1 -n dev kubectl create serviceaccount monitor -n dev kubectl create clusterrole aweit --verb=' ' --resource=' ' kubectl create clusterrolebinding aweit --clusterrole=aweit --serviceaccount='dev:monitor' microk8s kubectl create token monitor \u7bc4\u4f8b https://blog.miniasp.com/post/2022/08/24/Understanding-Service-Account-in-Kubernetes-through-MicroK8s Dashboard \u8207 Kubeconfig \u958b\u555f Dashboard microk8s enable dashboard \u767b\u5165\u9801\u9762 \u5982\u4f55\u7522\u751f .kueconfig mircok8s config \u5728\u672c\u6a5f\u5efa\u7acb .kubeconfig \u6a94\u6848\uff0c\u5c07\u4e0a\u5716\u7684\u6587\u5b57\u8cbc\u4e0a\u53bb\u3002 \u91cd\u65b0\u4e0a\u50b3 .kubeconfig \u6a94\u6848\u5373\u53ef\u3002 Token microk8s kubectl create token [service account] microk8s kubectl create token default","title":"\u77e5\u8b58"},{"location":"practicek8s/#volume","text":"Type\uff1a emptyDir\u3001hostPath\u3001local\u3001nfs\u3001persistentVolumeClaim apiVersion: v1 kind: Pod metadata: name: test-pd spec: containers: - image: registry.k8s.io/test-webserver name: test-container volumeMounts: - mountPath: /test-pd name: test-volume volumes: - name: test-volume hostPath: # \u5bbf\u4e3b\u4e0a\u76ee\u5f55\u4f4d\u7f6e path: /data # \u6b64\u5b57\u6bb5\u4e3a\u53ef\u9009 type: DirectoryOrCreate nfs [Ubuntu NFS \u5b89\u88dd\u6559\u5b78] https://blog.devcloud.com.tw/ubuntu-nfs-install/ \u4f7f\u7528\u8aaa\u660e https://www.hwchiu.com/kubernetes-storage-ii.html NFS Server IP\uff1a 192.168.0.17 showmount -e 192.168.0.17 \u5982\u679c\u8981\u65b0\u589e\u639b\u8f09\u76ee\u9304 # \u5efa\u7acb\u5171\u4eab\u8cc7\u6599\u593e sudo mkdir /opt/nfsshare # \u7de8\u8f2f NFS Server \u7684 Expose \u8a2d\u5b9a sudo nano /etc/exports ... /opt/nfsshare 192.168.0.0/24(rw,sync,no_subtree_check,no_root_squash) # \u91cd\u555f sudo systemctl restart nfs-kernel-server.service # \u986f\u793a Mount \u8cc7\u8a0a showmount -e 192.168.0.17 PV/PVC/Pod apiVersion: v1 kind: PersistentVolume metadata: name: nfs spec: capacity: storage: 1Mi accessModes: - ReadWriteMany nfs: server: 192.168.0.17 path: \"/opt/nfsshare\" --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs spec: accessModes: - ReadOnlyMany storageClassName: \"\" resources: requests: storage: 1Mi --- apiVersion: v1 kind: Pod metadata: name: hwchiu labels: app: hwchiu spec: containers: - name: busybox image: hwchiu/netutils:latest volumeMounts: - name: nfs-volume mountPath: /nfs volumes: - name: nfs-volume persistentVolumeClaim: claimName: nfs","title":"Volume"},{"location":"practicek8s/#tomcat-volume","text":"# PV: \u5148\u6709 nfs server\uff0c\u4e26\u4e14\u5efa\u7acb\u597d\u5c0d\u61c9\u7684\u8cc7\u6599\u593e\uff0c\u4f8b\u5982\uff1a/opt/nfsshare/demo/webapps apiVersion: v1 kind: PersistentVolume metadata: name: nfs-demo-tomcat spec: capacity: storage: 1Mi accessModes: - ReadOnlyMany nfs: server: 192.168.0.17 path: \"/opt/nfsshare/demo/webapps\" --- # PVC: \u5efa\u7acb PV \u8acb\u6c42 apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs-demo-tomcat spec: accessModes: - ReadOnlyMany storageClassName: \"\" resources: requests: storage: 1Mi --- # Deployment: tomcat \u93e1\u50cf\uff0c\u7d81\u5b9a nfs \u5171\u7528\u8cc7\u6599\u593e\u3002 # \u56e0\u70ba tomcat 8 \u4ee5\u5f8c\uff0c\u6703\u591a\u4e00\u500b webapps.dir \u8cc7\u6599\u593e\uff0c\u6240\u4ee5\u8981\u57f7\u884c cp -r webapps.dist/. webapps/ \u624d\u80fd\u5c07\u8cc7\u6599\u593e\u8207\u6a94\u6848\u5168\u90e8\u642c\u79fb\u904e\u53bb\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: tomcat-deployment-nautilus labels: name: webdep app: demo spec: replicas: 1 selector: matchLabels: name: webpod app: demo template: metadata: name: webpod labels: name: webpod app: demo spec: containers: - name: tomcat-container-nautilus image: tomcat ports: - containerPort: 8080 volumeMounts: - name: nfs-volume mountPath: /usr/local/tomcat/webapps volumes: - name: nfs-volume persistentVolumeClaim: claimName: nfs-demo-tomcat --- # Service apiVersion: v1 kind: Service metadata: name: tomcat-service-nautilus spec: selector: name: webpod app: demo ports: - port: 80 targetPort: 8080 --- # IngressRoute apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: tomcat-ingress-route namespace: default spec: entryPoints: - websecure routes: - kind: Rule match: Host(`localhost.mic.com.tw`) && PathPrefix(`/tomcat`) middlewares: - name: test-stripprefix - name: test-errors services: - name: tomcat-service-nautilus port: 80 tls: secretName: mic-tls \u628a webapps.dist \u76ee\u9304\u4e0b\u7684\u6240\u6709\u6a94\u6848\uff0c\u8907\u88fd\u5230 webapps \u5e95\u4e0b cp -r webapps.dist/. webapps/ traefik: \u628a /tomcat \u53bb\u6389 # Middleware apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-stripprefix spec: stripPrefix: prefixes: - /tomcat https://localhost.mic.com.tw/tomcat/","title":"Tomcat &amp; Volume"},{"location":"practicek8s/#namespace-terminal","text":"kubectl delete namespace longhorn-system kubectl get ns/longhorn-system -o json > longhorn-system.json nano longhorn-system.json -> \u6e05\u9664 \"spec\": { \"finalizers\": [ \"kubernetes\" ] } -> \"spec\": { \"finalizers\": [] } kubectl replace --raw \"/api/v1/namespaces/longhorn-system/finalize\" -f ./longhorn-system.json","title":"Namespace \u72c0\u614b\u70ba Terminal \u6642\uff0c\u5982\u4f55\u522a\u6389\uff1f"},{"location":"sonarqube/","text":"SonarQube \u5b89\u88dd docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest \u767b\u5165 http://localhost:9000/ login: admin password: admin \u9700\u8981\u4fee\u6539\u5bc6\u78bc password: mitacadmin \u5169\u500b\u53c3\u6578 sonar_host: http://127.0.0.1:9000/ sonar_token: sqa_2d932888615a4ca75bf80e889a422a9bde711ec3 User > My Account > Security \u8207 Drone \u6574\u5408 \u5efa\u7acb\u5169\u500b secret sonar_host: <http://127.0.0.1:9000/> sonar_token: sqa_2d932888615a4ca75bf80e889a422a9bde711ec3 .drone.yml \u7bc4\u4f8b (\u8981\u653e\u5728 Package \u5f8c) name: code-analysis /assets/image: aosapps/drone-sonar-plugin settings: sonar_host: from_secret: sonar_host sonar_token: from_secret: sonar_token commands: sonar-scanner -Dsonar.projectKey=docker-demo -Dsonar.tests=src/test/java -Dsonar.sources=src/main/java -Dsonar.java.libraries=./target/classes -Dsonar.java.binaries=./target/classes -Dsonar.host.url= http://172.31.93.122:9000/ -Dsonar.login=sqa_2d932888615a4ca75bf80e889a422a9bde711ec3","title":"SonarQube"},{"location":"sonarqube/#sonarqube","text":"\u5b89\u88dd docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest \u767b\u5165 http://localhost:9000/ login: admin password: admin \u9700\u8981\u4fee\u6539\u5bc6\u78bc password: mitacadmin \u5169\u500b\u53c3\u6578 sonar_host: http://127.0.0.1:9000/ sonar_token: sqa_2d932888615a4ca75bf80e889a422a9bde711ec3 User > My Account > Security \u8207 Drone \u6574\u5408 \u5efa\u7acb\u5169\u500b secret sonar_host: <http://127.0.0.1:9000/> sonar_token: sqa_2d932888615a4ca75bf80e889a422a9bde711ec3 .drone.yml \u7bc4\u4f8b (\u8981\u653e\u5728 Package \u5f8c) name: code-analysis /assets/image: aosapps/drone-sonar-plugin settings: sonar_host: from_secret: sonar_host sonar_token: from_secret: sonar_token commands: sonar-scanner -Dsonar.projectKey=docker-demo -Dsonar.tests=src/test/java -Dsonar.sources=src/main/java -Dsonar.java.libraries=./target/classes -Dsonar.java.binaries=./target/classes -Dsonar.host.url= http://172.31.93.122:9000/ -Dsonar.login=sqa_2d932888615a4ca75bf80e889a422a9bde711ec3","title":"SonarQube"},{"location":"spring-cloud-config/","text":"Spring Cloud Config Server \u7a0b\u5f0f\u78bc\uff1a Config Server\uff1a https://github.com/aweit-zhu/SpringCloudConfigServer Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient Config Server Centralized Configuration: The Config Server acts as a central repository for storing and managing configuration properties for multiple services or applications. Instead of having configuration properties hardcoded in each application, they can be stored in a version-controlled repository (such as Git) and accessed by the Config Server. Dynamic Configuration Refresh: The Config Server supports dynamic configuration updates without requiring a restart of the application. When a configuration property is modified in the repository, the Config Server notifies the subscribed applications, and they can fetch and apply the updated configuration without downtime. Configuration Profiles: The Config Server supports multiple configuration profiles, allowing you to define different sets of configuration properties for different environments (e.g., development, staging, production). Applications can retrieve the configuration specific to their active profile by specifying it in the request to the Config Server. Secure Configuration Access: The Config Server can be configured to enforce security measures to protect sensitive configuration properties. It can integrate with authentication and authorization mechanisms, such as Spring Security or OAuth, to ensure that only authorized applications can access specific configurations. Integration with Spring Cloud: The Config Server seamlessly integrates with other components of the Spring Cloud ecosystem. It can be used in conjunction with service discovery tools like Eureka Server and load balancing tools like Ribbon to provide dynamic and scalable configuration management for microservices. Externalized Configuration: By using the Config Server, you can externalize your application's configuration, separating it from the codebase. This approach promotes the Twelve-Factor App methodology, making your application more portable, configurable, and easier to manage across different environments. Config Server code pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>config-server</artifactId> <version>1.0.0</version> <name>SpringCloudConfigServer</name> <description>Config Server using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-server</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties spring.application.name=config-server server.port=8889 spring.cloud.config.server.git.uri=https://github.com/aweit-zhu/SpringCloudConfigServer.git Application\uff1a@EnableConfigServer import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.config.server.EnableConfigServer; @SpringBootApplication @EnableConfigServer public class SpringCloudConfigServerApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudConfigServerApplication.class, args); } } \u5efa\u7acb\u8a2d\u5b9a\u6a94\u6848\uff0c\u56e0\u70ba client \u7684 application name \u70ba eureka-client-demo\uff0c\u6240\u4ee5\u6a94\u540d\u70baeureka-client-demo.yaml / eureka-client-demo.properties\u3002\u8def\u5f91\uff1a\u6839\u76ee\u9304\u3002 Config Client Code \u8981\u5be6\u73fe\u81ea\u52d5\u66f4\u65b0\u6ce8\u5165\u5c6c\u6027 pom.xml\uff1a\u65b0\u589e\u9019\u5169\u500b\u4f9d\u8cf4 <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> application.properties server.port=8888 spring.application.name=eureka-client-demo eureka.client.service-url.defaultZone=http://localhost:8761/eureka management.endpoints.web.exposure.include=* spring.config.import=configserver:http://localhost:8889 Application @EnableScheduling\uff1a\u4ee3\u8868\u6703\u6709\u6392\u7a0b\u3002 RefreshEndpoint\uff1a\u4ee3\u8868\u6703\u5f9e GitHub \u7684\u8a2d\u5b9a\u6a94\u4e2d\u53d6\u5f97\u6700\u65b0\u6578\u64da\u3002 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.endpoint.RefreshEndpoint; import org.springframework.scheduling.annotation.EnableScheduling; import org.springframework.scheduling.annotation.Scheduled; @SpringBootApplication @EnableDiscoveryClient @EnableScheduling public class SpringCloudEurekaClientApplication { @Autowired private RefreshEndpoint refreshEndpoint; public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaClientApplication.class, args); } @Scheduled(fixedDelay = 5000) // Refresh every 5 seconds public void scheduleConfigRefresh() { refreshEndpoint.refresh(); } } Contorller @RefreshScope\uff1a\u81ea\u52d5\u66f4\u65b0\u7684\u7bc4\u570d import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RefreshScope @RestController public class MyController { @Value(\"${message:Default Hello}\") private String message; @GetMapping(\"/message\") public String message() { return message; } } 5.(\u53ef\u9078) \u5982\u679c\u8981\u66f4\u65b0Config \u5c6c\u6027(\u6a19\u6709@RefreshScope)\uff0c\u53ef\u4ee5\u7528 postmane \u89f8\u767c http://localhost:8888/actuator/refresh Test http://localhost:8888/message","title":"Spring Cloud - Config Server"},{"location":"spring-cloud-config/#spring-cloud-config-server","text":"\u7a0b\u5f0f\u78bc\uff1a Config Server\uff1a https://github.com/aweit-zhu/SpringCloudConfigServer Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient","title":"Spring Cloud Config Server"},{"location":"spring-cloud-config/#config-server","text":"Centralized Configuration: The Config Server acts as a central repository for storing and managing configuration properties for multiple services or applications. Instead of having configuration properties hardcoded in each application, they can be stored in a version-controlled repository (such as Git) and accessed by the Config Server. Dynamic Configuration Refresh: The Config Server supports dynamic configuration updates without requiring a restart of the application. When a configuration property is modified in the repository, the Config Server notifies the subscribed applications, and they can fetch and apply the updated configuration without downtime. Configuration Profiles: The Config Server supports multiple configuration profiles, allowing you to define different sets of configuration properties for different environments (e.g., development, staging, production). Applications can retrieve the configuration specific to their active profile by specifying it in the request to the Config Server. Secure Configuration Access: The Config Server can be configured to enforce security measures to protect sensitive configuration properties. It can integrate with authentication and authorization mechanisms, such as Spring Security or OAuth, to ensure that only authorized applications can access specific configurations. Integration with Spring Cloud: The Config Server seamlessly integrates with other components of the Spring Cloud ecosystem. It can be used in conjunction with service discovery tools like Eureka Server and load balancing tools like Ribbon to provide dynamic and scalable configuration management for microservices. Externalized Configuration: By using the Config Server, you can externalize your application's configuration, separating it from the codebase. This approach promotes the Twelve-Factor App methodology, making your application more portable, configurable, and easier to manage across different environments.","title":"Config Server"},{"location":"spring-cloud-config/#config-server-code","text":"pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>config-server</artifactId> <version>1.0.0</version> <name>SpringCloudConfigServer</name> <description>Config Server using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-server</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties spring.application.name=config-server server.port=8889 spring.cloud.config.server.git.uri=https://github.com/aweit-zhu/SpringCloudConfigServer.git Application\uff1a@EnableConfigServer import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.config.server.EnableConfigServer; @SpringBootApplication @EnableConfigServer public class SpringCloudConfigServerApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudConfigServerApplication.class, args); } } \u5efa\u7acb\u8a2d\u5b9a\u6a94\u6848\uff0c\u56e0\u70ba client \u7684 application name \u70ba eureka-client-demo\uff0c\u6240\u4ee5\u6a94\u540d\u70baeureka-client-demo.yaml / eureka-client-demo.properties\u3002\u8def\u5f91\uff1a\u6839\u76ee\u9304\u3002","title":"Config Server code"},{"location":"spring-cloud-config/#config-client-code","text":"\u8981\u5be6\u73fe\u81ea\u52d5\u66f4\u65b0\u6ce8\u5165\u5c6c\u6027 pom.xml\uff1a\u65b0\u589e\u9019\u5169\u500b\u4f9d\u8cf4 <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> application.properties server.port=8888 spring.application.name=eureka-client-demo eureka.client.service-url.defaultZone=http://localhost:8761/eureka management.endpoints.web.exposure.include=* spring.config.import=configserver:http://localhost:8889 Application @EnableScheduling\uff1a\u4ee3\u8868\u6703\u6709\u6392\u7a0b\u3002 RefreshEndpoint\uff1a\u4ee3\u8868\u6703\u5f9e GitHub \u7684\u8a2d\u5b9a\u6a94\u4e2d\u53d6\u5f97\u6700\u65b0\u6578\u64da\u3002 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.endpoint.RefreshEndpoint; import org.springframework.scheduling.annotation.EnableScheduling; import org.springframework.scheduling.annotation.Scheduled; @SpringBootApplication @EnableDiscoveryClient @EnableScheduling public class SpringCloudEurekaClientApplication { @Autowired private RefreshEndpoint refreshEndpoint; public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaClientApplication.class, args); } @Scheduled(fixedDelay = 5000) // Refresh every 5 seconds public void scheduleConfigRefresh() { refreshEndpoint.refresh(); } } Contorller @RefreshScope\uff1a\u81ea\u52d5\u66f4\u65b0\u7684\u7bc4\u570d import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RefreshScope @RestController public class MyController { @Value(\"${message:Default Hello}\") private String message; @GetMapping(\"/message\") public String message() { return message; } } 5.(\u53ef\u9078) \u5982\u679c\u8981\u66f4\u65b0Config \u5c6c\u6027(\u6a19\u6709@RefreshScope)\uff0c\u53ef\u4ee5\u7528 postmane \u89f8\u767c http://localhost:8888/actuator/refresh","title":"Config Client Code"},{"location":"spring-cloud-config/#test","text":"http://localhost:8888/message","title":"Test"},{"location":"spring-cloud-eureka/","text":"Spring Cloud Eureka Server \u7a0b\u5f0f\u78bc\uff1a Eureka Server\uff1a https://github.com/aweit-zhu/SpringCloudEurekaServer Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient Eureka Server Service Registration: Microservices that want to be discovered by other services register themselves with the Eureka Server. Each microservice instance is identified by a unique application name and instance ID. Service Discovery: Services that need to communicate with other services can query the Eureka Server to obtain the network location (host and port) of the desired service instance. Eureka Server maintains a registry of available service instances and provides this information to the clients. Heartbeat Monitoring: Eureka Server continuously checks the health of registered service instances by sending periodic heartbeat requests. If a service instance fails to respond to the heartbeat requests within a certain time period, it is considered offline and removed from the registry. Load Balancing: Eureka Server can also act as a load balancer by providing a list of available service instances for a particular service. Clients can use this information to implement load balancing strategies, such as round-robin or random selection, when making requests to the service. High Availability: Multiple instances of the Eureka Server can be deployed in a cluster to ensure high availability and fault tolerance. Each Eureka Server instance in the cluster keeps its own local registry, and they replicate and synchronize the registration information among themselves. Integration with Spring Cloud: Spring Cloud provides integration with Eureka Server through the spring-cloud-starter-netflix-eureka-server dependency. It simplifies the setup and configuration of Eureka Server in a Spring Boot application. Eureka Server - Code pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>eureka-server</artifactId> <version>1.0.0</version> <name>SpringCloudEurekaServer</name> <description>Eureka Server using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.yaml server: port: 8761 eureka: client: register-with-eureka: false fetch-registry: false Application.java\uff1a\u65b0\u589e @EnableEurekaServer import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @SpringBootApplication @EnableEurekaServer public class SpringCloudEurekaServerApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaServerApplication.class, args); } } \u555f\u52d5\uff0c\u4e26\u958b\u555f\u700f\u89bd\u5668\uff0c\u8f38\u5165\uff1ahttp://localhost:8761/ Eureka Client - Code pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>eureka-client</artifactId> <version>1.0.0</version> <name>SpringCloudEurekaClient</name> <description>Eureka Client using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!-- Spring Cloud Config Client --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties server.port=8888 spring.application.name=eureka-client-demo eureka.client.service-url.defaultZone=http://localhost:8761/eureka management.endpoints.web.exposure.include=* Application @SpringBootApplication @EnableDiscoveryClient public class SpringCloudEurekaClientApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaClientApplication.class, args); } } RestTemplateConfig.java import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class RestTemplateConfig { @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } EurekaClientDemoClient.java\uff1aeureka-client-demo \u70ba\u670d\u52d9\u8a3b\u518a\u7684\u540d\u5b57\u3002 import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.stereotype.Component; @Component public class EurekaClientDemoClient { @Autowired private DiscoveryClient discoveryClient; public String getServiceUrl() { // Retrieve the instances of the service by application name List<ServiceInstance> instances = discoveryClient.getInstances(\"eureka-client-demo\"); // Choose one of the instances (e.g., the first one) ServiceInstance instance = instances.get(0); // Get the URL of the service instance String serviceUrl = instance.getUri().toString(); return serviceUrl; } } HelloController.java @GetMapping(\"/hello\")\u3001@GetMapping(\"/hello-from-eureka\") \u7686\u70ba\u8a3b\u518a\u5230 Eureka \u7684\u65b9\u5f0f\uff0c\u548c\u539f\u672c\u7684\u5beb\u6cd5\u4e00\u6a21\u4e00\u6a23\u3002 @GetMapping(\"/hello-from-eureka\") \u662f\u70ba\u4e86\u8981\u6e2c\u8a66\u662f\u5426\u53ef\u4ee5\u6210\u529f\u547c\u53eb\u5230Eureka \u4e0a\u7684\u670d\u52d9\u3002serviceUrl\u5c31\u662f Eureka \u7684\u670d\u52d9\u3002 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import com.example.service.EurekaClientDemoClient; @RestController public class HelloController { @Autowired private RestTemplate restTemplate; @Autowired private EurekaClientDemoClient client; @GetMapping(\"/hello\") public String hello() { return \"Hello from Eureka Client!\"; } @GetMapping(\"/hello-from-eureka\") public String hello2() { String serviceUrl = client.getServiceUrl(); String helloUrl = serviceUrl + \"/hello\"; String response = restTemplate.getForObject(helloUrl, String.class); return response; } } Test http://localhost:8888/hello-from-eureka","title":"Spring Cloud - Eureka Server"},{"location":"spring-cloud-eureka/#spring-cloud-eureka-server","text":"\u7a0b\u5f0f\u78bc\uff1a Eureka Server\uff1a https://github.com/aweit-zhu/SpringCloudEurekaServer Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient","title":"Spring Cloud Eureka Server"},{"location":"spring-cloud-eureka/#eureka-server","text":"Service Registration: Microservices that want to be discovered by other services register themselves with the Eureka Server. Each microservice instance is identified by a unique application name and instance ID. Service Discovery: Services that need to communicate with other services can query the Eureka Server to obtain the network location (host and port) of the desired service instance. Eureka Server maintains a registry of available service instances and provides this information to the clients. Heartbeat Monitoring: Eureka Server continuously checks the health of registered service instances by sending periodic heartbeat requests. If a service instance fails to respond to the heartbeat requests within a certain time period, it is considered offline and removed from the registry. Load Balancing: Eureka Server can also act as a load balancer by providing a list of available service instances for a particular service. Clients can use this information to implement load balancing strategies, such as round-robin or random selection, when making requests to the service. High Availability: Multiple instances of the Eureka Server can be deployed in a cluster to ensure high availability and fault tolerance. Each Eureka Server instance in the cluster keeps its own local registry, and they replicate and synchronize the registration information among themselves. Integration with Spring Cloud: Spring Cloud provides integration with Eureka Server through the spring-cloud-starter-netflix-eureka-server dependency. It simplifies the setup and configuration of Eureka Server in a Spring Boot application.","title":"Eureka Server"},{"location":"spring-cloud-eureka/#eureka-server-code","text":"pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>eureka-server</artifactId> <version>1.0.0</version> <name>SpringCloudEurekaServer</name> <description>Eureka Server using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.yaml server: port: 8761 eureka: client: register-with-eureka: false fetch-registry: false Application.java\uff1a\u65b0\u589e @EnableEurekaServer import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @SpringBootApplication @EnableEurekaServer public class SpringCloudEurekaServerApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaServerApplication.class, args); } } \u555f\u52d5\uff0c\u4e26\u958b\u555f\u700f\u89bd\u5668\uff0c\u8f38\u5165\uff1ahttp://localhost:8761/","title":"Eureka Server - Code"},{"location":"spring-cloud-eureka/#eureka-client-code","text":"pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.14</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>eureka-client</artifactId> <version>1.0.0</version> <name>SpringCloudEurekaClient</name> <description>Eureka Client using Spring Boot</description> <properties> <java.version>11</java.version> <spring-cloud.version>2021.0.8</spring-cloud.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!-- Spring Cloud Config Client --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-config-client</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties server.port=8888 spring.application.name=eureka-client-demo eureka.client.service-url.defaultZone=http://localhost:8761/eureka management.endpoints.web.exposure.include=* Application @SpringBootApplication @EnableDiscoveryClient public class SpringCloudEurekaClientApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudEurekaClientApplication.class, args); } } RestTemplateConfig.java import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class RestTemplateConfig { @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } EurekaClientDemoClient.java\uff1aeureka-client-demo \u70ba\u670d\u52d9\u8a3b\u518a\u7684\u540d\u5b57\u3002 import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.stereotype.Component; @Component public class EurekaClientDemoClient { @Autowired private DiscoveryClient discoveryClient; public String getServiceUrl() { // Retrieve the instances of the service by application name List<ServiceInstance> instances = discoveryClient.getInstances(\"eureka-client-demo\"); // Choose one of the instances (e.g., the first one) ServiceInstance instance = instances.get(0); // Get the URL of the service instance String serviceUrl = instance.getUri().toString(); return serviceUrl; } } HelloController.java @GetMapping(\"/hello\")\u3001@GetMapping(\"/hello-from-eureka\") \u7686\u70ba\u8a3b\u518a\u5230 Eureka \u7684\u65b9\u5f0f\uff0c\u548c\u539f\u672c\u7684\u5beb\u6cd5\u4e00\u6a21\u4e00\u6a23\u3002 @GetMapping(\"/hello-from-eureka\") \u662f\u70ba\u4e86\u8981\u6e2c\u8a66\u662f\u5426\u53ef\u4ee5\u6210\u529f\u547c\u53eb\u5230Eureka \u4e0a\u7684\u670d\u52d9\u3002serviceUrl\u5c31\u662f Eureka \u7684\u670d\u52d9\u3002 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import com.example.service.EurekaClientDemoClient; @RestController public class HelloController { @Autowired private RestTemplate restTemplate; @Autowired private EurekaClientDemoClient client; @GetMapping(\"/hello\") public String hello() { return \"Hello from Eureka Client!\"; } @GetMapping(\"/hello-from-eureka\") public String hello2() { String serviceUrl = client.getServiceUrl(); String helloUrl = serviceUrl + \"/hello\"; String response = restTemplate.getForObject(helloUrl, String.class); return response; } }","title":"Eureka Client - Code"},{"location":"spring-cloud-eureka/#test","text":"http://localhost:8888/hello-from-eureka","title":"Test"},{"location":"spring-cloud-feign/","text":"Spring Cloud with OpenFiegn Client \u60c5\u5883 Eureka Client\uff1a\u5efa\u7acbController\uff0c\u4e26\u5c07 /api/** \u7684 Controller \u900f\u904e Spring Security \u4f86\u4fdd\u8b77\uff0c\u9019\u908a\u4f7f\u7528\u7c21\u55ae\u7684 In memory authencate. \u6240\u4ee5\u8a3b\u518a\u4e0a\u53bb\u7684\u670d\u52d9\u4e5f\u9700\u8981\u900f\u904e http base \u4f86\u767b\u5165\u3002 \u900f\u904e OpenFiegn \u7684 Client \u547c\u53eb\u8a3b\u518a\u5728 Eureka Server \u4e0a\u7684\u670d\u52d9\uff0c\u4e5f\u9700\u8981\u5c07\u6bcf\u4e00\u8acb\u6c42\u52a0\u4e0a authorization token\u3002\u4e5f\u9700\u8981\u5be6\u4f5c Spring security\u3002 \u96d9\u65b9\u7684 Spring Security \u7684 User \u4f86\u6e90\u7686\u8981\u540c\u6e90\uff0c\u624d\u6709\u8fa6\u6cd5\u76f4\u63a5\u767b \u5165\u3002(user/password \u4f5c\u70ba\u7c21\u55ae\u7684\u5e33\u5bc6\u8a8d\u8b49) \u7a0b\u5f0f\u78bc\uff1a FeignClient\uff1a https://github.com/aweit-zhu/SpringCloudFeignClient Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient OpenFiegn \u5b83\u5c01\u88dd\u4e86\u547c\u53eb\u9060\u7aef\u670d\u52d9\u7684\u5957\u4ef6\uff0c\u8b93\u60a8\u53ef\u4ee5\u900f\u904e\u5b9a\u7fa9\u670d\u52d9\u63a5\u53e3\uff0c\u514d\u53bb\u4e86\u5be6\u4f5c @RestTemplete (\u4e0d\u7528\u53bb\u7406\u6703 Http Request \u548c Http Response)\u3002 \u5716\u7247\u4f86\u6e90\uff1a https://www.javaguides.net/2022/10/spring-boot-microservices-communication-using-spring-cloud-open-feign.html \u6211\u5011\u53ef\u4ee5\u900f\u904e\u4e0a\u8ff0\u4ee3\u78bc\uff0c\u770b\u770b ChatGPT \u5982\u4f55\u89e3\u91cb\uff1f Certainly! Let's go through your code step by step: java @FeignClient(name = \"eureka-client-demo\") public interface RemoteServiceClient { @GetMapping(\"/api/hello\") String getHelloMessage(); @PostMapping(\"/api/post\") String getPostMessage(); } @FeignClient(name = \"eureka-client-demo\") : This annotation is used to indicate that this interface is a Feign client and specifies the name of the Eureka client that you want to communicate with. In this case, the Eureka client is named \"eureka-client-demo\". @GetMapping(\"/api/hello\") : This annotation is used to map the getHelloMessage() method to the HTTP GET request with the endpoint path \"/api/hello\". It indicates that this method will be used to retrieve a hello message from the specified endpoint. String getHelloMessage() : This method signature defines the contract for the Feign client. It specifies that the method will return a String, which represents the hello message retrieved from the endpoint. @PostMapping(\"/api/post\") : This annotation is used to map the getPostMessage() method to the HTTP POST request with the endpoint path \"/api/post\". It indicates that this method will be used to send a post message to the specified endpoint. String getPostMessage() : This method signature defines the contract for the Feign client. It specifies that the method will return a String, which represents the response message received from the endpoint after sending the post request. Overall, this code defines a Feign client interface RemoteServiceClient that communicates with the \"eureka-client-demo\" Eureka client. It provides two methods, getHelloMessage() and getPostMessage() , which correspond to GET and POST requests, respectively, and are mapped to specific endpoint paths (\"/api/hello\" and \"/api/post\"). OpenFiegn with spring security pom.xml <dependencies> <!-- Spring Cloud OpenFeign --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!-- Spring Cloud Starter Netflix Eureka Client (if using service discovery) --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <!-- Spring Boot Starter Web --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- Spring Boot DevTools (optional) --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> Application\uff1a@EnableDiscoveryClient\u3001@EnableFeignClients @SpringBootApplication @EnableDiscoveryClient @EnableFeignClients public class SpringCloudFeignClientApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudFeignClientApplication.class, args); } } Feign Service @FeignClient(name = \"eureka-client-demo\") public interface RemoteServiceClient { @GetMapping(\"/api/hello\") String getHelloMessage(); @PostMapping(\"/api/post\") String getPostMessage(); } Controller @RestController public class HelloController { @Autowired RemoteServiceClient remoteServiceClient; @GetMapping(\"/api/hello\") public String getHelloMessageFromRemoteService() { return remoteServiceClient.getHelloMessage(); } @GetMapping(\"/api/post\") public String getPostMessageFromRemoteService() { return remoteServiceClient.getPostMessage(); } } Security Config @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override public void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"user\") .password(passwordEncoder().encode(\"password\")) .roles(\"USER\"); } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/api/**\").authenticated() .anyRequest().permitAll() .and() .httpBasic() .and() .csrf().disable(); } } Interceptor FeignConfiguration @Configuration public class FeignConfiguration { @Bean public FeignClientInterceptor feignClientInterceptor() { return new FeignClientInterceptor(); } } FeignClientInterceptor public class FeignClientInterceptor implements RequestInterceptor { @Autowired private HttpServletRequest request; @Override public void apply(RequestTemplate requestTemplate) { String reqAuthInput= request.getHeader(\"authorization\"); if (reqAuthInput!= null) { requestTemplate.header(\"authorization\",reqAuthInput); } } } application.properties server.port=8890 spring.application.name=eureka-client-2 eureka.client.service-url.defaultZone=http://localhost:8761/eureka Eureka Client with spring security pom.xml <!-- Spring Security --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> Security Config @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override public void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"user\") .password(passwordEncoder().encode(\"password\")) .roles(\"USER\"); } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/api/**\").authenticated() .anyRequest().permitAll() .and() .httpBasic() .and() .csrf().disable(); } } Controller @RestController public class HelloController { @GetMapping(\"/api/hello\") public String hello() { return \"Hello from Eureka Client!\"; } @PostMapping(\"/api/post\") public String post() { return \"Post Method Successful\"; } } Test Feign Client Web API (POST)\uff1a http://localhost:8890/api/post Feign Client Web API (GET)\uff1a http://localhost:8890/api/hello Eureka Server\uff1a http://localhost:8761/ \u53ef\u4ee5\u770b\u5230 \u5169\u500b\u670d\u52d9\u88ab\u8a3b\u518a\u3002","title":"Spring Cloud - OpenFeign Client"},{"location":"spring-cloud-feign/#spring-cloud-with-openfiegn-client","text":"","title":"Spring Cloud with OpenFiegn Client"},{"location":"spring-cloud-feign/#_1","text":"Eureka Client\uff1a\u5efa\u7acbController\uff0c\u4e26\u5c07 /api/** \u7684 Controller \u900f\u904e Spring Security \u4f86\u4fdd\u8b77\uff0c\u9019\u908a\u4f7f\u7528\u7c21\u55ae\u7684 In memory authencate. \u6240\u4ee5\u8a3b\u518a\u4e0a\u53bb\u7684\u670d\u52d9\u4e5f\u9700\u8981\u900f\u904e http base \u4f86\u767b\u5165\u3002 \u900f\u904e OpenFiegn \u7684 Client \u547c\u53eb\u8a3b\u518a\u5728 Eureka Server \u4e0a\u7684\u670d\u52d9\uff0c\u4e5f\u9700\u8981\u5c07\u6bcf\u4e00\u8acb\u6c42\u52a0\u4e0a authorization token\u3002\u4e5f\u9700\u8981\u5be6\u4f5c Spring security\u3002 \u96d9\u65b9\u7684 Spring Security \u7684 User \u4f86\u6e90\u7686\u8981\u540c\u6e90\uff0c\u624d\u6709\u8fa6\u6cd5\u76f4\u63a5\u767b \u5165\u3002(user/password \u4f5c\u70ba\u7c21\u55ae\u7684\u5e33\u5bc6\u8a8d\u8b49)","title":"\u60c5\u5883"},{"location":"spring-cloud-feign/#_2","text":"FeignClient\uff1a https://github.com/aweit-zhu/SpringCloudFeignClient Eureka Client\uff1a https://github.com/aweit-zhu/SpringCloudEurekaClient","title":"\u7a0b\u5f0f\u78bc\uff1a"},{"location":"spring-cloud-feign/#openfiegn","text":"\u5b83\u5c01\u88dd\u4e86\u547c\u53eb\u9060\u7aef\u670d\u52d9\u7684\u5957\u4ef6\uff0c\u8b93\u60a8\u53ef\u4ee5\u900f\u904e\u5b9a\u7fa9\u670d\u52d9\u63a5\u53e3\uff0c\u514d\u53bb\u4e86\u5be6\u4f5c @RestTemplete (\u4e0d\u7528\u53bb\u7406\u6703 Http Request \u548c Http Response)\u3002 \u5716\u7247\u4f86\u6e90\uff1a https://www.javaguides.net/2022/10/spring-boot-microservices-communication-using-spring-cloud-open-feign.html \u6211\u5011\u53ef\u4ee5\u900f\u904e\u4e0a\u8ff0\u4ee3\u78bc\uff0c\u770b\u770b ChatGPT \u5982\u4f55\u89e3\u91cb\uff1f Certainly! Let's go through your code step by step: java @FeignClient(name = \"eureka-client-demo\") public interface RemoteServiceClient { @GetMapping(\"/api/hello\") String getHelloMessage(); @PostMapping(\"/api/post\") String getPostMessage(); } @FeignClient(name = \"eureka-client-demo\") : This annotation is used to indicate that this interface is a Feign client and specifies the name of the Eureka client that you want to communicate with. In this case, the Eureka client is named \"eureka-client-demo\". @GetMapping(\"/api/hello\") : This annotation is used to map the getHelloMessage() method to the HTTP GET request with the endpoint path \"/api/hello\". It indicates that this method will be used to retrieve a hello message from the specified endpoint. String getHelloMessage() : This method signature defines the contract for the Feign client. It specifies that the method will return a String, which represents the hello message retrieved from the endpoint. @PostMapping(\"/api/post\") : This annotation is used to map the getPostMessage() method to the HTTP POST request with the endpoint path \"/api/post\". It indicates that this method will be used to send a post message to the specified endpoint. String getPostMessage() : This method signature defines the contract for the Feign client. It specifies that the method will return a String, which represents the response message received from the endpoint after sending the post request. Overall, this code defines a Feign client interface RemoteServiceClient that communicates with the \"eureka-client-demo\" Eureka client. It provides two methods, getHelloMessage() and getPostMessage() , which correspond to GET and POST requests, respectively, and are mapped to specific endpoint paths (\"/api/hello\" and \"/api/post\").","title":"OpenFiegn"},{"location":"spring-cloud-feign/#openfiegn-with-spring-security","text":"pom.xml <dependencies> <!-- Spring Cloud OpenFeign --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!-- Spring Cloud Starter Netflix Eureka Client (if using service discovery) --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> <!-- Spring Boot Starter Web --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- Spring Boot DevTools (optional) --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> Application\uff1a@EnableDiscoveryClient\u3001@EnableFeignClients @SpringBootApplication @EnableDiscoveryClient @EnableFeignClients public class SpringCloudFeignClientApplication { public static void main(String[] args) { SpringApplication.run(SpringCloudFeignClientApplication.class, args); } } Feign Service @FeignClient(name = \"eureka-client-demo\") public interface RemoteServiceClient { @GetMapping(\"/api/hello\") String getHelloMessage(); @PostMapping(\"/api/post\") String getPostMessage(); } Controller @RestController public class HelloController { @Autowired RemoteServiceClient remoteServiceClient; @GetMapping(\"/api/hello\") public String getHelloMessageFromRemoteService() { return remoteServiceClient.getHelloMessage(); } @GetMapping(\"/api/post\") public String getPostMessageFromRemoteService() { return remoteServiceClient.getPostMessage(); } } Security Config @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override public void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"user\") .password(passwordEncoder().encode(\"password\")) .roles(\"USER\"); } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/api/**\").authenticated() .anyRequest().permitAll() .and() .httpBasic() .and() .csrf().disable(); } } Interceptor FeignConfiguration @Configuration public class FeignConfiguration { @Bean public FeignClientInterceptor feignClientInterceptor() { return new FeignClientInterceptor(); } } FeignClientInterceptor public class FeignClientInterceptor implements RequestInterceptor { @Autowired private HttpServletRequest request; @Override public void apply(RequestTemplate requestTemplate) { String reqAuthInput= request.getHeader(\"authorization\"); if (reqAuthInput!= null) { requestTemplate.header(\"authorization\",reqAuthInput); } } } application.properties server.port=8890 spring.application.name=eureka-client-2 eureka.client.service-url.defaultZone=http://localhost:8761/eureka","title":"OpenFiegn with spring security"},{"location":"spring-cloud-feign/#eureka-client-with-spring-security","text":"pom.xml <!-- Spring Security --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> Security Config @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override public void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"user\") .password(passwordEncoder().encode(\"password\")) .roles(\"USER\"); } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/api/**\").authenticated() .anyRequest().permitAll() .and() .httpBasic() .and() .csrf().disable(); } } Controller @RestController public class HelloController { @GetMapping(\"/api/hello\") public String hello() { return \"Hello from Eureka Client!\"; } @PostMapping(\"/api/post\") public String post() { return \"Post Method Successful\"; } }","title":"Eureka Client with spring security"},{"location":"spring-cloud-feign/#test","text":"Feign Client Web API (POST)\uff1a http://localhost:8890/api/post Feign Client Web API (GET)\uff1a http://localhost:8890/api/hello Eureka Server\uff1a http://localhost:8761/ \u53ef\u4ee5\u770b\u5230 \u5169\u500b\u670d\u52d9\u88ab\u8a3b\u518a\u3002","title":"Test"},{"location":"spring-data-jpa/","text":"JPA JPA(Java Persistence API) \u662f SUN \u91dd\u5c0d ORM \u6280\u8853\u63d0\u51fa\u7684\u898f\u7bc4\uff0c\u76ee\u7684\u70ba\u7c21\u5316\u6301\u4e45\u5316\u7684\u958b\u767c\u5de5\u4f5c\u4ee5\u53ca\u6574\u5408\u5404\u5bb6 ORM \u6280\u8853(Hibernate\u3001TopLink\u3001OpenJpa\u2026)\u3002 Spring Data JPA Spring Data JPA \u662f Spring \u6839\u64da ORM \u6846\u67b6\u548c JPA \u898f\u7bc4\u800c\u5c01\u88dd\u7684 JPA \u61c9\u7528\u6846\u67b6\uff0c\u76ee\u7684\u662f\u964d\u4f4e\u5b58\u53d6\u8cc7\u6599\u5c64\u7684\u5de5\u4f5c\u91cf\uff0c\u8b93\u958b\u767c\u4eba\u54e1\u53ea\u9700\u5beb\u51fa repository \u7684\u4ecb\u9762\uff0c\u800c Spring \u81ea\u52d5\u5e6b\u4f60\u5be6\u4f5c\u5176\u529f\u80fd\u3002 \u4f9d\u8cf4 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <!--\u63a8\u85a6\u7528 lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \u914d\u7f6e Datasource (\u4ee5\u55ae\u500b\u8cc7\u6599\u5eab\u70ba\u4f8b) spring: datasource: url: jdbc:mysql://172.31.93.122:3306/db username: user password: password driver-class-name: com.mysql.cj.jdbc.Driver jpa: hibernate: ddl-auto: update show-sql: false properties: hibernate: format_sql: true database-platform: org.hibernate.dialect.MySQL8Dialect \u5be6\u4f5c User \u8207 Todo\uff0c\u5169\u8005\u70ba\u4e00 (User) \u5c0d\u591a (Todo) \u7684\u95dc\u4fc2\u3002 @Data @Builder @Entity @Table public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Integer id; @Column public String name; @Column(insertable = false, columnDefinition = \"int default 1\") Integer gender = 1; @Column public String password; @JsonManagedReference @OneToMany(cascade = CascadeType.ALL, mappedBy = \"user\") @EqualsAndHashCode.Exclude private Set<Todo> todos; } ** \u8a3b\u89e3\u8aaa\u660e @Data Equivalent to @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode. <> \u53c3\u8003\u8cc7\u6599: https://javabydeveloper.com/lombok-data-annotation/ @EqualsAndHashCode: \u6a19\u8a3b\u5728\u985e\u5225\u4e0a\uff0cLombok \u6703\u81ea\u52d5\u5be6\u4f5c equals(Object other) \u8207 hashCode()\u3002\u5be6\u4f5c\u8005\u5169\u8005\u7684\u65b9\u6cd5\u662f\u70ba\u4e86\u6bd4\u5c0d\u5169\u7269\u4ef6\u662f\u5426\u76f8\u7b49\u6642\uff0c\u4e14\u6bd4\u5c0d\u6642\u6bd4\u8f03\u6709\u6548\u7387\u3002 \u8b80\u8005\u53ef\u60f3\u6210\u81ea\u5df1\u5728\u901b\u66f8\u5e97\uff0c\u4e26\u900f\u904e\u66f8\u540d\u4f86\u627e\u66f8\u3002\u4e00\u822c\u4f86\u8aaa\uff0c\u66f8\u6ac3\u4e0a\u6703\u6a19\u793a\u90a3\u4e00\u5340\u7684\u66f8\u7c4d\u5206\u985e\u3002\u90a3\u9ebc\u900f\u904e\u66f8\u540d\u4f86\u6c7a\u5b9a\u8a72\u524d\u5f80\u54ea\u4e00\u5340\u5c0b\u627e\uff0c\u76f8\u7576\u65bc\u8a08\u7b97 hash code\u3001\u627e\u51fa bucket \u7684\u904e\u7a0b\u3002\u63a5\u8457\uff0c\u56e0\u70ba\u4e00\u500b\u5340\u57df\u4ecd\u6709\u8a31\u591a\u66f8\u7c4d\uff0c\u6240\u4ee5\u6211\u5011\u5f97\u4e00\u4e00\u6bd4\u5c0d\u5b83\u5011\u7684\u66f8\u540d\u3002\u5c31\u5982\u540c\u5728 bucket \u4e2d\uff0c\u547c\u53eb equals \u65b9\u6cd5\u6bd4\u5c0d key \u7684\u904e\u7a0b\u3002\u53c3\u8003\u81ea https://chikuwa-tech-study.blogspot.com/2022/01/java-equals-hashcode-hashmap.html @GeneratedValue(strategy = GenerationType.IDENTITY) \u4e3b\u9375\u7531\u8cc7\u6599\u5eab\u63a7\u5236\uff0c\u81ea\u52d5\u589e\u9577\u3002 @Column \u5f9e\u5b9a\u7fa9\u53ef\u4ee5\u770b\u51fa\uff0c@Column\u8a3b\u89e3\u4e00\u5171\u670910\u500b\u5c6c\u6027\uff0c\u901910\u500b\u5c6c\u6027\u5747\u70ba\u53ef\u9078\u5c6c\u6027\uff0c\u5404\u5c6c\u6027\u542b\u7fa9\u5206\u5225\u5982\u4e0b\uff1a 1\u3001name name\u5c6c\u6027\u5b9a\u7fa9\u4e86\u88ab\u6a19\u8a3b\u6b04\u4f4d\u5728\u8cc7\u6599\u5eab\u8868\u4e2d\u6240\u5c0d\u61c9\u6b04\u4f4d\u7684\u540d\u7a31\uff1b 2\u3001unique unique\u5c6c\u6027\u8868\u793a\u8a72\u6b04\u4f4d\u662f\u5426\u70ba\u552f\u4e00\u6a19\u8b58\uff0c\u9810\u8a2d\u70bafalse\u3002\u5982\u679c\u8868\u4e2d\u6709\u4e00\u500b\u6b04\u4f4d\u9700\u8981\u552f\u4e00\u6a19\u8b58\uff0c\u5247\u65e2\u53ef\u4ee5\u4f7f\u7528\u8a72\u6a19\u8a18\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528@Table\u6a19\u8a18\u4e2d\u7684@UniqueConstraint\u3002 3\u3001nullable nullable\u5c6c\u6027\u8868\u793a\u8a72\u6b04\u4f4d\u662f\u5426\u53ef\u4ee5\u70banull\u503c\uff0c\u9810\u8a2d\u70batrue\u3002 4\u3001insertable insertable\u5c6c\u6027\u8868\u793a\u5728\u4f7f\u7528\u201cINSERT\u201d\u6307\u4ee4\u78bc\u63d2\u5165\u8cc7\u6599\u6642\uff0c\u662f\u5426\u9700\u8981\u63d2\u5165\u8a72\u6b04\u4f4d\u7684\u503c\u3002 5\u3001updatable updatable\u5c6c\u6027\u8868\u793a\u5728\u4f7f\u7528\u201cUPDATE\u201d\u6307\u4ee4\u78bc\u63d2\u5165\u8cc7\u6599\u6642\uff0c\u662f\u5426\u9700\u8981\u66f4\u65b0\u8a72\u6b04\u4f4d\u7684\u503c\u3002insertable\u548cupdatable\u5c6c\u6027\u4e00\u822c\u591a\u7528\u65bc\u53ea\u8b80\u7684\u5c6c\u6027\uff0c\u4f8b\u5982\u4e3b\u9375\u548c\u5916\u4f86\u9375\u7b49\u3002\u9019\u4e9b\u6b04\u4f4d\u7684\u503c\u901a\u5e38\u662f\u81ea\u52d5\u751f\u6210\u7684\u3002 6\u3001columnDefinition columnDefinition\u5c6c\u6027\u8868\u793a\u5efa\u7acb\u8868\u6642\uff0c\u8a72\u6b04\u4f4d\u5efa\u7acb\u7684SQL\u8a9e\u53e5\uff0c\u4e00\u822c\u7528\u65bc\u901a\u904eEntity\u751f\u6210\u8868\u5b9a\u7fa9\u6642\u4f7f\u7528\u3002\uff08\u4e5f\u5c31\u662f\u8aaa\uff0c\u5982\u679cDB\u4e2d\u8868\u5df2\u7d93\u5efa\u597d\uff0c\u8a72\u5c6c\u6027\u6c92\u6709\u5fc5\u8981\u4f7f\u7528\u3002\uff09 7\u3001table table\u5c6c\u6027\u5b9a\u7fa9\u4e86\u5305\u542b\u7576\u524d\u6b04\u4f4d\u7684\u8868\u540d\u3002 8\u3001length length\u5c6c\u6027\u8868\u793a\u6b04\u4f4d\u7684\u9577\u5ea6\uff0c\u7576\u6b04\u4f4d\u7684\u578b\u5225\u70bavarchar\u6642\uff0c\u8a72\u5c6c\u6027\u624d\u6709\u6548\uff0c\u9810\u8a2d\u70ba255\u500b\u5b57\u5143\u3002 9\u3001precision\u548c10\u3001scale precision\u5c6c\u6027\u548cscale\u5c6c\u6027\u8868\u793a\u7cbe\u5ea6\uff0c\u7576\u6b04\u4f4d\u578b\u5225\u70badouble\u6642\uff0cprecision\u8868\u793a\u6578\u503c\u7684\u7e3d\u9577\u5ea6\uff0cscale\u8868\u793a\u5c0f\u6578\u9ede\u6240\u4f54\u7684\u4f4d\u6578\u3002 https://www.796t.com/content/1547656050.html @CreatedDate \u8cc7\u6599\u65b0\u589e\u6642\u6703\u81ea\u52d5\u5b58\u5165\u5275\u5efa\u6642\u9593 @CreatedBy \u5275\u5efa\u8005 @LastModifiedDate \u6700\u5f8c\u4fee\u6539\u6642\u9593 @LastModifiedBy \u6700\u5f8c\u4fee\u6539\u8005 https://hackmd.io/@winnienotes/ry-62tqZ9","title":"Spring Data JPA"},{"location":"spring-data-jpa/#jpa","text":"JPA(Java Persistence API) \u662f SUN \u91dd\u5c0d ORM \u6280\u8853\u63d0\u51fa\u7684\u898f\u7bc4\uff0c\u76ee\u7684\u70ba\u7c21\u5316\u6301\u4e45\u5316\u7684\u958b\u767c\u5de5\u4f5c\u4ee5\u53ca\u6574\u5408\u5404\u5bb6 ORM \u6280\u8853(Hibernate\u3001TopLink\u3001OpenJpa\u2026)\u3002","title":"JPA"},{"location":"spring-data-jpa/#spring-data-jpa","text":"Spring Data JPA \u662f Spring \u6839\u64da ORM \u6846\u67b6\u548c JPA \u898f\u7bc4\u800c\u5c01\u88dd\u7684 JPA \u61c9\u7528\u6846\u67b6\uff0c\u76ee\u7684\u662f\u964d\u4f4e\u5b58\u53d6\u8cc7\u6599\u5c64\u7684\u5de5\u4f5c\u91cf\uff0c\u8b93\u958b\u767c\u4eba\u54e1\u53ea\u9700\u5beb\u51fa repository \u7684\u4ecb\u9762\uff0c\u800c Spring \u81ea\u52d5\u5e6b\u4f60\u5be6\u4f5c\u5176\u529f\u80fd\u3002 \u4f9d\u8cf4 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <!--\u63a8\u85a6\u7528 lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> \u914d\u7f6e Datasource (\u4ee5\u55ae\u500b\u8cc7\u6599\u5eab\u70ba\u4f8b) spring: datasource: url: jdbc:mysql://172.31.93.122:3306/db username: user password: password driver-class-name: com.mysql.cj.jdbc.Driver jpa: hibernate: ddl-auto: update show-sql: false properties: hibernate: format_sql: true database-platform: org.hibernate.dialect.MySQL8Dialect \u5be6\u4f5c User \u8207 Todo\uff0c\u5169\u8005\u70ba\u4e00 (User) \u5c0d\u591a (Todo) \u7684\u95dc\u4fc2\u3002 @Data @Builder @Entity @Table public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) Integer id; @Column public String name; @Column(insertable = false, columnDefinition = \"int default 1\") Integer gender = 1; @Column public String password; @JsonManagedReference @OneToMany(cascade = CascadeType.ALL, mappedBy = \"user\") @EqualsAndHashCode.Exclude private Set<Todo> todos; } ** \u8a3b\u89e3\u8aaa\u660e @Data Equivalent to @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode. <> \u53c3\u8003\u8cc7\u6599: https://javabydeveloper.com/lombok-data-annotation/ @EqualsAndHashCode: \u6a19\u8a3b\u5728\u985e\u5225\u4e0a\uff0cLombok \u6703\u81ea\u52d5\u5be6\u4f5c equals(Object other) \u8207 hashCode()\u3002\u5be6\u4f5c\u8005\u5169\u8005\u7684\u65b9\u6cd5\u662f\u70ba\u4e86\u6bd4\u5c0d\u5169\u7269\u4ef6\u662f\u5426\u76f8\u7b49\u6642\uff0c\u4e14\u6bd4\u5c0d\u6642\u6bd4\u8f03\u6709\u6548\u7387\u3002 \u8b80\u8005\u53ef\u60f3\u6210\u81ea\u5df1\u5728\u901b\u66f8\u5e97\uff0c\u4e26\u900f\u904e\u66f8\u540d\u4f86\u627e\u66f8\u3002\u4e00\u822c\u4f86\u8aaa\uff0c\u66f8\u6ac3\u4e0a\u6703\u6a19\u793a\u90a3\u4e00\u5340\u7684\u66f8\u7c4d\u5206\u985e\u3002\u90a3\u9ebc\u900f\u904e\u66f8\u540d\u4f86\u6c7a\u5b9a\u8a72\u524d\u5f80\u54ea\u4e00\u5340\u5c0b\u627e\uff0c\u76f8\u7576\u65bc\u8a08\u7b97 hash code\u3001\u627e\u51fa bucket \u7684\u904e\u7a0b\u3002\u63a5\u8457\uff0c\u56e0\u70ba\u4e00\u500b\u5340\u57df\u4ecd\u6709\u8a31\u591a\u66f8\u7c4d\uff0c\u6240\u4ee5\u6211\u5011\u5f97\u4e00\u4e00\u6bd4\u5c0d\u5b83\u5011\u7684\u66f8\u540d\u3002\u5c31\u5982\u540c\u5728 bucket \u4e2d\uff0c\u547c\u53eb equals \u65b9\u6cd5\u6bd4\u5c0d key \u7684\u904e\u7a0b\u3002\u53c3\u8003\u81ea https://chikuwa-tech-study.blogspot.com/2022/01/java-equals-hashcode-hashmap.html @GeneratedValue(strategy = GenerationType.IDENTITY) \u4e3b\u9375\u7531\u8cc7\u6599\u5eab\u63a7\u5236\uff0c\u81ea\u52d5\u589e\u9577\u3002 @Column \u5f9e\u5b9a\u7fa9\u53ef\u4ee5\u770b\u51fa\uff0c@Column\u8a3b\u89e3\u4e00\u5171\u670910\u500b\u5c6c\u6027\uff0c\u901910\u500b\u5c6c\u6027\u5747\u70ba\u53ef\u9078\u5c6c\u6027\uff0c\u5404\u5c6c\u6027\u542b\u7fa9\u5206\u5225\u5982\u4e0b\uff1a 1\u3001name name\u5c6c\u6027\u5b9a\u7fa9\u4e86\u88ab\u6a19\u8a3b\u6b04\u4f4d\u5728\u8cc7\u6599\u5eab\u8868\u4e2d\u6240\u5c0d\u61c9\u6b04\u4f4d\u7684\u540d\u7a31\uff1b 2\u3001unique unique\u5c6c\u6027\u8868\u793a\u8a72\u6b04\u4f4d\u662f\u5426\u70ba\u552f\u4e00\u6a19\u8b58\uff0c\u9810\u8a2d\u70bafalse\u3002\u5982\u679c\u8868\u4e2d\u6709\u4e00\u500b\u6b04\u4f4d\u9700\u8981\u552f\u4e00\u6a19\u8b58\uff0c\u5247\u65e2\u53ef\u4ee5\u4f7f\u7528\u8a72\u6a19\u8a18\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528@Table\u6a19\u8a18\u4e2d\u7684@UniqueConstraint\u3002 3\u3001nullable nullable\u5c6c\u6027\u8868\u793a\u8a72\u6b04\u4f4d\u662f\u5426\u53ef\u4ee5\u70banull\u503c\uff0c\u9810\u8a2d\u70batrue\u3002 4\u3001insertable insertable\u5c6c\u6027\u8868\u793a\u5728\u4f7f\u7528\u201cINSERT\u201d\u6307\u4ee4\u78bc\u63d2\u5165\u8cc7\u6599\u6642\uff0c\u662f\u5426\u9700\u8981\u63d2\u5165\u8a72\u6b04\u4f4d\u7684\u503c\u3002 5\u3001updatable updatable\u5c6c\u6027\u8868\u793a\u5728\u4f7f\u7528\u201cUPDATE\u201d\u6307\u4ee4\u78bc\u63d2\u5165\u8cc7\u6599\u6642\uff0c\u662f\u5426\u9700\u8981\u66f4\u65b0\u8a72\u6b04\u4f4d\u7684\u503c\u3002insertable\u548cupdatable\u5c6c\u6027\u4e00\u822c\u591a\u7528\u65bc\u53ea\u8b80\u7684\u5c6c\u6027\uff0c\u4f8b\u5982\u4e3b\u9375\u548c\u5916\u4f86\u9375\u7b49\u3002\u9019\u4e9b\u6b04\u4f4d\u7684\u503c\u901a\u5e38\u662f\u81ea\u52d5\u751f\u6210\u7684\u3002 6\u3001columnDefinition columnDefinition\u5c6c\u6027\u8868\u793a\u5efa\u7acb\u8868\u6642\uff0c\u8a72\u6b04\u4f4d\u5efa\u7acb\u7684SQL\u8a9e\u53e5\uff0c\u4e00\u822c\u7528\u65bc\u901a\u904eEntity\u751f\u6210\u8868\u5b9a\u7fa9\u6642\u4f7f\u7528\u3002\uff08\u4e5f\u5c31\u662f\u8aaa\uff0c\u5982\u679cDB\u4e2d\u8868\u5df2\u7d93\u5efa\u597d\uff0c\u8a72\u5c6c\u6027\u6c92\u6709\u5fc5\u8981\u4f7f\u7528\u3002\uff09 7\u3001table table\u5c6c\u6027\u5b9a\u7fa9\u4e86\u5305\u542b\u7576\u524d\u6b04\u4f4d\u7684\u8868\u540d\u3002 8\u3001length length\u5c6c\u6027\u8868\u793a\u6b04\u4f4d\u7684\u9577\u5ea6\uff0c\u7576\u6b04\u4f4d\u7684\u578b\u5225\u70bavarchar\u6642\uff0c\u8a72\u5c6c\u6027\u624d\u6709\u6548\uff0c\u9810\u8a2d\u70ba255\u500b\u5b57\u5143\u3002 9\u3001precision\u548c10\u3001scale precision\u5c6c\u6027\u548cscale\u5c6c\u6027\u8868\u793a\u7cbe\u5ea6\uff0c\u7576\u6b04\u4f4d\u578b\u5225\u70badouble\u6642\uff0cprecision\u8868\u793a\u6578\u503c\u7684\u7e3d\u9577\u5ea6\uff0cscale\u8868\u793a\u5c0f\u6578\u9ede\u6240\u4f54\u7684\u4f4d\u6578\u3002 https://www.796t.com/content/1547656050.html @CreatedDate \u8cc7\u6599\u65b0\u589e\u6642\u6703\u81ea\u52d5\u5b58\u5165\u5275\u5efa\u6642\u9593 @CreatedBy \u5275\u5efa\u8005 @LastModifiedDate \u6700\u5f8c\u4fee\u6539\u6642\u9593 @LastModifiedBy \u6700\u5f8c\u4fee\u6539\u8005 https://hackmd.io/@winnienotes/ry-62tqZ9","title":"Spring Data JPA"},{"location":"spring-keycloak/","text":"\u5be6\u4f5c Securing Spring Boot 3.1.0 Applications with Spring Security and Keycloak 21 \u53c3\u8003\u8cc7\u6599\uff1a https://medium.com/@rickors560/securing-spring-boot-3-1-0-applications-with-spring-security-and-keycloak-21-e694c6f5617d \u53c3\u8003\u8cc7\u6599\uff1a https://hennge.com/tw/blog/what-is-openid-connect.html \u74b0\u5883\u6e96\u5099\uff1a 1. Spring Boot / Spring Security 3.1.2 2. JDK 17 3. Spring Boot Docker Compose 4. Docker (\u9032\u800c\u5b89\u88dd keycloak 22\u3001MySQL) pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.1.2</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>HelloSpringBoo2</artifactId> <version>0.0.1-SNAPSHOT</version> <name>HelloSpringBoo2</name> <description>Demo project for Spring Boot</description> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-oauth2-resource-server</artifactId> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-oauth2-jose</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-docker-compose</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> compose.yaml volumes: mysql_data: driver: local services: mysql: image: mysql volumes: - mysql_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: keycloak MYSQL_USER: keycloak MYSQL_PASSWORD: password ports: - 3306:3306 keycloak: image: quay.io/keycloak/keycloak:22.0.1 container_name: keycloak environment: - KEYCLOAK_ADMIN=admin - KEYCLOAK_ADMIN_PASSWORD=password - KC_DB=mysql - KC_DB_URL_HOST=mysql - KC_DB_URL_DATABASE=keycloak - KC_DB_USERNAME=keycloak - KC_DB_PASSWORD=password - KC_HEALTH_ENABLED=true ports: - \"9090:8080\" command: start-dev depends_on: - mysql # healthcheck: # test: \"curl -f http://localhost:9090/health/ready || exit 1\" adminer: image: adminer restart: always ports: - 8081:8080 Spring Security Config @Configuration @EnableWebSecurity @EnableMethodSecurity public class WebSecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.authorizeHttpRequests(registry -> registry // .requestMatchers(\"/secured/**\").hasRole(\"SYS_ADMIN\") // .requestMatchers(\"/secured/**\").permitAll() .anyRequest().authenticated()) .oauth2ResourceServer(oauth2Configurer -> oauth2Configurer .jwt(jwtConfigurer -> jwtConfigurer.jwtAuthenticationConverter(jwt -> { Map<String, Collection<String>> realmAccess = jwt.getClaim(\"realm_access\"); Collection<String> roles = realmAccess.get(\"roles\"); var grantedAuthorities = roles.stream() .map(role -> new SimpleGrantedAuthority(\"ROLE_\" + role)).toList(); return new JwtAuthenticationToken(jwt, grantedAuthorities); }))); return httpSecurity.build(); } } Controller \u53ef\u4ee5\u5728 Controller \u5c64\u4e2d\u52a0\u5165 @PreAuthorize\uff0c\u4ee3\u8868\u9700\u8981\u64c1\u6709 SYS_ADMIN \u89d2\u8272\u7684\u7528\u6236\uff0c\u624d\u80fd\u5920\u5b58\u53d6\u9019\u4e00\u500bController \u7684\u8cc7\u6e90\u3002 @PreAuthorize \u4e5f\u53ef\u4ee5\u653e\u5230 Controller \u5c64\u4e2d\u7684\u6bcf\u4e00\u500b Method \u4e2d\u3002\u4ee5\u505a\u66f4\u7d30\u9846\u7c92\u5ea6\u7684\u6388\u6b0a\u3002 @RequestMapping(\"/secured\") @RestController @PreAuthorize(\"hasRole('SYS_ADMIN')\") public class MySuperSecuredController { @GetMapping(\"/get-data\") public String get(){ return \"SUPER SECURED DATA\"; } } application.yaml server: port: 8080 spring: security: oauth2: resourceserver: jwt: issuer-uri: http://localhost:9090/realms/MyAppRealm jwk-set-uri: http://localhost:9090/realms/MyAppRealm/protocol/openid-connect/certs MyAppRealm\uff1a\u9700\u8981\u5728Keycloak\u4e2d\u65b0\u589e\u6b64Realm\u3002\u76f8\u95dc\u8a2d\u5b9a\u5982\u4e0b\u3002 Keycloak \u5728 Docker \u8207 \u8a2d\u5b9a Keycloak \u6253\u958b\u700f\u89bd\u5668\uff0c\u958b\u555f Keycloak \u767b\u5165\u9801\u9762 (http://localhost:9090) Realm \u8f38\u5165 Realm name\uff1aMyAppRealm Client Role\uff1aSYS_ADMIN User\uff1a\u5efa\u7acb\u4e00\u500b User\uff0c\u4e26\u4e14\u5c07\u89d2\u8272\u7d81\u5b9a\u9032\u53bb\u3002 Postman \u6e2c\u8a66 \u900f\u904e OpenID Connect \u53d6\u5f97 Token http://localhost:9090/realms/MyAppRealm/protocol/openid-connect/token \u5229\u7528\u525b\u525b\u53d6\u5f97\u7684Token\uff0c\u5b58\u53d6 Web API \u8cc7\u8a0a http://localhost:8080/secured/get-data \u5982\u679c\u8981\u767b\u51fa\u67d0\u4e00\u7528\u6236\u7684\u6240\u6709 Session http://localhost:9090/realms/master/protocol/openid-connect/token http://localhost:9090/admin/realms/MyAppRealm/users/3a9574f5-01ae-4caf-839c-f6d5ddb9321c/logout \u53c3\u8003 Hub https://github.com/aweit-zhu/HelloSpringBoo2","title":"Spring Boot 3 and Keycloak"},{"location":"spring-keycloak/#securing-spring-boot-310-applications-with-spring-security-and-keycloak-21","text":"\u53c3\u8003\u8cc7\u6599\uff1a https://medium.com/@rickors560/securing-spring-boot-3-1-0-applications-with-spring-security-and-keycloak-21-e694c6f5617d \u53c3\u8003\u8cc7\u6599\uff1a https://hennge.com/tw/blog/what-is-openid-connect.html \u74b0\u5883\u6e96\u5099\uff1a 1. Spring Boot / Spring Security 3.1.2 2. JDK 17 3. Spring Boot Docker Compose 4. Docker (\u9032\u800c\u5b89\u88dd keycloak 22\u3001MySQL)","title":"\u5be6\u4f5c Securing Spring Boot 3.1.0 Applications with Spring Security and Keycloak 21"},{"location":"spring-keycloak/#pomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>3.1.2</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>HelloSpringBoo2</artifactId> <version>0.0.1-SNAPSHOT</version> <name>HelloSpringBoo2</name> <description>Demo project for Spring Boot</description> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-oauth2-resource-server</artifactId> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-oauth2-jose</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-docker-compose</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"spring-keycloak/#composeyaml","text":"volumes: mysql_data: driver: local services: mysql: image: mysql volumes: - mysql_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: keycloak MYSQL_USER: keycloak MYSQL_PASSWORD: password ports: - 3306:3306 keycloak: image: quay.io/keycloak/keycloak:22.0.1 container_name: keycloak environment: - KEYCLOAK_ADMIN=admin - KEYCLOAK_ADMIN_PASSWORD=password - KC_DB=mysql - KC_DB_URL_HOST=mysql - KC_DB_URL_DATABASE=keycloak - KC_DB_USERNAME=keycloak - KC_DB_PASSWORD=password - KC_HEALTH_ENABLED=true ports: - \"9090:8080\" command: start-dev depends_on: - mysql # healthcheck: # test: \"curl -f http://localhost:9090/health/ready || exit 1\" adminer: image: adminer restart: always ports: - 8081:8080","title":"compose.yaml"},{"location":"spring-keycloak/#spring-security-config","text":"@Configuration @EnableWebSecurity @EnableMethodSecurity public class WebSecurityConfig { @Bean public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.authorizeHttpRequests(registry -> registry // .requestMatchers(\"/secured/**\").hasRole(\"SYS_ADMIN\") // .requestMatchers(\"/secured/**\").permitAll() .anyRequest().authenticated()) .oauth2ResourceServer(oauth2Configurer -> oauth2Configurer .jwt(jwtConfigurer -> jwtConfigurer.jwtAuthenticationConverter(jwt -> { Map<String, Collection<String>> realmAccess = jwt.getClaim(\"realm_access\"); Collection<String> roles = realmAccess.get(\"roles\"); var grantedAuthorities = roles.stream() .map(role -> new SimpleGrantedAuthority(\"ROLE_\" + role)).toList(); return new JwtAuthenticationToken(jwt, grantedAuthorities); }))); return httpSecurity.build(); } }","title":"Spring Security Config"},{"location":"spring-keycloak/#controller","text":"\u53ef\u4ee5\u5728 Controller \u5c64\u4e2d\u52a0\u5165 @PreAuthorize\uff0c\u4ee3\u8868\u9700\u8981\u64c1\u6709 SYS_ADMIN \u89d2\u8272\u7684\u7528\u6236\uff0c\u624d\u80fd\u5920\u5b58\u53d6\u9019\u4e00\u500bController \u7684\u8cc7\u6e90\u3002 @PreAuthorize \u4e5f\u53ef\u4ee5\u653e\u5230 Controller \u5c64\u4e2d\u7684\u6bcf\u4e00\u500b Method \u4e2d\u3002\u4ee5\u505a\u66f4\u7d30\u9846\u7c92\u5ea6\u7684\u6388\u6b0a\u3002 @RequestMapping(\"/secured\") @RestController @PreAuthorize(\"hasRole('SYS_ADMIN')\") public class MySuperSecuredController { @GetMapping(\"/get-data\") public String get(){ return \"SUPER SECURED DATA\"; } }","title":"Controller"},{"location":"spring-keycloak/#applicationyaml","text":"server: port: 8080 spring: security: oauth2: resourceserver: jwt: issuer-uri: http://localhost:9090/realms/MyAppRealm jwk-set-uri: http://localhost:9090/realms/MyAppRealm/protocol/openid-connect/certs MyAppRealm\uff1a\u9700\u8981\u5728Keycloak\u4e2d\u65b0\u589e\u6b64Realm\u3002\u76f8\u95dc\u8a2d\u5b9a\u5982\u4e0b\u3002","title":"application.yaml"},{"location":"spring-keycloak/#keycloak-docker-keycloak","text":"\u6253\u958b\u700f\u89bd\u5668\uff0c\u958b\u555f Keycloak \u767b\u5165\u9801\u9762 (http://localhost:9090) Realm \u8f38\u5165 Realm name\uff1aMyAppRealm Client Role\uff1aSYS_ADMIN User\uff1a\u5efa\u7acb\u4e00\u500b User\uff0c\u4e26\u4e14\u5c07\u89d2\u8272\u7d81\u5b9a\u9032\u53bb\u3002","title":"Keycloak \u5728 Docker \u8207 \u8a2d\u5b9a Keycloak"},{"location":"spring-keycloak/#postman","text":"\u900f\u904e OpenID Connect \u53d6\u5f97 Token http://localhost:9090/realms/MyAppRealm/protocol/openid-connect/token \u5229\u7528\u525b\u525b\u53d6\u5f97\u7684Token\uff0c\u5b58\u53d6 Web API \u8cc7\u8a0a http://localhost:8080/secured/get-data \u5982\u679c\u8981\u767b\u51fa\u67d0\u4e00\u7528\u6236\u7684\u6240\u6709 Session http://localhost:9090/realms/master/protocol/openid-connect/token http://localhost:9090/admin/realms/MyAppRealm/users/3a9574f5-01ae-4caf-839c-f6d5ddb9321c/logout","title":"Postman \u6e2c\u8a66"},{"location":"spring-keycloak/#hub","text":"https://github.com/aweit-zhu/HelloSpringBoo2","title":"\u53c3\u8003 Hub"},{"location":"spring-ldap/","text":"Spring Security & LDAP \u5b8c\u6574\u7a0b\u5f0f\u78bc\uff1a https://github.com/aweit-zhu/SpringSecurityLdap LDAP LDAP (Lightweight Directory Access Protocol, \u8f15\u578b\u76ee\u9304\u5b58\u53d6\u5354\u5b9a)\uff0c\u9664\u4e86\u6709 Windows \u7684 AD(Active Directory)\u5916\uff0c\u9084\u6709\u958b\u6e90\u7684 OpenLDAP\u3002 OpenLDAP \u53ef\u4ee5\u900f\u904e\u700f\u89bd\u5668\u76f4\u63a5\u7ba1\u7406 (phpLDAPadmin )\u3002 1.docker-compose.yaml services: openldap: image: osixia/openldap environment: - LDAP_ORGANISATION=Example Inc. - LDAP_DOMAIN=example.com - LDAP_ADMIN_PASSWORD=admin ports: - 389:389 volumes: - ./data/ldap:/var/lib/ldap - ./data/slapd:/etc/ldap/slapd.d phpldapadmin: image: osixia/phpldapadmin environment: - PHPLDAPADMIN_LDAP_HOSTS=openldap - PHPLDAPADMIN_HTTPS=false ports: - 8080:80 depends_on: - openldap \u7db2\u5740\uff1ahttp://localhost:8080/ \u5e33\u865f\uff1acn=admin,dc=example,dc=com \u5bc6\u78bc\uff1aadmin \u5efa\u7acb OU (Organisational Unit)\uff1agroups\u3001users\u3002 \u9ede\u9078 Organisational Unit \u8f38\u5165 users \u63a5\u8457\u91cd\u8907\u52d5\u4f5c\uff0c\u5efa\u7acb users\u3002 \u5efa\u7acb Generic: Posix Group\uff1aadmin\u3001user \u5728 ou=groups\u4e0a\uff0c\u5efa\u7acb\u5169\u500b\u89d2\u8272\uff1aadmin\u3001user \u5728 ou-users\u4e0a\uff0c\u5efa\u7acb Generic: User Account\uff1aweizhi GID Number = Group ID \u865f\u78bc\uff0c\u5c31\u662f\u525b\u525b\u5efa\u7acb\u7684 admin \u548c user \u7d81\u5b9a User Account \u81f3 Posix Group \u4e2d\uff0c\u8981\u7528 DN \u65b0\u589e\u3002 Spring Security and LDAP \u5efa\u7acb\u5177\u6709\u8a8d\u8b49\u8207\u6388\u6b0a\u7684Controller\uff0c\u5176\u4e2d /admin \u7684\u8def\u5f91\u9700\u8981\u6709 ADMIN \u6b0a\u9650\u3001/user \u7684\u8def\u5f91\u9700\u8981\u6709 USER \u6b0a\u9650\u3002 \u4f7f\u7528 Spring Security \u7684\u6a5f\u5236\uff0c\u4f46 User \u7684\u6574\u5408(\u5e33\u865f\u3001\u5bc6\u78bc\u3001\u6388\u6b0a) \u9700\u8981\u7531 LDAP\u63d0\u4f9b\u3002 pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.6.15</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>SpringSecurityLdap</artifactId> <version>0.0.1-SNAPSHOT</version> <name>SpringSecurityLdap</name> <description>Demo project for Spring Boot</description> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- Spring Security --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <!-- Spring LDAP --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-ldap</artifactId> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-ldap</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties ldap.url=ldap://localhost:389 ldap.username=cn=admin,dc=example,dc=com ldap.password=admin ldap.baseDn=dc=example,dc=com server.port=8091 LdapConfig.java import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.core.support.LdapContextSource; @Configuration public class LdapConfig { @Value(\"${ldap.url}\") private String ldapUrl; @Value(\"${ldap.username}\") private String ldapUsername; @Value(\"${ldap.password}\") private String ldapPassword; @Bean public LdapContextSource ldapContextSource() { LdapContextSource ldapContextSource = new LdapContextSource(); ldapContextSource.setUrl(ldapUrl); ldapContextSource.setUserDn(ldapUsername); ldapContextSource.setPassword(ldapPassword); return ldapContextSource; } @Bean public LdapTemplate ldapTemplate() { return new LdapTemplate(ldapContextSource()); } } SecurityConfig.java import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.core.support.LdapContextSource; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.ldap.authentication.BindAuthenticator; import org.springframework.security.ldap.authentication.LdapAuthenticationProvider; import org.springframework.security.ldap.authentication.LdapAuthenticator; import org.springframework.security.ldap.search.FilterBasedLdapUserSearch; import org.springframework.security.ldap.search.LdapUserSearch; import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator; import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator; import org.springframework.security.web.authentication.www.BasicAuthenticationFilter; import com.example.filter.LdapAuthoritiesFilter; import com.example.mapper.LdapUserDetailsMapper; @Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired LdapContextSource ldapContextSource; @Autowired LdapTemplate ldapTemplate; @Autowired LdapAuthoritiesFilter ldapAuthoriesFilter; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.authenticationProvider(ldapAuthenticationProvider()); } @Bean public AuthenticationProvider ldapAuthenticationProvider() { LdapAuthenticationProvider ldapAuthenticationProvider = new LdapAuthenticationProvider(ldapBindAuthenticator(), ldapAuthoritiesPopulator()); ldapAuthenticationProvider.setUserDetailsContextMapper(new LdapUserDetailsMapper()); return ldapAuthenticationProvider; } @Bean public LdapAuthenticator ldapBindAuthenticator() { BindAuthenticator bindAuthenticator = new BindAuthenticator(ldapContextSource); bindAuthenticator.setUserSearch(ldapUserSearch()); return bindAuthenticator; } @Bean public LdapAuthoritiesPopulator ldapAuthoritiesPopulator() { DefaultLdapAuthoritiesPopulator authoritiesPopulator = new DefaultLdapAuthoritiesPopulator(ldapContextSource, \"ou=groups,dc=example,dc=com\"); authoritiesPopulator.setGroupSearchFilter(\"memberUid={0}\"); return authoritiesPopulator; } @Bean public LdapUserSearch ldapUserSearch() { return new FilterBasedLdapUserSearch(\"ou=users,dc=example,dc=com\", \"(uid={0})\", ldapContextSource); } @Override protected void configure(HttpSecurity http) throws Exception { http. addFilterBefore(ldapAuthoriesFilter,BasicAuthenticationFilter.class).authorizeRequests() .antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\") .antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\") .anyRequest().authenticated() .and() .csrf().ignoringAntMatchers(\"/admin/user\") .and() .formLogin() .and() .logout(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } } 4.LdapUserDetailsMapper.java import java.nio.charset.StandardCharsets; import java.util.Collection; import org.springframework.ldap.core.DirContextAdapter; import org.springframework.ldap.core.DirContextOperations; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.ldap.userdetails.UserDetailsContextMapper; public class LdapUserDetailsMapper implements UserDetailsContextMapper { @Override public UserDetails mapUserFromContext(DirContextOperations ctx, String username, Collection<? extends GrantedAuthority> authorities) { String ldapUsername = ctx.getStringAttribute(\"uid\"); byte[] binaryData = (byte[]) ctx.getObjectAttribute(\"userPassword\"); String ldapPassword = new String(binaryData, StandardCharsets.UTF_8); return User.builder() .username(ldapUsername) .password(ldapPassword) .authorities(authorities) .build(); } @Override public void mapUserToContext(UserDetails user, DirContextAdapter ctx) { // Not implemented as this is not needed for authentication } } 5.LdapAuthoritiesFilter.java import java.io.IOException; import java.util.Collection; import java.util.HashSet; import java.util.Set; import javax.naming.NamingException; import javax.naming.directory.Attributes; import javax.naming.directory.SearchControls; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ldap.core.ContextMapper; import org.springframework.ldap.core.DirContextOperations; import org.springframework.ldap.core.LdapTemplate; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.User; import org.springframework.security.web.authentication.WebAuthenticationDetailsSource; import org.springframework.stereotype.Component; import org.springframework.web.filter.OncePerRequestFilter; @Component public class LdapAuthoritiesFilter extends OncePerRequestFilter { @Autowired LdapTemplate ldapTemplate; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); if (authentication != null && authentication.isAuthenticated() && authentication instanceof UsernamePasswordAuthenticationToken) { UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = (UsernamePasswordAuthenticationToken) authentication; if (usernamePasswordAuthenticationToken.getPrincipal() instanceof User) { User ldapUserDetails = (User) usernamePasswordAuthenticationToken.getPrincipal(); UsernamePasswordAuthenticationToken updatedAuthentication = new UsernamePasswordAuthenticationToken( ldapUserDetails, ldapUserDetails.getPassword(), retrieveLdapAuthorities(ldapUserDetails.getUsername())); updatedAuthentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); SecurityContextHolder.getContext().setAuthentication(updatedAuthentication); } } // Proceed with the filter chain filterChain.doFilter(request, response); } private Collection<? extends GrantedAuthority> retrieveLdapAuthorities(String username) { // Define the LDAP search filter to retrieve the authorities for the user String filter = \"(memberUid=cn=\" + username + \",ou=users,dc=example,dc=com)\"; // Set the search controls to limit the attributes returned SearchControls searchControls = new SearchControls(); searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE); searchControls.setReturningAttributes(new String[] { \"cn\" }); // Perform the LDAP search and retrieve the authorities Set<GrantedAuthority> authorities = new HashSet<>(); ldapTemplate.search(\"ou=groups,dc=example,dc=com\", filter, searchControls, (ContextMapper<Void>) ctx -> { Attributes attributes = ((DirContextOperations) ctx).getAttributes(); try { javax.naming.directory.Attribute memberOfAttribute = attributes.get(\"cn\"); if (memberOfAttribute != null) { for (int i = 0; i < memberOfAttribute.size(); i++) { String authority = (String) memberOfAttribute.get(i); authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + authority.toUpperCase())); } } } catch (NamingException e) { e.printStackTrace(); } return null; }); return authorities; } } \u5efa\u7acb Controller\uff1aAdmin\u3001Controller import java.security.NoSuchAlgorithmException; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.example.model.LdapUser; import com.example.service.LdapUserService; @RestController @RequestMapping(\"/admin\") public class AdminController { @Autowired LdapUserService ldapUserService; @GetMapping(\"\") public String admin() { return \"admin is here\"; } @PostMapping(\"/user\") public void createUser(@RequestBody LdapUser user) throws NoSuchAlgorithmException { ldapUserService.createUser(user); } } import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/user\") public class UserController { @GetMapping(\"\") public String index() { return \"Welcome to the User page!\"; } } \u5efa\u7acb Service import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.util.Base64; import javax.naming.Name; import javax.naming.directory.Attributes; import javax.naming.directory.Attribute; import javax.naming.directory.BasicAttribute; import javax.naming.directory.BasicAttributes; import javax.naming.directory.DirContext; import javax.naming.directory.ModificationItem; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.support.LdapUtils; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import com.example.model.LdapUser; @Service public class LdapUserService { @Autowired PasswordEncoder passwordEncoder; @Autowired LdapTemplate ldapTemplate; final Base64.Encoder encoder = Base64.getEncoder(); public void createUser(LdapUser user) throws NoSuchAlgorithmException { // Create user Attribute objectClass = new BasicAttribute(\"objectClass\"); objectClass.add(\"top\"); objectClass.add(\"person\"); objectClass.add(\"organizationalPerson\"); objectClass.add(\"inetOrgPerson\"); Attributes attributes = new BasicAttributes(); attributes.put(objectClass); attributes.put(\"cn\", user.getUsername()); attributes.put(\"sn\", user.getUsername()); attributes.put(\"userid\", user.getUsername()); attributes.put(\"userPassword\", \"{md5}\" + encodePassword(user.getPassword())); String dnStr = \"cn=\" + user.getUsername() + \",ou=users,dc=example,dc=com\"; Name dn = LdapUtils.newLdapName(dnStr); ldapTemplate.bind(dn, null, attributes); // Add role list to 'cn=users,ou=groups,dc=example,dc=com' Attribute memberUid = new BasicAttribute(\"memberUid\", dnStr); ModificationItem[] modificationItems = new ModificationItem[1]; modificationItems[0] = new ModificationItem(DirContext.ADD_ATTRIBUTE, memberUid); Name groupDn = LdapUtils.newLdapName(\"cn=user,ou=groups,dc=example,dc=com\"); ldapTemplate.modifyAttributes(groupDn, modificationItems); } private String encodePassword(String password) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest.getInstance(\"MD5\"); md.update(password.getBytes()); byte[] digest = md.digest(); String base64str = encoder.encodeToString(digest); return base64str; } } \u5efa\u7acb Model\uff1aLdapUser\u3001ErrorResponse import lombok.Builder; import lombok.Getter; import lombok.Setter; import lombok.ToString; @Getter @Setter @Builder @ToString public class LdapUser { private String username; private String password; } import lombok.Builder; import lombok.Getter; import lombok.Setter; @Getter @Setter @Builder public class ErrorResponse { private String message; private int status; private long timestamp; } \u5efa\u7acb\u5168\u57df\u6355\u6349\u4f8b\u5916 import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestControllerAdvice; import com.example.model.ErrorResponse; @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ErrorResponse handleCustomException(Exception ex) { return ErrorResponse.builder() .message(ex.getMessage()) .status(HttpStatus.INTERNAL_SERVER_ERROR.value()) .timestamp(System.currentTimeMillis()) .build(); } } \u6e2c\u8a66 \u5efa\u7acb User (\u8981\u5148\u53d6\u5f97Token\uff0c\u4e26\u4e14\u5c07 Token \u8907\u88fd\u5230 Postman \u4e2d) \u9810\u8a2d\u5e33\u865f\u53ea\u6709 User \u529f\u80fd\uff0c\u6240\u4ee5\u7528 yushu.wu \u6e2c\u8a66\u3002 \u8f38\u5165 http://localhost:8090/user \u6703\u8f49\u5740\u5230\u767b\u5165\u9801\u9762(\u8f38\u5165yushu.wu/123) \u6210\u529f\u5f8c\u5373\u6703\u770b\u5230\u6b63\u78ba\u8a0a\u606f 3.\u82e5\u63a5\u8457\u8f38\u5165 http://localhost:8090/admin\uff0c\u5247\u6703\u56e0\u70ba\u6b0a\u9650\u554f\u984c\u56de\u50b3403\u932f\u8aa4\u3002 \u88dc\u5145-\u5ba2\u88fd403\u932f\u8aa4\u9801\u9762 SecurityConfig.java import org.springframework.security.web.access.AccessDeniedHandler; import com.example.exception.CustomAccessDeniedHandler; ... @Override protected void configure(HttpSecurity http) throws Exception { http .addFilterBefore(ldapAuthoriesFilter,BasicAuthenticationFilter.class).authorizeRequests() .antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\") .antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\") .anyRequest().authenticated() .and() .csrf().ignoringAntMatchers(\"/admin/user\") .and() .formLogin() .and() .exceptionHandling().accessDeniedHandler(accessDeniedHandler()) .and() .logout(); } @Bean public AccessDeniedHandler accessDeniedHandler() { return new CustomAccessDeniedHandler(); } ... CustomAccessDeniedHandler.java import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.access.AccessDeniedException; import org.springframework.security.web.access.AccessDeniedHandler; import org.springframework.stereotype.Component; @Component public class CustomAccessDeniedHandler implements AccessDeniedHandler { @Override public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException { response.sendRedirect(\"/error-403\"); // Redirect to the custom error page } } HomeController.java import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HomeController { @RequestMapping(\"/error-403\") public String accessDenied() { return \"error/error-403\"; } } error-403.html (\u8def\u5f91\uff1a src/main/resources/application.properties ) <!DOCTYPE html> <html> <head> <title>403 Error - Access Denied</title> <style> body { font-family: Arial, sans-serif; background-color: #f8f8f8; } .container { max-width: 400px; margin: 0 auto; padding: 20px; background-color: #fff; border: 1px solid #ddd; border-radius: 5px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); } h1 { font-size: 24px; color: #333; margin-bottom: 20px; } p { font-size: 16px; color: #666; margin-bottom: 20px; } a { color: #007bff; text-decoration: none; } a:hover { text-decoration: underline; } </style> </head> <body> <div class=\"container\"> <h1>403 Error - Access Denied</h1> <p>You are not authorized to access this page.</p> <p>Please contact the administrator for assistance or go back to the <a href=\"/\">home page</a>.</p> </div> </body> </html>","title":"Spring Security & LDAP"},{"location":"spring-ldap/#spring-security-ldap","text":"\u5b8c\u6574\u7a0b\u5f0f\u78bc\uff1a https://github.com/aweit-zhu/SpringSecurityLdap","title":"Spring Security &amp; LDAP"},{"location":"spring-ldap/#ldap","text":"LDAP (Lightweight Directory Access Protocol, \u8f15\u578b\u76ee\u9304\u5b58\u53d6\u5354\u5b9a)\uff0c\u9664\u4e86\u6709 Windows \u7684 AD(Active Directory)\u5916\uff0c\u9084\u6709\u958b\u6e90\u7684 OpenLDAP\u3002 OpenLDAP \u53ef\u4ee5\u900f\u904e\u700f\u89bd\u5668\u76f4\u63a5\u7ba1\u7406 (phpLDAPadmin )\u3002 1.docker-compose.yaml services: openldap: image: osixia/openldap environment: - LDAP_ORGANISATION=Example Inc. - LDAP_DOMAIN=example.com - LDAP_ADMIN_PASSWORD=admin ports: - 389:389 volumes: - ./data/ldap:/var/lib/ldap - ./data/slapd:/etc/ldap/slapd.d phpldapadmin: image: osixia/phpldapadmin environment: - PHPLDAPADMIN_LDAP_HOSTS=openldap - PHPLDAPADMIN_HTTPS=false ports: - 8080:80 depends_on: - openldap \u7db2\u5740\uff1ahttp://localhost:8080/ \u5e33\u865f\uff1acn=admin,dc=example,dc=com \u5bc6\u78bc\uff1aadmin \u5efa\u7acb OU (Organisational Unit)\uff1agroups\u3001users\u3002 \u9ede\u9078 Organisational Unit \u8f38\u5165 users \u63a5\u8457\u91cd\u8907\u52d5\u4f5c\uff0c\u5efa\u7acb users\u3002 \u5efa\u7acb Generic: Posix Group\uff1aadmin\u3001user \u5728 ou=groups\u4e0a\uff0c\u5efa\u7acb\u5169\u500b\u89d2\u8272\uff1aadmin\u3001user \u5728 ou-users\u4e0a\uff0c\u5efa\u7acb Generic: User Account\uff1aweizhi GID Number = Group ID \u865f\u78bc\uff0c\u5c31\u662f\u525b\u525b\u5efa\u7acb\u7684 admin \u548c user \u7d81\u5b9a User Account \u81f3 Posix Group \u4e2d\uff0c\u8981\u7528 DN \u65b0\u589e\u3002","title":"LDAP"},{"location":"spring-ldap/#spring-security-and-ldap","text":"\u5efa\u7acb\u5177\u6709\u8a8d\u8b49\u8207\u6388\u6b0a\u7684Controller\uff0c\u5176\u4e2d /admin \u7684\u8def\u5f91\u9700\u8981\u6709 ADMIN \u6b0a\u9650\u3001/user \u7684\u8def\u5f91\u9700\u8981\u6709 USER \u6b0a\u9650\u3002 \u4f7f\u7528 Spring Security \u7684\u6a5f\u5236\uff0c\u4f46 User \u7684\u6574\u5408(\u5e33\u865f\u3001\u5bc6\u78bc\u3001\u6388\u6b0a) \u9700\u8981\u7531 LDAP\u63d0\u4f9b\u3002 pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.6.15</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>SpringSecurityLdap</artifactId> <version>0.0.1-SNAPSHOT</version> <name>SpringSecurityLdap</name> <description>Demo project for Spring Boot</description> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- Spring Security --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <!-- Spring LDAP --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-ldap</artifactId> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-ldap</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> </project> application.properties ldap.url=ldap://localhost:389 ldap.username=cn=admin,dc=example,dc=com ldap.password=admin ldap.baseDn=dc=example,dc=com server.port=8091 LdapConfig.java import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.core.support.LdapContextSource; @Configuration public class LdapConfig { @Value(\"${ldap.url}\") private String ldapUrl; @Value(\"${ldap.username}\") private String ldapUsername; @Value(\"${ldap.password}\") private String ldapPassword; @Bean public LdapContextSource ldapContextSource() { LdapContextSource ldapContextSource = new LdapContextSource(); ldapContextSource.setUrl(ldapUrl); ldapContextSource.setUserDn(ldapUsername); ldapContextSource.setPassword(ldapPassword); return ldapContextSource; } @Bean public LdapTemplate ldapTemplate() { return new LdapTemplate(ldapContextSource()); } } SecurityConfig.java import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.core.support.LdapContextSource; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.ldap.authentication.BindAuthenticator; import org.springframework.security.ldap.authentication.LdapAuthenticationProvider; import org.springframework.security.ldap.authentication.LdapAuthenticator; import org.springframework.security.ldap.search.FilterBasedLdapUserSearch; import org.springframework.security.ldap.search.LdapUserSearch; import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator; import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator; import org.springframework.security.web.authentication.www.BasicAuthenticationFilter; import com.example.filter.LdapAuthoritiesFilter; import com.example.mapper.LdapUserDetailsMapper; @Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired LdapContextSource ldapContextSource; @Autowired LdapTemplate ldapTemplate; @Autowired LdapAuthoritiesFilter ldapAuthoriesFilter; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.authenticationProvider(ldapAuthenticationProvider()); } @Bean public AuthenticationProvider ldapAuthenticationProvider() { LdapAuthenticationProvider ldapAuthenticationProvider = new LdapAuthenticationProvider(ldapBindAuthenticator(), ldapAuthoritiesPopulator()); ldapAuthenticationProvider.setUserDetailsContextMapper(new LdapUserDetailsMapper()); return ldapAuthenticationProvider; } @Bean public LdapAuthenticator ldapBindAuthenticator() { BindAuthenticator bindAuthenticator = new BindAuthenticator(ldapContextSource); bindAuthenticator.setUserSearch(ldapUserSearch()); return bindAuthenticator; } @Bean public LdapAuthoritiesPopulator ldapAuthoritiesPopulator() { DefaultLdapAuthoritiesPopulator authoritiesPopulator = new DefaultLdapAuthoritiesPopulator(ldapContextSource, \"ou=groups,dc=example,dc=com\"); authoritiesPopulator.setGroupSearchFilter(\"memberUid={0}\"); return authoritiesPopulator; } @Bean public LdapUserSearch ldapUserSearch() { return new FilterBasedLdapUserSearch(\"ou=users,dc=example,dc=com\", \"(uid={0})\", ldapContextSource); } @Override protected void configure(HttpSecurity http) throws Exception { http. addFilterBefore(ldapAuthoriesFilter,BasicAuthenticationFilter.class).authorizeRequests() .antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\") .antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\") .anyRequest().authenticated() .and() .csrf().ignoringAntMatchers(\"/admin/user\") .and() .formLogin() .and() .logout(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } } 4.LdapUserDetailsMapper.java import java.nio.charset.StandardCharsets; import java.util.Collection; import org.springframework.ldap.core.DirContextAdapter; import org.springframework.ldap.core.DirContextOperations; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.ldap.userdetails.UserDetailsContextMapper; public class LdapUserDetailsMapper implements UserDetailsContextMapper { @Override public UserDetails mapUserFromContext(DirContextOperations ctx, String username, Collection<? extends GrantedAuthority> authorities) { String ldapUsername = ctx.getStringAttribute(\"uid\"); byte[] binaryData = (byte[]) ctx.getObjectAttribute(\"userPassword\"); String ldapPassword = new String(binaryData, StandardCharsets.UTF_8); return User.builder() .username(ldapUsername) .password(ldapPassword) .authorities(authorities) .build(); } @Override public void mapUserToContext(UserDetails user, DirContextAdapter ctx) { // Not implemented as this is not needed for authentication } } 5.LdapAuthoritiesFilter.java import java.io.IOException; import java.util.Collection; import java.util.HashSet; import java.util.Set; import javax.naming.NamingException; import javax.naming.directory.Attributes; import javax.naming.directory.SearchControls; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ldap.core.ContextMapper; import org.springframework.ldap.core.DirContextOperations; import org.springframework.ldap.core.LdapTemplate; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.User; import org.springframework.security.web.authentication.WebAuthenticationDetailsSource; import org.springframework.stereotype.Component; import org.springframework.web.filter.OncePerRequestFilter; @Component public class LdapAuthoritiesFilter extends OncePerRequestFilter { @Autowired LdapTemplate ldapTemplate; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); if (authentication != null && authentication.isAuthenticated() && authentication instanceof UsernamePasswordAuthenticationToken) { UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = (UsernamePasswordAuthenticationToken) authentication; if (usernamePasswordAuthenticationToken.getPrincipal() instanceof User) { User ldapUserDetails = (User) usernamePasswordAuthenticationToken.getPrincipal(); UsernamePasswordAuthenticationToken updatedAuthentication = new UsernamePasswordAuthenticationToken( ldapUserDetails, ldapUserDetails.getPassword(), retrieveLdapAuthorities(ldapUserDetails.getUsername())); updatedAuthentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); SecurityContextHolder.getContext().setAuthentication(updatedAuthentication); } } // Proceed with the filter chain filterChain.doFilter(request, response); } private Collection<? extends GrantedAuthority> retrieveLdapAuthorities(String username) { // Define the LDAP search filter to retrieve the authorities for the user String filter = \"(memberUid=cn=\" + username + \",ou=users,dc=example,dc=com)\"; // Set the search controls to limit the attributes returned SearchControls searchControls = new SearchControls(); searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE); searchControls.setReturningAttributes(new String[] { \"cn\" }); // Perform the LDAP search and retrieve the authorities Set<GrantedAuthority> authorities = new HashSet<>(); ldapTemplate.search(\"ou=groups,dc=example,dc=com\", filter, searchControls, (ContextMapper<Void>) ctx -> { Attributes attributes = ((DirContextOperations) ctx).getAttributes(); try { javax.naming.directory.Attribute memberOfAttribute = attributes.get(\"cn\"); if (memberOfAttribute != null) { for (int i = 0; i < memberOfAttribute.size(); i++) { String authority = (String) memberOfAttribute.get(i); authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + authority.toUpperCase())); } } } catch (NamingException e) { e.printStackTrace(); } return null; }); return authorities; } } \u5efa\u7acb Controller\uff1aAdmin\u3001Controller import java.security.NoSuchAlgorithmException; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.example.model.LdapUser; import com.example.service.LdapUserService; @RestController @RequestMapping(\"/admin\") public class AdminController { @Autowired LdapUserService ldapUserService; @GetMapping(\"\") public String admin() { return \"admin is here\"; } @PostMapping(\"/user\") public void createUser(@RequestBody LdapUser user) throws NoSuchAlgorithmException { ldapUserService.createUser(user); } } import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/user\") public class UserController { @GetMapping(\"\") public String index() { return \"Welcome to the User page!\"; } } \u5efa\u7acb Service import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.util.Base64; import javax.naming.Name; import javax.naming.directory.Attributes; import javax.naming.directory.Attribute; import javax.naming.directory.BasicAttribute; import javax.naming.directory.BasicAttributes; import javax.naming.directory.DirContext; import javax.naming.directory.ModificationItem; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ldap.core.LdapTemplate; import org.springframework.ldap.support.LdapUtils; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import com.example.model.LdapUser; @Service public class LdapUserService { @Autowired PasswordEncoder passwordEncoder; @Autowired LdapTemplate ldapTemplate; final Base64.Encoder encoder = Base64.getEncoder(); public void createUser(LdapUser user) throws NoSuchAlgorithmException { // Create user Attribute objectClass = new BasicAttribute(\"objectClass\"); objectClass.add(\"top\"); objectClass.add(\"person\"); objectClass.add(\"organizationalPerson\"); objectClass.add(\"inetOrgPerson\"); Attributes attributes = new BasicAttributes(); attributes.put(objectClass); attributes.put(\"cn\", user.getUsername()); attributes.put(\"sn\", user.getUsername()); attributes.put(\"userid\", user.getUsername()); attributes.put(\"userPassword\", \"{md5}\" + encodePassword(user.getPassword())); String dnStr = \"cn=\" + user.getUsername() + \",ou=users,dc=example,dc=com\"; Name dn = LdapUtils.newLdapName(dnStr); ldapTemplate.bind(dn, null, attributes); // Add role list to 'cn=users,ou=groups,dc=example,dc=com' Attribute memberUid = new BasicAttribute(\"memberUid\", dnStr); ModificationItem[] modificationItems = new ModificationItem[1]; modificationItems[0] = new ModificationItem(DirContext.ADD_ATTRIBUTE, memberUid); Name groupDn = LdapUtils.newLdapName(\"cn=user,ou=groups,dc=example,dc=com\"); ldapTemplate.modifyAttributes(groupDn, modificationItems); } private String encodePassword(String password) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest.getInstance(\"MD5\"); md.update(password.getBytes()); byte[] digest = md.digest(); String base64str = encoder.encodeToString(digest); return base64str; } } \u5efa\u7acb Model\uff1aLdapUser\u3001ErrorResponse import lombok.Builder; import lombok.Getter; import lombok.Setter; import lombok.ToString; @Getter @Setter @Builder @ToString public class LdapUser { private String username; private String password; } import lombok.Builder; import lombok.Getter; import lombok.Setter; @Getter @Setter @Builder public class ErrorResponse { private String message; private int status; private long timestamp; } \u5efa\u7acb\u5168\u57df\u6355\u6349\u4f8b\u5916 import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestControllerAdvice; import com.example.model.ErrorResponse; @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ErrorResponse handleCustomException(Exception ex) { return ErrorResponse.builder() .message(ex.getMessage()) .status(HttpStatus.INTERNAL_SERVER_ERROR.value()) .timestamp(System.currentTimeMillis()) .build(); } }","title":"Spring Security and LDAP"},{"location":"spring-ldap/#_1","text":"\u5efa\u7acb User (\u8981\u5148\u53d6\u5f97Token\uff0c\u4e26\u4e14\u5c07 Token \u8907\u88fd\u5230 Postman \u4e2d) \u9810\u8a2d\u5e33\u865f\u53ea\u6709 User \u529f\u80fd\uff0c\u6240\u4ee5\u7528 yushu.wu \u6e2c\u8a66\u3002 \u8f38\u5165 http://localhost:8090/user \u6703\u8f49\u5740\u5230\u767b\u5165\u9801\u9762(\u8f38\u5165yushu.wu/123) \u6210\u529f\u5f8c\u5373\u6703\u770b\u5230\u6b63\u78ba\u8a0a\u606f 3.\u82e5\u63a5\u8457\u8f38\u5165 http://localhost:8090/admin\uff0c\u5247\u6703\u56e0\u70ba\u6b0a\u9650\u554f\u984c\u56de\u50b3403\u932f\u8aa4\u3002","title":"\u6e2c\u8a66"},{"location":"spring-ldap/#-403","text":"SecurityConfig.java import org.springframework.security.web.access.AccessDeniedHandler; import com.example.exception.CustomAccessDeniedHandler; ... @Override protected void configure(HttpSecurity http) throws Exception { http .addFilterBefore(ldapAuthoriesFilter,BasicAuthenticationFilter.class).authorizeRequests() .antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\") .antMatchers(\"/user/**\").hasAnyRole(\"ADMIN\", \"USER\") .anyRequest().authenticated() .and() .csrf().ignoringAntMatchers(\"/admin/user\") .and() .formLogin() .and() .exceptionHandling().accessDeniedHandler(accessDeniedHandler()) .and() .logout(); } @Bean public AccessDeniedHandler accessDeniedHandler() { return new CustomAccessDeniedHandler(); } ... CustomAccessDeniedHandler.java import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.access.AccessDeniedException; import org.springframework.security.web.access.AccessDeniedHandler; import org.springframework.stereotype.Component; @Component public class CustomAccessDeniedHandler implements AccessDeniedHandler { @Override public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException { response.sendRedirect(\"/error-403\"); // Redirect to the custom error page } } HomeController.java import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HomeController { @RequestMapping(\"/error-403\") public String accessDenied() { return \"error/error-403\"; } } error-403.html (\u8def\u5f91\uff1a src/main/resources/application.properties ) <!DOCTYPE html> <html> <head> <title>403 Error - Access Denied</title> <style> body { font-family: Arial, sans-serif; background-color: #f8f8f8; } .container { max-width: 400px; margin: 0 auto; padding: 20px; background-color: #fff; border: 1px solid #ddd; border-radius: 5px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); } h1 { font-size: 24px; color: #333; margin-bottom: 20px; } p { font-size: 16px; color: #666; margin-bottom: 20px; } a { color: #007bff; text-decoration: none; } a:hover { text-decoration: underline; } </style> </head> <body> <div class=\"container\"> <h1>403 Error - Access Denied</h1> <p>You are not authorized to access this page.</p> <p>Please contact the administrator for assistance or go back to the <a href=\"/\">home page</a>.</p> </div> </body> </html>","title":"\u88dc\u5145-\u5ba2\u88fd403\u932f\u8aa4\u9801\u9762"},{"location":"spring-security/","text":"(\u5be6\u4f5c)JWT Authentication and Authorization with Spring Boot 3 and Spring Security 6 + MySQL \u53c3\u8003\u8cc7\u6599\uff1a Bezkoder: https://www.bezkoder.com/spring-boot-security-jwt/ Truong Bui: https://medium.com/@truongbui95/jwt-authentication-and-authorization-with-spring-boot-3-and-spring-security-6-2f90f9337421 Aweit GitHub: https://github.com/aweit-zhu/DemoService New Project docker-compose.yaml \u8a2d\u5b9a version: '3.1' services: mysql: image: mysql:8.0 command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: db MYSQL_USER: user MYSQL_PASSWORD: password ports: - \"3306:3306\" volumes: - mysql-db:/var/lib/mysql adminer: image: adminer restart: always ports: - 8080:8080 volumes: mysql-db: docker-compose up -d \u958b\u555f http://localhost:8080/ \u5982\u679c\u4e0d\u559c\u6b61\u9019\u500b\u4ecb\u9762\uff0c\u53ef\u4ee5\u6539\u7528 MySQL Workbench application.yaml \u8a2d\u5b9a \u5148\u628a\u9810\u8a2d\u7684 properties \u6539\u6210 yaml \u6a94\u6848 applicaion.yaml spring: datasource: url: jdbc:mysql://172.31.93.122:3306/db username: user password: password driver-class-name: com.mysql.cj.jdbc.Driver jpa: hibernate: ddl-auto: update show-sql: true properties: hibernate: format_sql: true database-platform: org.hibernate.dialect.MySQL8Dialect # App Properties bezkoder: app: jwtCookieName: bezkoder jwtSecret: ======================BezKoder=Spring=========================== jwtExpirationMs: 86400000 pom.xml \u8a2d\u5b9a \u65b0\u589e JWT \u76f8\u95dc\u5957\u4ef6 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-api</artifactId> <version>0.11.5</version> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-impl</artifactId> <version>0.11.5</version> <scope>runtime</scope> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-jackson</artifactId> <version>0.11.5</version> <scope>runtime</scope> </dependency> \u5c08\u6848\u7d50\u69cb \u53c3\u8003\u7a0b\u5f0f DemoService https://github.com/aweit-zhu/DemoService \u89c0\u5ff5 ( https://www.bezkoder.com/spring-boot-security-jwt/ ) ( https://www.bezkoder.com/spring-boot-security-jwt/ ) ( https://www.bezkoder.com/spring-boot-security-jwt/ ) Postman \u6e2c\u8a66 \u8acb\u5c07 Spring Security.postman_collection.json \u6a94\u6848\uff0c\u532f\u5165\u81f3 Postman\u3002","title":"Spring Boot 3 and Spring Security 6 (JWT Authentication and Authorization)"},{"location":"spring-security/#jwt-authentication-and-authorization-with-spring-boot-3-and-spring-security-6-mysql","text":"\u53c3\u8003\u8cc7\u6599\uff1a Bezkoder: https://www.bezkoder.com/spring-boot-security-jwt/ Truong Bui: https://medium.com/@truongbui95/jwt-authentication-and-authorization-with-spring-boot-3-and-spring-security-6-2f90f9337421 Aweit GitHub: https://github.com/aweit-zhu/DemoService","title":"(\u5be6\u4f5c)JWT Authentication and Authorization with Spring Boot 3 and Spring Security 6 + MySQL"},{"location":"spring-security/#new-project","text":"","title":"New Project"},{"location":"spring-security/#docker-composeyaml","text":"version: '3.1' services: mysql: image: mysql:8.0 command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: db MYSQL_USER: user MYSQL_PASSWORD: password ports: - \"3306:3306\" volumes: - mysql-db:/var/lib/mysql adminer: image: adminer restart: always ports: - 8080:8080 volumes: mysql-db: docker-compose up -d \u958b\u555f http://localhost:8080/ \u5982\u679c\u4e0d\u559c\u6b61\u9019\u500b\u4ecb\u9762\uff0c\u53ef\u4ee5\u6539\u7528 MySQL Workbench","title":"docker-compose.yaml \u8a2d\u5b9a"},{"location":"spring-security/#applicationyaml","text":"\u5148\u628a\u9810\u8a2d\u7684 properties \u6539\u6210 yaml \u6a94\u6848 applicaion.yaml spring: datasource: url: jdbc:mysql://172.31.93.122:3306/db username: user password: password driver-class-name: com.mysql.cj.jdbc.Driver jpa: hibernate: ddl-auto: update show-sql: true properties: hibernate: format_sql: true database-platform: org.hibernate.dialect.MySQL8Dialect # App Properties bezkoder: app: jwtCookieName: bezkoder jwtSecret: ======================BezKoder=Spring=========================== jwtExpirationMs: 86400000","title":"application.yaml \u8a2d\u5b9a"},{"location":"spring-security/#pomxml","text":"\u65b0\u589e JWT \u76f8\u95dc\u5957\u4ef6 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-api</artifactId> <version>0.11.5</version> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-impl</artifactId> <version>0.11.5</version> <scope>runtime</scope> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt-jackson</artifactId> <version>0.11.5</version> <scope>runtime</scope> </dependency>","title":"pom.xml \u8a2d\u5b9a"},{"location":"spring-security/#_1","text":"","title":"\u5c08\u6848\u7d50\u69cb"},{"location":"spring-security/#_2","text":"DemoService https://github.com/aweit-zhu/DemoService","title":"\u53c3\u8003\u7a0b\u5f0f"},{"location":"spring-security/#_3","text":"( https://www.bezkoder.com/spring-boot-security-jwt/ ) ( https://www.bezkoder.com/spring-boot-security-jwt/ ) ( https://www.bezkoder.com/spring-boot-security-jwt/ )","title":"\u89c0\u5ff5"},{"location":"spring-security/#postman","text":"\u8acb\u5c07 Spring Security.postman_collection.json \u6a94\u6848\uff0c\u532f\u5165\u81f3 Postman\u3002","title":"Postman \u6e2c\u8a66"},{"location":"ssh/","text":"SSH (Struts2 + Spring5 + Hibernate4) SSH \u8aaa\u660e \u9019\u4e9b\u662f\u4e00\u7d44\u6846\u67b6\u7684\u7d44\u5408\uff0c\u4e5f\u662f\u76ee\u524d\u6700\u70ba\u6d41\u884c\u7684 Java Web \u958b\u767c\u67b6\u69cb\u3002\u6bcf\u500b\u6846\u67b6\u90fd\u5404\u53f8\u5176\u8077\uff0c\u4e5f\u90fd\u6709\u5176\u4e3b\u8981\u76ee\u7684\u3002\u800c\u8cc7\u901a\u7684 Java \u76f8\u95dc\u6848\u5b50\u4e5f\u90fd\u662f\u63a1\u7528\u9019\u6a23\u7684\u67b6\u69cb\u505a\u958b\u767c\u3002 Struts \u4e3b\u8981\u5728\u662f\u4f5c\u70ba MVC\uff08Model-Viewer-Controller\uff09\u7684\u5be6\u73fe\uff0c\u5c07\u9801\u9762\u7684\u5448\u73fe\u53ca\u6d41\u7a0b\u8207\u5546\u696d\u908f\u8f2f\u5207\u5206\u3002\u7136\u800c\uff0c\u8207\u5176\u8aaa\u5207\u5206\u4e0d\u5982\u89e3\u91cb\u70ba\u964d\u4f4e\u6bcf\u500b\u74b0\u7bc0\u7684\u85d5\u5408\u6027\u3002\u540c\u6642\u505a\u4e86\u958b\u767c\u5206\u5de5\uff0c\u7db2\u9801\u8a2d\u8a08\u8457\u91cd\u5728 UI\uff0fUX \u7684\u8a2d\u8a08\uff0c\u5546\u696d\u908f\u8f2f\u4ea4\u7d66\u5f8c\u7aef Business Layer \u53bb\u8ca0\u8cac\uff0c\u5728\u964d\u4f4e\u6bcf\u500b\u74b0\u7bc0\u7684\u85d5\u5408\u6027\u7684\u540c\u6642\uff0c\u4e5f\u5c07\u6bcf\u4e00\u968e\u5c64\u90fd\u505a\u4e86\u5f88\u5b8c\u6574\u7684\u5b9a\u7fa9\u3002\u524d\u7aef\u4f7f\u7528 HTML \u6216 Tag \u8207\u76f8\u5c0d\u4e5f\u6e1b\u4f4e\u7684\u524d\u7aef\u9801\u9762\u66b4\u9732\u5728\u5916\u7684\u8cc7\u5b89\u554f\u984c\u8af8\u5982 SQL injection\u3001Cross-site Script\uff0c\u7531\u5de5\u7a0b\u5e2b\u8a2d\u8a08\u51fa\u4f86\u7684\u9801\u9762\u4e5f\u4e0d\u6703\u6bcf\u6b21\u90fd\u88ab\u4f7f\u7528\u8005\u5acc\u68c4\u7f8e\u611f\u4e0d\u8db3\u4e86\u3002 Spring \u5ef6\u7e8c\u4e86 MVC \u67b6\u69cb\u4e2d\u7684 Model \u90e8\u5206\uff0c\u5e7e\u500b\u4e3b\u8981\u7279\u8272\uff0c\u4f9d\u8cf4\u6ce8\u5165\uff08DI\uff09\u3001\u53cd\u8f49\u63a7\u5236\uff08IoC\uff09\u548c AOP\uff08Aspect Oriented Programming\uff09\u3002IoC \u9019\u88e1\u7684\u57fa\u790e\u6982\u5ff5\u662f BeanFactory\uff0c\u5b83\u63d0\u4f9b\u5c0d Factory \u6a21\u5f0f\u7684\u7d93\u5178\u5be6\u73fe\u4f86\u6d88\u9664\u5c0d\u7a0b\u5e8f\u6027\u55ae\u4f8b\u6a21\u5f0f\uff08Singleton\uff09\u7684\u9700\u8981\uff0c\u4e26\u771f\u6b63\u5730\u5141\u8a31\u4f60\u5f9e\u7a0b\u5e8f\u908f\u8f2f\u4e2d\u5206\u96e2\u51fa\u4f9d\u8cf4\u95dc\u4fc2\u548c\u914d\u7f6e\u3002\u7576\u7136\u82e5\u80fd\u914d\u5408\u5176\u4ed6 Design Pattern \u4f7f\u7528\u66f4\u53ef\u770b\u51fa\u67b6\u69cb\u7684\u5b8c\u6574\u6027\uff0cAOP \u4e2d\u61c9\u7528\u5230\u7684\u662f\u8cc7\u6599\u5eab\u7684 Transaction \u63a7\u7ba1\uff0c\u5b83\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u53bb\u5beb\u5230 Transaction \u76f8\u95dc\u7684 code\uff0c\u53ea\u8981\u5b9a\u7fa9\u597d\u54ea\u4e9b code \u9700\u8981\u52a0\u4e0a Transaction \u7684\u63a7\u5236\u5373\u53ef\u3002 Hibernate ORM \uff08Oriented-Relational Mapping\uff09\u63d0\u4f9b\u4e86\u5e38\u7528\u7684\u300c\u5c0d\u8c61\uff0f\u95dc\u4fc2\u300d\u6620\u5c04 APIs \u7684\u96c6\u6210\u5c64\u3002 \u5176\u4e2d\u5305\u62ec JPA\u3001JDO\u3001iBatis \u548c Hibernate \u3002\u5229\u7528 ORM package\uff0c\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u6240\u6709 Spring \u63d0\u4f9b\u7684\u7279\u6027\u9032\u884c\u300c\u5c0d\u8c61\uff0f\u95dc\u4fc2\u300d\u6620\u5c04\u3002 (\u53c3\u8003\u4f86\u6e90\uff1a https://marketing.ares.com.tw/newsletter/2015-08-outsourcing/ssh ) \u53cd\u8f49\u63a7\u5236\uff08IoC\uff09 (\u53c3\u8003\u8cc7\u6599\uff1a) AOP\uff08Aspect Oriented Programming\uff09\uff1a\u5256\u9762\u5c0e\u5411\u7a0b\u5f0f\u8a2d\u8a08 (\u53c3\u8003\u8cc7\u6599\uff1a https://ithelp.ithome.com.tw/articles/10229664 ) GitHub \u5b8c\u6574\u4ee3\u78bc\uff1a https://github.com/aweit-zhu/Struts2Beginner \u4f7f\u7528\u74b0\u5883 Struts 2.3.8 Struts JSON Plugin 2.3.8 Struts Convention Plugin 2.3.8 Struts Spring Plugin 2.3.8 Spring Core 5.3.29 Spring Context 5.3.29 Spring Web MVC 5.3.29 Spring Web 5.3.29 Spring Beans 5.3.29 Spring Context Support 5.1.5.RELEASE Spring Security Core 5.1.4.RELEASE Spring Security Taglibs 5.1.4.RELEASE Spring Security Web 5.1.4.RELEASE Spring Security Config 5.1.4.RELEASE Hibernate Core 5.4.32.Final MySQL Connector/J 8.0.25 pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>Struts2Beginner</groupId> <artifactId>Struts2Beginner</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <dependencies> <!-- lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.20</version> <scope>provided</scope> </dependency> <!-- Servlet --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <!-- Struts 2 --> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-json-plugin</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-convention-plugin</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-convention-plugin</artifactId> <version>2.3.8</version> <exclusions> <exclusion> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-spring-plugin</artifactId> <version>2.3.8</version> </dependency> <!-- Spring dependencies --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context-support</artifactId> <version>5.1.5.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-core</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-taglibs</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-web</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-config</artifactId> <version>5.1.4.RELEASE</version> </dependency> <!-- Hibernate --> <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-core</artifactId> <version>5.4.32.Final</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> </dependencies> <build> <resources> <resource> <directory>src/main/</directory> <excludes> <exclude>**/*.java</exclude> </excludes> </resource> </resources> <plugins> <plugin> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <release>17</release> </configuration> </plugin> <plugin> <artifactId>maven-war-plugin</artifactId> <version>3.2.3</version> </plugin> </plugins> <finalName>Struts2Beginner</finalName> </build> </project> \u914d\u7f6e MySQL version: '3.8' services: mysql: image: mysql:5 container_name: mysql restart: always environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: cookbook MYSQL_USER: admin MYSQL_PASSWORD: password ports: - 3306:3306 volumes: - ./data:/var/lib/mysql phpmyadmin: image: phpmyadmin/phpmyadmin container_name: phpmyadmin restart: always environment: PMA_HOST: mysql PMA_PORT: 3306 MYSQL_ROOT_PASSWORD: password ports: - 8989:80 depends_on: - mysql \u4e09\u500b\u914d\u7f6e\u6a94 struts.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\"> <struts> <constant name=\"struts.action.excludePattern\" value=\"/spring/.*\" /> <constant name=\"struts.objectFactory\" value=\"spring\" /> <constant name=\"struts.objectFactory.spring.autoWireAlways\" value=\"true\" /> <constant name=\"struts.objectFactory.spring.autoWire\" value=\"name\" /> <constant name=\"struts.objectFactory.spring.useClassCache\" value=\"true\" /> <package name=\"Struts2Beginner\" namespace=\"/admin\" extends=\"struts-default\"> <action name=\"index\"> <result>/WEB-INF/jsp/calculate/input.jsp</result> </action> </package> </struts> (1) struts.action.excludePattern\uff1a\u54ea\u4e9b\u8def\u7531\u4e0d\u8981\u900f\u904e Struts\u3002\u5982\u679c\u6709\u4e9b\u8def\u7531\u8981\u8d70 Spring Controller \u5247\u53ef\u4ee5\u5229\u7528\u9019\u500b\u65b9\u5f0f\u8a2d\u5b9a\u3002 (2) struts.objectFactory\uff1a\u5982\u679c\u70ba Spirng\uff0c\u4ee3\u8868\u53ef\u4ee5\u4f7f\u7528 Spring \u7684 DI \u548c IoC\u7684\u529f\u80fd\u3002 (3) struts.objectFactory.spring.autoWire\uff1a\u5982\u679c Bean \u5b9a\u7fa9\u7684 Name \u70ba abc\uff0c\u5247\u6709\u8981\u6ce8\u5165\u7684\u5176\u4ed6Bean\u7684 property \u7684\u540d\u7a31\u4e5f\u8981\u70ba abc\uff0c\u5247\u6703\u81ea\u52d5\u6ce8\u5165\u3002 applicationContext.xml <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"> <bean id=\"springController\" class=\"com.example.spring.controller.SpringController\"> <property name=\"helloService\" ref=\"helloService\" /> </bean> <bean id=\"helloService\" class=\"com.example.spring.service.HelloService\"/> </beans> In the context of the provided XML code, the \"applicationContext.xml\" file is not explicitly mentioned. However, based on the configuration settings in the Struts XML file, it is likely that the Spring object factory is being used to manage objects and dependencies in the Struts application. In a typical setup, the \"applicationContext.xml\" file would be responsible for defining the Spring beans, specifying their dependencies, and configuring other aspects of the Spring application context. It might include components such as data sources, transaction managers, service beans, and more. hibernate.cfg.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\"> <hibernate-configuration> <session-factory> <property name=\"hibernate.dialect\">org.hibernate.dialect.MySQL8Dialect</property> <property name=\"hibernate.connection.driver_class\">com.mysql.cj.jdbc.Driver</property> <property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/cookbook</property> <property name=\"hibernate.connection.username\">admin</property> <property name=\"hibernate.connection.password\">password</property> <property name=\"hibernate.show_sql\">true</property> <property name=\"hibernate.hbm2ddl.auto\">update</property> <mapping class = \"com.example.hibernate.entity.Post\" /> <mapping class = \"com.example.hibernate.entity.Comment\" /> </session-factory> </hibernate-configuration> (1) property\uff1a\u8a2d\u5b9a\u9023\u7dda\u8cc7\u8a0a (2) mapping\uff1a\u53ea\u8981\u6709\u4e00\u500b\u7269\u4ef6\u9700\u8981\u8207\u8868\u683c\u505a\u95dc\u806f\uff0c\u90fd\u8981\u5728\u9019\u908a\u5b9a\u7fa9\u3002 \u914d\u7f6e Spirng Secutiry import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.transaction.annotation.EnableTransactionManagement; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.CorsConfigurationSource; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; @Configuration @ComponentScan(\"com.example\") @EnableTransactionManagement @EnableWebSecurity public class AppConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity httpSecurity) throws Exception { httpSecurity.cors().and().csrf().disable(); httpSecurity.authorizeRequests() .antMatchers(\"/superadmin/**\").access(\"hasRole('ROLE_SUPER_ADMIN')\") .antMatchers(\"/admin/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN')\") .antMatchers(\"/employee/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN') or hasRole('ROLE_EMPLOYEE')\") .antMatchers(\"/spring/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN')\") .and() .httpBasic() .and() .logout() .and() .exceptionHandling(); } @Bean public CorsConfigurationSource corsConfigurationSource() { UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\"/**\", new CorsConfiguration().applyPermitDefaultValues()); return source; } @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"superadmin\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_SUPER_ADMIN\", \"ROLE_ADMIN\", \"ROLE_EMPLOYEE\") .and() .withUser(\"admin\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_ADMIN\", \"ROLE_EMPLOYEE\") .and() .withUser(\"employee\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_EMPLOYEE\"); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } Action + Service HelloAction import org.apache.struts2.convention.annotation.Action; import org.apache.struts2.convention.annotation.Namespace; import org.apache.struts2.convention.annotation.Result; import org.apache.struts2.convention.annotation.Results; import org.springframework.beans.factory.annotation.Autowired; import com.example.spring.service.HelloService; import com.opensymphony.xwork2.ActionSupport; @Namespace(\"/\") @Results(value = { @Result(name = \"hello\", location = \"/WEB-INF/jsp/hello.jsp\") , @Result(name = \"goodbye\", location = \"/WEB-INF/jsp/goodbye.jsp\") }) public class HelloAction extends ActionSupport { @Autowired HelloService helloService; @Action(value = \"hello\") public String hello() { System.out.println(helloService.getHello()); return \"hello\"; } @Action(value = \"goodbye\") public String goodbye() { return \"goodbye\"; } } HelloService import org.springframework.stereotype.Service; @Service public class HelloService { public String getHello() { return \"service, hello\"; } } hello.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> Hello goobye.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> GoodBye Struts \u6574\u5408 DAO HibernateUtil import org.hibernate.SessionFactory; import org.hibernate.cfg.Configuration; public class HibernateUtil { private static final SessionFactory sessionFactory; static { try { sessionFactory = new Configuration().configure().buildSessionFactory(); } catch (Throwable ex) { System.err.println(\"Initial SessionFactory creation failed.\" + ex); throw new ExceptionInInitializerError(ex); } } public static SessionFactory getSessionFactory() { return sessionFactory; } } Post import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Data; import lombok.ToString; @Entity @Table(name = \"posts\") @Data @ToString(exclude = \"comments\") public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @Column private String title; @Column private String content; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL, fetch = FetchType.EAGER) private List<Comment> comments = new ArrayList<>(); } Comment import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Data; import lombok.ToString; @Entity @Table(name = \"comments\") @Data @ToString(exclude = \"post\") public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String content; @ManyToOne @JoinColumn(name = \"post_id\") private Post post; } PostDao import java.util.List; import org.hibernate.Session; import org.hibernate.Transaction; import org.springframework.stereotype.Service; import com.example.hibernate.HibernateUtil; import com.example.hibernate.entity.Post; @Service public class PostDao { public void save(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.save(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void update(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.update(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void delete(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.delete(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public Post getById(int id) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.get(Post.class, id); } catch (Exception e) { e.printStackTrace(); return null; } } public List<Post> getAll() { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.createQuery(\"FROM Post\", Post.class).getResultList(); } catch (Exception e) { e.printStackTrace(); return null; } } } CommentDao import java.util.List; import org.hibernate.Session; import org.hibernate.Transaction; import org.hibernate.query.Query; import org.springframework.stereotype.Service; import com.example.hibernate.HibernateUtil; import com.example.hibernate.entity.Comment; import com.example.hibernate.entity.Post; @Service public class CommentDao { public void saveComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.save(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public Comment getCommentById(Long commentId) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.get(Comment.class, commentId); } catch (Exception e) { e.printStackTrace(); return null; } } public List<Comment> getCommentsByPost(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Query<Comment> query = session.createQuery(\"FROM Comment WHERE post = :post\", Comment.class); query.setParameter(\"post\", post); return query.list(); } catch (Exception e) { e.printStackTrace(); return null; } } public void updateComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.update(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void deleteComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.delete(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } } PostAction import java.util.List; import org.apache.struts2.convention.annotation.Action; import org.apache.struts2.convention.annotation.Namespace; import org.apache.struts2.convention.annotation.Result; import org.apache.struts2.convention.annotation.Results; import org.springframework.beans.factory.annotation.Autowired; import com.example.hibernate.dao.CommentDao; import com.example.hibernate.dao.PostDao; import com.example.hibernate.entity.Comment; import com.example.hibernate.entity.Post; import com.opensymphony.xwork2.ActionSupport; import lombok.Data; @Namespace(\"/admin\") @Results({ @Result(name = \"success\", location = \"/list-posts.jsp\"), @Result(name = \"error\", location = \"/error.jsp\") }) @Data public class PostAction extends ActionSupport { @Autowired PostDao postDao; @Autowired CommentDao commentDao; private int id; private String title; private String content; private List<Post> posts; @Action(value = \"/create-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String create() { Post post = new Post(); post.setTitle(title); post.setContent(content); postDao.save(post); Comment comment = new Comment(); comment.setContent(\"Test Comment\"); addCommentToPost(post.getId(),comment); return SUCCESS; } public void addCommentToPost(int postId, Comment comment) { Post post = postDao.getById(postId); if (post != null) { comment.setPost(post); commentDao.saveComment(comment); } } @Action(value = \"/update-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String update() { Post post = postDao.getById(id); if (post != null) { post.setTitle(title); post.setContent(content); postDao.update(post); } else { return ERROR; } return SUCCESS; } @Action(value = \"/delete-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String delete() { Post post = postDao.getById(id); if (post != null) { postDao.delete(post); } else { return ERROR; } return SUCCESS; } @Action(value = \"/view-post\", results = { @Result(name = \"success\", location = \"/view-post.jsp\") }) public String view() { Post post = postDao.getById(id); if (post != null) { title = post.getTitle(); content = post.getContent(); List<Comment> comments = commentDao.getCommentsByPost(post); System.out.println(comments); } else { return ERROR; } return SUCCESS; } @Action(value = \"/list-posts\", results = { @Result(name = \"success\", location = \"/list-posts.jsp\") }) public String list() { posts = postDao.getAll(); return SUCCESS; } } \u76f8\u95dcJSP list-post.jsp <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %> <%@ taglib prefix=\"s\" uri=\"/struts-tags\" %> <!DOCTYPE html> <html> <head> <title>List of Posts</title> </head> <body> <h1>List of Posts</h1> <table> <tr> <th>ID</th> <th>Title</th> <th>Content</th> <th>Action</th> </tr> <s:iterator value=\"posts\"> <tr> <td><s:property value=\"id\" /></td> <td><s:property value=\"title\" /></td> <td><s:property value=\"content\" /></td> <td> <a href=\"<s:url action='view-post'><s:param name='id' value='%{id}' /></s:url>\">View</a> <a href=\"<s:url action='delete-post'><s:param name='id' value='%{id}' /></s:url>\">Delete</a> </td> </tr> </s:iterator> </table> <h2>Create New Post</h2> <form action=\"<s:url action='create-post' />\" method=\"POST\"> <label for=\"title\">Title:</label> <input type=\"text\" name=\"title\" id=\"title\" required /><br> <label for=\"content\">Content:</label> <textarea name=\"content\" id=\"content\" required></textarea><br> <input type=\"submit\" value=\"Create\" /> </form> </body> </html> view-posts.jsp <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %> <%@ taglib prefix=\"s\" uri=\"/struts-tags\" %> <!DOCTYPE html> <html> <head> <title>View Post</title> </head> <body> <h1>View Post</h1> <table> <tr> <th>ID</th> <th>Title</th> <th>Content</th> </tr> <tr> <td><s:property value=\"id\" /></td> <td><s:property value=\"title\" /></td> <td><s:property value=\"content\" /></td> </tr> </table> <h2>Edit Post</h2> <form action=\"<s:url action='update-post' />\" method=\"POST\"> <input type=\"hidden\" name=\"id\" value=\"<s:property value='id' />\" /> <label for=\"title\">Title:</label> <input type=\"text\" name=\"title\" id=\"title\" value=\"<s:property value='title' />\" required /><br> <label for=\"content\">Content:</label> <textarea name=\"content\" id=\"content\" required><s:property value='content' /></textarea><br> <input type=\"submit\" value=\"Update\" /> </form> </body> </html> Test \u6253\u958b\u700f\u89bd\u5668\uff1ahttp://localhost:8080/Struts2Beginner/admin/list-posts \u5f48\u51fa\u767b\u5165\u8996\u7a97\uff0c\u8868\u793aSpring Security \u662f\u6b63\u78ba\u7684\u3002 \u8f38\u5165\u6b63\u78ba\u5e33\u5bc6\u5f8c(admin/123456)\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u756b\u9762\u3002 \u5c0d\u7167\u4e00\u4e0b\u8cc7\u6599\u5eab\u7684\u8cc7\u6599\uff0c\u6bd4\u5c0d\u662f\u5426\u4e00\u81f4\u3002","title":"SSH (Struts2 + Spring5 + Hibernate4)"},{"location":"ssh/#ssh-struts2-spring5-hibernate4","text":"","title":"SSH (Struts2 + Spring5 + Hibernate4)"},{"location":"ssh/#ssh","text":"\u9019\u4e9b\u662f\u4e00\u7d44\u6846\u67b6\u7684\u7d44\u5408\uff0c\u4e5f\u662f\u76ee\u524d\u6700\u70ba\u6d41\u884c\u7684 Java Web \u958b\u767c\u67b6\u69cb\u3002\u6bcf\u500b\u6846\u67b6\u90fd\u5404\u53f8\u5176\u8077\uff0c\u4e5f\u90fd\u6709\u5176\u4e3b\u8981\u76ee\u7684\u3002\u800c\u8cc7\u901a\u7684 Java \u76f8\u95dc\u6848\u5b50\u4e5f\u90fd\u662f\u63a1\u7528\u9019\u6a23\u7684\u67b6\u69cb\u505a\u958b\u767c\u3002 Struts \u4e3b\u8981\u5728\u662f\u4f5c\u70ba MVC\uff08Model-Viewer-Controller\uff09\u7684\u5be6\u73fe\uff0c\u5c07\u9801\u9762\u7684\u5448\u73fe\u53ca\u6d41\u7a0b\u8207\u5546\u696d\u908f\u8f2f\u5207\u5206\u3002\u7136\u800c\uff0c\u8207\u5176\u8aaa\u5207\u5206\u4e0d\u5982\u89e3\u91cb\u70ba\u964d\u4f4e\u6bcf\u500b\u74b0\u7bc0\u7684\u85d5\u5408\u6027\u3002\u540c\u6642\u505a\u4e86\u958b\u767c\u5206\u5de5\uff0c\u7db2\u9801\u8a2d\u8a08\u8457\u91cd\u5728 UI\uff0fUX \u7684\u8a2d\u8a08\uff0c\u5546\u696d\u908f\u8f2f\u4ea4\u7d66\u5f8c\u7aef Business Layer \u53bb\u8ca0\u8cac\uff0c\u5728\u964d\u4f4e\u6bcf\u500b\u74b0\u7bc0\u7684\u85d5\u5408\u6027\u7684\u540c\u6642\uff0c\u4e5f\u5c07\u6bcf\u4e00\u968e\u5c64\u90fd\u505a\u4e86\u5f88\u5b8c\u6574\u7684\u5b9a\u7fa9\u3002\u524d\u7aef\u4f7f\u7528 HTML \u6216 Tag \u8207\u76f8\u5c0d\u4e5f\u6e1b\u4f4e\u7684\u524d\u7aef\u9801\u9762\u66b4\u9732\u5728\u5916\u7684\u8cc7\u5b89\u554f\u984c\u8af8\u5982 SQL injection\u3001Cross-site Script\uff0c\u7531\u5de5\u7a0b\u5e2b\u8a2d\u8a08\u51fa\u4f86\u7684\u9801\u9762\u4e5f\u4e0d\u6703\u6bcf\u6b21\u90fd\u88ab\u4f7f\u7528\u8005\u5acc\u68c4\u7f8e\u611f\u4e0d\u8db3\u4e86\u3002 Spring \u5ef6\u7e8c\u4e86 MVC \u67b6\u69cb\u4e2d\u7684 Model \u90e8\u5206\uff0c\u5e7e\u500b\u4e3b\u8981\u7279\u8272\uff0c\u4f9d\u8cf4\u6ce8\u5165\uff08DI\uff09\u3001\u53cd\u8f49\u63a7\u5236\uff08IoC\uff09\u548c AOP\uff08Aspect Oriented Programming\uff09\u3002IoC \u9019\u88e1\u7684\u57fa\u790e\u6982\u5ff5\u662f BeanFactory\uff0c\u5b83\u63d0\u4f9b\u5c0d Factory \u6a21\u5f0f\u7684\u7d93\u5178\u5be6\u73fe\u4f86\u6d88\u9664\u5c0d\u7a0b\u5e8f\u6027\u55ae\u4f8b\u6a21\u5f0f\uff08Singleton\uff09\u7684\u9700\u8981\uff0c\u4e26\u771f\u6b63\u5730\u5141\u8a31\u4f60\u5f9e\u7a0b\u5e8f\u908f\u8f2f\u4e2d\u5206\u96e2\u51fa\u4f9d\u8cf4\u95dc\u4fc2\u548c\u914d\u7f6e\u3002\u7576\u7136\u82e5\u80fd\u914d\u5408\u5176\u4ed6 Design Pattern \u4f7f\u7528\u66f4\u53ef\u770b\u51fa\u67b6\u69cb\u7684\u5b8c\u6574\u6027\uff0cAOP \u4e2d\u61c9\u7528\u5230\u7684\u662f\u8cc7\u6599\u5eab\u7684 Transaction \u63a7\u7ba1\uff0c\u5b83\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u53bb\u5beb\u5230 Transaction \u76f8\u95dc\u7684 code\uff0c\u53ea\u8981\u5b9a\u7fa9\u597d\u54ea\u4e9b code \u9700\u8981\u52a0\u4e0a Transaction \u7684\u63a7\u5236\u5373\u53ef\u3002 Hibernate ORM \uff08Oriented-Relational Mapping\uff09\u63d0\u4f9b\u4e86\u5e38\u7528\u7684\u300c\u5c0d\u8c61\uff0f\u95dc\u4fc2\u300d\u6620\u5c04 APIs \u7684\u96c6\u6210\u5c64\u3002 \u5176\u4e2d\u5305\u62ec JPA\u3001JDO\u3001iBatis \u548c Hibernate \u3002\u5229\u7528 ORM package\uff0c\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u6240\u6709 Spring \u63d0\u4f9b\u7684\u7279\u6027\u9032\u884c\u300c\u5c0d\u8c61\uff0f\u95dc\u4fc2\u300d\u6620\u5c04\u3002 (\u53c3\u8003\u4f86\u6e90\uff1a https://marketing.ares.com.tw/newsletter/2015-08-outsourcing/ssh ) \u53cd\u8f49\u63a7\u5236\uff08IoC\uff09 (\u53c3\u8003\u8cc7\u6599\uff1a) AOP\uff08Aspect Oriented Programming\uff09\uff1a\u5256\u9762\u5c0e\u5411\u7a0b\u5f0f\u8a2d\u8a08 (\u53c3\u8003\u8cc7\u6599\uff1a https://ithelp.ithome.com.tw/articles/10229664 )","title":"SSH \u8aaa\u660e"},{"location":"ssh/#github-httpsgithubcomaweit-zhustruts2beginner","text":"","title":"GitHub \u5b8c\u6574\u4ee3\u78bc\uff1ahttps://github.com/aweit-zhu/Struts2Beginner"},{"location":"ssh/#_1","text":"Struts 2.3.8 Struts JSON Plugin 2.3.8 Struts Convention Plugin 2.3.8 Struts Spring Plugin 2.3.8 Spring Core 5.3.29 Spring Context 5.3.29 Spring Web MVC 5.3.29 Spring Web 5.3.29 Spring Beans 5.3.29 Spring Context Support 5.1.5.RELEASE Spring Security Core 5.1.4.RELEASE Spring Security Taglibs 5.1.4.RELEASE Spring Security Web 5.1.4.RELEASE Spring Security Config 5.1.4.RELEASE Hibernate Core 5.4.32.Final MySQL Connector/J 8.0.25","title":"\u4f7f\u7528\u74b0\u5883"},{"location":"ssh/#pomxml","text":"<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>Struts2Beginner</groupId> <artifactId>Struts2Beginner</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <dependencies> <!-- lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.20</version> <scope>provided</scope> </dependency> <!-- Servlet --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <!-- Struts 2 --> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-json-plugin</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-convention-plugin</artifactId> <version>2.3.8</version> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-convention-plugin</artifactId> <version>2.3.8</version> <exclusions> <exclusion> <groupId>org.apache.struts</groupId> <artifactId>struts2-core</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-spring-plugin</artifactId> <version>2.3.8</version> </dependency> <!-- Spring dependencies --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>5.3.29</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context-support</artifactId> <version>5.1.5.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-core</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-taglibs</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-web</artifactId> <version>5.1.4.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-config</artifactId> <version>5.1.4.RELEASE</version> </dependency> <!-- Hibernate --> <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-core</artifactId> <version>5.4.32.Final</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> </dependencies> <build> <resources> <resource> <directory>src/main/</directory> <excludes> <exclude>**/*.java</exclude> </excludes> </resource> </resources> <plugins> <plugin> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <release>17</release> </configuration> </plugin> <plugin> <artifactId>maven-war-plugin</artifactId> <version>3.2.3</version> </plugin> </plugins> <finalName>Struts2Beginner</finalName> </build> </project>","title":"pom.xml"},{"location":"ssh/#mysql","text":"version: '3.8' services: mysql: image: mysql:5 container_name: mysql restart: always environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: cookbook MYSQL_USER: admin MYSQL_PASSWORD: password ports: - 3306:3306 volumes: - ./data:/var/lib/mysql phpmyadmin: image: phpmyadmin/phpmyadmin container_name: phpmyadmin restart: always environment: PMA_HOST: mysql PMA_PORT: 3306 MYSQL_ROOT_PASSWORD: password ports: - 8989:80 depends_on: - mysql","title":"\u914d\u7f6e MySQL"},{"location":"ssh/#_2","text":"struts.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\"> <struts> <constant name=\"struts.action.excludePattern\" value=\"/spring/.*\" /> <constant name=\"struts.objectFactory\" value=\"spring\" /> <constant name=\"struts.objectFactory.spring.autoWireAlways\" value=\"true\" /> <constant name=\"struts.objectFactory.spring.autoWire\" value=\"name\" /> <constant name=\"struts.objectFactory.spring.useClassCache\" value=\"true\" /> <package name=\"Struts2Beginner\" namespace=\"/admin\" extends=\"struts-default\"> <action name=\"index\"> <result>/WEB-INF/jsp/calculate/input.jsp</result> </action> </package> </struts> (1) struts.action.excludePattern\uff1a\u54ea\u4e9b\u8def\u7531\u4e0d\u8981\u900f\u904e Struts\u3002\u5982\u679c\u6709\u4e9b\u8def\u7531\u8981\u8d70 Spring Controller \u5247\u53ef\u4ee5\u5229\u7528\u9019\u500b\u65b9\u5f0f\u8a2d\u5b9a\u3002 (2) struts.objectFactory\uff1a\u5982\u679c\u70ba Spirng\uff0c\u4ee3\u8868\u53ef\u4ee5\u4f7f\u7528 Spring \u7684 DI \u548c IoC\u7684\u529f\u80fd\u3002 (3) struts.objectFactory.spring.autoWire\uff1a\u5982\u679c Bean \u5b9a\u7fa9\u7684 Name \u70ba abc\uff0c\u5247\u6709\u8981\u6ce8\u5165\u7684\u5176\u4ed6Bean\u7684 property \u7684\u540d\u7a31\u4e5f\u8981\u70ba abc\uff0c\u5247\u6703\u81ea\u52d5\u6ce8\u5165\u3002 applicationContext.xml <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"> <bean id=\"springController\" class=\"com.example.spring.controller.SpringController\"> <property name=\"helloService\" ref=\"helloService\" /> </bean> <bean id=\"helloService\" class=\"com.example.spring.service.HelloService\"/> </beans> In the context of the provided XML code, the \"applicationContext.xml\" file is not explicitly mentioned. However, based on the configuration settings in the Struts XML file, it is likely that the Spring object factory is being used to manage objects and dependencies in the Struts application. In a typical setup, the \"applicationContext.xml\" file would be responsible for defining the Spring beans, specifying their dependencies, and configuring other aspects of the Spring application context. It might include components such as data sources, transaction managers, service beans, and more. hibernate.cfg.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\"> <hibernate-configuration> <session-factory> <property name=\"hibernate.dialect\">org.hibernate.dialect.MySQL8Dialect</property> <property name=\"hibernate.connection.driver_class\">com.mysql.cj.jdbc.Driver</property> <property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/cookbook</property> <property name=\"hibernate.connection.username\">admin</property> <property name=\"hibernate.connection.password\">password</property> <property name=\"hibernate.show_sql\">true</property> <property name=\"hibernate.hbm2ddl.auto\">update</property> <mapping class = \"com.example.hibernate.entity.Post\" /> <mapping class = \"com.example.hibernate.entity.Comment\" /> </session-factory> </hibernate-configuration> (1) property\uff1a\u8a2d\u5b9a\u9023\u7dda\u8cc7\u8a0a (2) mapping\uff1a\u53ea\u8981\u6709\u4e00\u500b\u7269\u4ef6\u9700\u8981\u8207\u8868\u683c\u505a\u95dc\u806f\uff0c\u90fd\u8981\u5728\u9019\u908a\u5b9a\u7fa9\u3002","title":"\u4e09\u500b\u914d\u7f6e\u6a94"},{"location":"ssh/#spirng-secutiry","text":"import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.transaction.annotation.EnableTransactionManagement; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.CorsConfigurationSource; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; @Configuration @ComponentScan(\"com.example\") @EnableTransactionManagement @EnableWebSecurity public class AppConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity httpSecurity) throws Exception { httpSecurity.cors().and().csrf().disable(); httpSecurity.authorizeRequests() .antMatchers(\"/superadmin/**\").access(\"hasRole('ROLE_SUPER_ADMIN')\") .antMatchers(\"/admin/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN')\") .antMatchers(\"/employee/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN') or hasRole('ROLE_EMPLOYEE')\") .antMatchers(\"/spring/**\").access(\"hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN')\") .and() .httpBasic() .and() .logout() .and() .exceptionHandling(); } @Bean public CorsConfigurationSource corsConfigurationSource() { UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\"/**\", new CorsConfiguration().applyPermitDefaultValues()); return source; } @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser(\"superadmin\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_SUPER_ADMIN\", \"ROLE_ADMIN\", \"ROLE_EMPLOYEE\") .and() .withUser(\"admin\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_ADMIN\", \"ROLE_EMPLOYEE\") .and() .withUser(\"employee\").password(passwordEncoder().encode(\"123456\")).authorities(\"ROLE_EMPLOYEE\"); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } }","title":"\u914d\u7f6e Spirng Secutiry"},{"location":"ssh/#action-service","text":"HelloAction import org.apache.struts2.convention.annotation.Action; import org.apache.struts2.convention.annotation.Namespace; import org.apache.struts2.convention.annotation.Result; import org.apache.struts2.convention.annotation.Results; import org.springframework.beans.factory.annotation.Autowired; import com.example.spring.service.HelloService; import com.opensymphony.xwork2.ActionSupport; @Namespace(\"/\") @Results(value = { @Result(name = \"hello\", location = \"/WEB-INF/jsp/hello.jsp\") , @Result(name = \"goodbye\", location = \"/WEB-INF/jsp/goodbye.jsp\") }) public class HelloAction extends ActionSupport { @Autowired HelloService helloService; @Action(value = \"hello\") public String hello() { System.out.println(helloService.getHello()); return \"hello\"; } @Action(value = \"goodbye\") public String goodbye() { return \"goodbye\"; } } HelloService import org.springframework.stereotype.Service; @Service public class HelloService { public String getHello() { return \"service, hello\"; } } hello.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> Hello goobye.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> GoodBye","title":"Action + Service"},{"location":"ssh/#struts-dao","text":"","title":"Struts \u6574\u5408 DAO"},{"location":"ssh/#hibernateutil","text":"import org.hibernate.SessionFactory; import org.hibernate.cfg.Configuration; public class HibernateUtil { private static final SessionFactory sessionFactory; static { try { sessionFactory = new Configuration().configure().buildSessionFactory(); } catch (Throwable ex) { System.err.println(\"Initial SessionFactory creation failed.\" + ex); throw new ExceptionInInitializerError(ex); } } public static SessionFactory getSessionFactory() { return sessionFactory; } }","title":"HibernateUtil"},{"location":"ssh/#post","text":"import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Data; import lombok.ToString; @Entity @Table(name = \"posts\") @Data @ToString(exclude = \"comments\") public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @Column private String title; @Column private String content; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL, fetch = FetchType.EAGER) private List<Comment> comments = new ArrayList<>(); }","title":"Post"},{"location":"ssh/#comment","text":"import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Data; import lombok.ToString; @Entity @Table(name = \"comments\") @Data @ToString(exclude = \"post\") public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String content; @ManyToOne @JoinColumn(name = \"post_id\") private Post post; }","title":"Comment"},{"location":"ssh/#postdao","text":"import java.util.List; import org.hibernate.Session; import org.hibernate.Transaction; import org.springframework.stereotype.Service; import com.example.hibernate.HibernateUtil; import com.example.hibernate.entity.Post; @Service public class PostDao { public void save(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.save(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void update(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.update(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void delete(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.delete(post); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public Post getById(int id) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.get(Post.class, id); } catch (Exception e) { e.printStackTrace(); return null; } } public List<Post> getAll() { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.createQuery(\"FROM Post\", Post.class).getResultList(); } catch (Exception e) { e.printStackTrace(); return null; } } }","title":"PostDao"},{"location":"ssh/#commentdao","text":"import java.util.List; import org.hibernate.Session; import org.hibernate.Transaction; import org.hibernate.query.Query; import org.springframework.stereotype.Service; import com.example.hibernate.HibernateUtil; import com.example.hibernate.entity.Comment; import com.example.hibernate.entity.Post; @Service public class CommentDao { public void saveComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.save(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public Comment getCommentById(Long commentId) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { return session.get(Comment.class, commentId); } catch (Exception e) { e.printStackTrace(); return null; } } public List<Comment> getCommentsByPost(Post post) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Query<Comment> query = session.createQuery(\"FROM Comment WHERE post = :post\", Comment.class); query.setParameter(\"post\", post); return query.list(); } catch (Exception e) { e.printStackTrace(); return null; } } public void updateComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.update(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } public void deleteComment(Comment comment) { try (Session session = HibernateUtil.getSessionFactory().openSession()) { Transaction transaction = session.beginTransaction(); session.delete(comment); transaction.commit(); } catch (Exception e) { e.printStackTrace(); } } }","title":"CommentDao"},{"location":"ssh/#postaction","text":"import java.util.List; import org.apache.struts2.convention.annotation.Action; import org.apache.struts2.convention.annotation.Namespace; import org.apache.struts2.convention.annotation.Result; import org.apache.struts2.convention.annotation.Results; import org.springframework.beans.factory.annotation.Autowired; import com.example.hibernate.dao.CommentDao; import com.example.hibernate.dao.PostDao; import com.example.hibernate.entity.Comment; import com.example.hibernate.entity.Post; import com.opensymphony.xwork2.ActionSupport; import lombok.Data; @Namespace(\"/admin\") @Results({ @Result(name = \"success\", location = \"/list-posts.jsp\"), @Result(name = \"error\", location = \"/error.jsp\") }) @Data public class PostAction extends ActionSupport { @Autowired PostDao postDao; @Autowired CommentDao commentDao; private int id; private String title; private String content; private List<Post> posts; @Action(value = \"/create-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String create() { Post post = new Post(); post.setTitle(title); post.setContent(content); postDao.save(post); Comment comment = new Comment(); comment.setContent(\"Test Comment\"); addCommentToPost(post.getId(),comment); return SUCCESS; } public void addCommentToPost(int postId, Comment comment) { Post post = postDao.getById(postId); if (post != null) { comment.setPost(post); commentDao.saveComment(comment); } } @Action(value = \"/update-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String update() { Post post = postDao.getById(id); if (post != null) { post.setTitle(title); post.setContent(content); postDao.update(post); } else { return ERROR; } return SUCCESS; } @Action(value = \"/delete-post\", results = { @Result(name = \"success\", location = \"/list-posts\", type = \"redirect\") }) public String delete() { Post post = postDao.getById(id); if (post != null) { postDao.delete(post); } else { return ERROR; } return SUCCESS; } @Action(value = \"/view-post\", results = { @Result(name = \"success\", location = \"/view-post.jsp\") }) public String view() { Post post = postDao.getById(id); if (post != null) { title = post.getTitle(); content = post.getContent(); List<Comment> comments = commentDao.getCommentsByPost(post); System.out.println(comments); } else { return ERROR; } return SUCCESS; } @Action(value = \"/list-posts\", results = { @Result(name = \"success\", location = \"/list-posts.jsp\") }) public String list() { posts = postDao.getAll(); return SUCCESS; } }","title":"PostAction"},{"location":"ssh/#jsp","text":"list-post.jsp <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %> <%@ taglib prefix=\"s\" uri=\"/struts-tags\" %> <!DOCTYPE html> <html> <head> <title>List of Posts</title> </head> <body> <h1>List of Posts</h1> <table> <tr> <th>ID</th> <th>Title</th> <th>Content</th> <th>Action</th> </tr> <s:iterator value=\"posts\"> <tr> <td><s:property value=\"id\" /></td> <td><s:property value=\"title\" /></td> <td><s:property value=\"content\" /></td> <td> <a href=\"<s:url action='view-post'><s:param name='id' value='%{id}' /></s:url>\">View</a> <a href=\"<s:url action='delete-post'><s:param name='id' value='%{id}' /></s:url>\">Delete</a> </td> </tr> </s:iterator> </table> <h2>Create New Post</h2> <form action=\"<s:url action='create-post' />\" method=\"POST\"> <label for=\"title\">Title:</label> <input type=\"text\" name=\"title\" id=\"title\" required /><br> <label for=\"content\">Content:</label> <textarea name=\"content\" id=\"content\" required></textarea><br> <input type=\"submit\" value=\"Create\" /> </form> </body> </html> view-posts.jsp <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %> <%@ taglib prefix=\"s\" uri=\"/struts-tags\" %> <!DOCTYPE html> <html> <head> <title>View Post</title> </head> <body> <h1>View Post</h1> <table> <tr> <th>ID</th> <th>Title</th> <th>Content</th> </tr> <tr> <td><s:property value=\"id\" /></td> <td><s:property value=\"title\" /></td> <td><s:property value=\"content\" /></td> </tr> </table> <h2>Edit Post</h2> <form action=\"<s:url action='update-post' />\" method=\"POST\"> <input type=\"hidden\" name=\"id\" value=\"<s:property value='id' />\" /> <label for=\"title\">Title:</label> <input type=\"text\" name=\"title\" id=\"title\" value=\"<s:property value='title' />\" required /><br> <label for=\"content\">Content:</label> <textarea name=\"content\" id=\"content\" required><s:property value='content' /></textarea><br> <input type=\"submit\" value=\"Update\" /> </form> </body> </html>","title":"\u76f8\u95dcJSP"},{"location":"ssh/#test","text":"\u6253\u958b\u700f\u89bd\u5668\uff1ahttp://localhost:8080/Struts2Beginner/admin/list-posts \u5f48\u51fa\u767b\u5165\u8996\u7a97\uff0c\u8868\u793aSpring Security \u662f\u6b63\u78ba\u7684\u3002 \u8f38\u5165\u6b63\u78ba\u5e33\u5bc6\u5f8c(admin/123456)\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u756b\u9762\u3002 \u5c0d\u7167\u4e00\u4e0b\u8cc7\u6599\u5eab\u7684\u8cc7\u6599\uff0c\u6bd4\u5c0d\u662f\u5426\u4e00\u81f4\u3002","title":"Test"},{"location":"tiles/","text":"Struts2 + Tiles2 + MDB UI \u6846\u67b6 1. MDB: https://mdbootstrap.com/ 2. Tiles: https://www.viralpatel.net/struts-2-tiles-plugin-tutorial-with-example-in-eclipse/ \u7bc4\u4f8b Github \u7a0b\u5f0f\u78bc\uff1a https://github.com/aweit-zhu/Struts2Beginner pom.xml <!-- Tiles2 --> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-tiles-plugin</artifactId> <version>2.3.8</version> </dependency> web.xml <!-- Tiles2 --> <listener> <listener-class>org.apache.struts2.tiles.StrutsTilesListener</listener-class> </listener> <context-param> <param-name>tilesDefinitions</param-name> <param-value>/WEB-INF/tiles.xml</param-value> </context-param> tiles.xml <!DOCTYPE tiles-definitions PUBLIC \"-//Apache Software Foundation//DTD Tiles Configuration 2.0//EN\" \"http://tiles.apache.org/dtds/tiles-config_2_0.dtd\"> <tiles-definitions> <definition name=\"baseLayout\" template=\"/WEB-INF/layouts/baseLayout.jsp\"> <put-attribute name=\"title\" value=\"My Application\" /> <put-attribute name=\"header\" value=\"/WEB-INF/layouts/header.jsp\" /> <put-attribute name=\"body\" value=\"\" /> <put-attribute name=\"footer\" value=\"/WEB-INF/layouts/footer.jsp\" /> </definition> </tiles-definitions> baseLayout.jsp <%@ taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\"%> <!DOCTYPE html> <html> <head> <title><tiles:getAsString name=\"title\" /></title> <!-- Font Awesome --> <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\" /> <!-- Google Fonts --> <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" rel=\"stylesheet\" /> <!-- MDB --> <link href=\"${pageContext.request.contextPath}/css/mdb.min.css\" rel=\"stylesheet\" /> <!-- MDB --> <script type=\"text/javascript\" src=\"${pageContext.request.contextPath}/js/mdb.min.js\"></script> </head> <body> <header> <tiles:insertAttribute name=\"header\" /> </header> <main> <tiles:insertAttribute name=\"body\" /> </main> <footer> <tiles:insertAttribute name=\"footer\" /> </footer> </body> </html> header.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <header> <!-- Navbar --> <nav class=\"navbar navbar-expand-lg navbar-light bg-white fixed-top\"> <div class=\"container-fluid\"> <button class=\"navbar-toggler\" type=\"button\" data-mdb-toggle=\"collapse\" data-mdb-target=\"#navbarExample01\" aria-controls=\"navbarExample01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <i class=\"fas fa-bars\"></i> </button> <div class=\"collapse navbar-collapse\" id=\"navbarExample01\"> <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"> <li class=\"nav-item active\"><a class=\"nav-link\" aria-current=\"page\" href=\"${pageContext.request.contextPath}/hello\">Home</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"${pageContext.request.contextPath}/admin/index\">Caculate</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Pricing</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">About</a></li> </ul> </div> </div> </nav> </header> footer.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!-- Footer --> <footer class=\"text-center text-lg-start bg-light text-muted\"> <!-- Section: Social media --> <section class=\"d-flex justify-content-center justify-content-lg-between p-4 border-bottom\"> <!-- Left --> <div class=\"me-5 d-none d-lg-block\"> <span>Get connected with us on social networks:</span> </div> <!-- Left --> <!-- Right --> <div> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-facebook-f\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-twitter\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-google\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-instagram\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-linkedin\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-github\"></i> </a> </div> <!-- Right --> </section> <!-- Section: Social media --> <!-- Section: Links --> <section class=\"\"> <div class=\"container text-center text-md-start mt-5\"> <!-- Grid row --> <div class=\"row mt-3\"> <!-- Grid column --> <div class=\"col-md-3 col-lg-4 col-xl-3 mx-auto mb-4\"> <!-- Content --> <h6 class=\"text-uppercase fw-bold mb-4\"> <i class=\"fas fa-gem me-3\"></i>Company name </h6> <p>Here you can use rows and columns to organize your footer content. Lorem ipsum dolor sit amet, consectetur adipisicing elit. </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-2 col-lg-2 col-xl-2 mx-auto mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Products</h6> <p> <a href=\"#!\" class=\"text-reset\">Angular</a> </p> <p> <a href=\"#!\" class=\"text-reset\">React</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Vue</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Laravel</a> </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-3 col-lg-2 col-xl-2 mx-auto mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Useful links</h6> <p> <a href=\"#!\" class=\"text-reset\">Pricing</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Settings</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Orders</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Help</a> </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Contact</h6> <p> <i class=\"fas fa-home me-3\"></i> New York, NY 10012, US </p> <p> <i class=\"fas fa-envelope me-3\"></i> info@example.com </p> <p> <i class=\"fas fa-phone me-3\"></i> + 01 234 567 88 </p> <p> <i class=\"fas fa-print me-3\"></i> + 01 234 567 89 </p> </div> <!-- Grid column --> </div> <!-- Grid row --> </div> </section> <!-- Section: Links --> <!-- Copyright --> <div class=\"text-center p-4\" style=\"background-color: rgba(0, 0, 0, 0.05);\"> \u00a9 2021 Copyright: <a class=\"text-reset fw-bold\" href=\"https://mdbootstrap.com/\">MDBootstrap.com</a> </div> <!-- Copyright --> </footer> <!-- Footer --> Dynamic Body <%@taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> <tiles:insertDefinition name=\"baseLayout\"> <tiles:putAttribute name=\"body\"> <div class=\"p-5 text-center bg-light\" style=\"margin-top: 58px;\"> <center> <h2>Calculate sum of two numbers</h2> <s:form action=\"/admin/calculateSumAction\" method=\"post\"> <s:textfield name=\"x\" size=\"10\" label=\"Enter X\" /> <s:textfield name=\"y\" size=\"10\" label=\"Enter Y\" /> <s:submit value=\"Calculate\" /> </s:form> </center> </div> </tiles:putAttribute> </tiles:insertDefinition> Test http://localhost:8080/Struts2Beginner/admin/index","title":"Struts + Tiles2"},{"location":"tiles/#struts2-tiles2-mdb","text":"","title":"Struts2 + Tiles2 + MDB"},{"location":"tiles/#ui","text":"","title":"UI \u6846\u67b6"},{"location":"tiles/#1-mdb-httpsmdbootstrapcom","text":"","title":"1. MDB: https://mdbootstrap.com/"},{"location":"tiles/#2-tiles-httpswwwviralpatelnetstruts-2-tiles-plugin-tutorial-with-example-in-eclipse","text":"","title":"2. Tiles: https://www.viralpatel.net/struts-2-tiles-plugin-tutorial-with-example-in-eclipse/"},{"location":"tiles/#_1","text":"","title":"\u7bc4\u4f8b"},{"location":"tiles/#github","text":"https://github.com/aweit-zhu/Struts2Beginner","title":"Github \u7a0b\u5f0f\u78bc\uff1a"},{"location":"tiles/#pomxml","text":"<!-- Tiles2 --> <dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-tiles-plugin</artifactId> <version>2.3.8</version> </dependency>","title":"pom.xml"},{"location":"tiles/#webxml","text":"<!-- Tiles2 --> <listener> <listener-class>org.apache.struts2.tiles.StrutsTilesListener</listener-class> </listener> <context-param> <param-name>tilesDefinitions</param-name> <param-value>/WEB-INF/tiles.xml</param-value> </context-param>","title":"web.xml"},{"location":"tiles/#tilesxml","text":"<!DOCTYPE tiles-definitions PUBLIC \"-//Apache Software Foundation//DTD Tiles Configuration 2.0//EN\" \"http://tiles.apache.org/dtds/tiles-config_2_0.dtd\"> <tiles-definitions> <definition name=\"baseLayout\" template=\"/WEB-INF/layouts/baseLayout.jsp\"> <put-attribute name=\"title\" value=\"My Application\" /> <put-attribute name=\"header\" value=\"/WEB-INF/layouts/header.jsp\" /> <put-attribute name=\"body\" value=\"\" /> <put-attribute name=\"footer\" value=\"/WEB-INF/layouts/footer.jsp\" /> </definition> </tiles-definitions>","title":"tiles.xml"},{"location":"tiles/#baselayoutjsp","text":"<%@ taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\"%> <!DOCTYPE html> <html> <head> <title><tiles:getAsString name=\"title\" /></title> <!-- Font Awesome --> <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\" /> <!-- Google Fonts --> <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" rel=\"stylesheet\" /> <!-- MDB --> <link href=\"${pageContext.request.contextPath}/css/mdb.min.css\" rel=\"stylesheet\" /> <!-- MDB --> <script type=\"text/javascript\" src=\"${pageContext.request.contextPath}/js/mdb.min.js\"></script> </head> <body> <header> <tiles:insertAttribute name=\"header\" /> </header> <main> <tiles:insertAttribute name=\"body\" /> </main> <footer> <tiles:insertAttribute name=\"footer\" /> </footer> </body> </html>","title":"baseLayout.jsp"},{"location":"tiles/#headerjsp","text":"<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <header> <!-- Navbar --> <nav class=\"navbar navbar-expand-lg navbar-light bg-white fixed-top\"> <div class=\"container-fluid\"> <button class=\"navbar-toggler\" type=\"button\" data-mdb-toggle=\"collapse\" data-mdb-target=\"#navbarExample01\" aria-controls=\"navbarExample01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <i class=\"fas fa-bars\"></i> </button> <div class=\"collapse navbar-collapse\" id=\"navbarExample01\"> <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"> <li class=\"nav-item active\"><a class=\"nav-link\" aria-current=\"page\" href=\"${pageContext.request.contextPath}/hello\">Home</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"${pageContext.request.contextPath}/admin/index\">Caculate</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Pricing</a></li> <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">About</a></li> </ul> </div> </div> </nav> </header>","title":"header.jsp"},{"location":"tiles/#footerjsp","text":"<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!-- Footer --> <footer class=\"text-center text-lg-start bg-light text-muted\"> <!-- Section: Social media --> <section class=\"d-flex justify-content-center justify-content-lg-between p-4 border-bottom\"> <!-- Left --> <div class=\"me-5 d-none d-lg-block\"> <span>Get connected with us on social networks:</span> </div> <!-- Left --> <!-- Right --> <div> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-facebook-f\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-twitter\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-google\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-instagram\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-linkedin\"></i> </a> <a href=\"\" class=\"me-4 text-reset\"> <i class=\"fab fa-github\"></i> </a> </div> <!-- Right --> </section> <!-- Section: Social media --> <!-- Section: Links --> <section class=\"\"> <div class=\"container text-center text-md-start mt-5\"> <!-- Grid row --> <div class=\"row mt-3\"> <!-- Grid column --> <div class=\"col-md-3 col-lg-4 col-xl-3 mx-auto mb-4\"> <!-- Content --> <h6 class=\"text-uppercase fw-bold mb-4\"> <i class=\"fas fa-gem me-3\"></i>Company name </h6> <p>Here you can use rows and columns to organize your footer content. Lorem ipsum dolor sit amet, consectetur adipisicing elit. </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-2 col-lg-2 col-xl-2 mx-auto mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Products</h6> <p> <a href=\"#!\" class=\"text-reset\">Angular</a> </p> <p> <a href=\"#!\" class=\"text-reset\">React</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Vue</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Laravel</a> </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-3 col-lg-2 col-xl-2 mx-auto mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Useful links</h6> <p> <a href=\"#!\" class=\"text-reset\">Pricing</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Settings</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Orders</a> </p> <p> <a href=\"#!\" class=\"text-reset\">Help</a> </p> </div> <!-- Grid column --> <!-- Grid column --> <div class=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4\"> <!-- Links --> <h6 class=\"text-uppercase fw-bold mb-4\">Contact</h6> <p> <i class=\"fas fa-home me-3\"></i> New York, NY 10012, US </p> <p> <i class=\"fas fa-envelope me-3\"></i> info@example.com </p> <p> <i class=\"fas fa-phone me-3\"></i> + 01 234 567 88 </p> <p> <i class=\"fas fa-print me-3\"></i> + 01 234 567 89 </p> </div> <!-- Grid column --> </div> <!-- Grid row --> </div> </section> <!-- Section: Links --> <!-- Copyright --> <div class=\"text-center p-4\" style=\"background-color: rgba(0, 0, 0, 0.05);\"> \u00a9 2021 Copyright: <a class=\"text-reset fw-bold\" href=\"https://mdbootstrap.com/\">MDBootstrap.com</a> </div> <!-- Copyright --> </footer> <!-- Footer -->","title":"footer.jsp"},{"location":"tiles/#dynamic-body","text":"<%@taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\"%> <%@ taglib prefix=\"s\" uri=\"/struts-tags\"%> <tiles:insertDefinition name=\"baseLayout\"> <tiles:putAttribute name=\"body\"> <div class=\"p-5 text-center bg-light\" style=\"margin-top: 58px;\"> <center> <h2>Calculate sum of two numbers</h2> <s:form action=\"/admin/calculateSumAction\" method=\"post\"> <s:textfield name=\"x\" size=\"10\" label=\"Enter X\" /> <s:textfield name=\"y\" size=\"10\" label=\"Enter Y\" /> <s:submit value=\"Calculate\" /> </s:form> </center> </div> </tiles:putAttribute> </tiles:insertDefinition>","title":"Dynamic Body"},{"location":"tiles/#test","text":"http://localhost:8080/Struts2Beginner/admin/index","title":"Test"},{"location":"traefik/","text":"Traefik With K8S + CRD (Custom Resource Definitions) IngressRoute Definition # Install Traefik Resource Definitions: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml # Install RBAC for Traefik: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml Services kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/user-guides/crd-acme/02-services.yml \u4fee\u6539 traefik apiVersion: v1 kind: Service metadata: name: traefik spec: type: LoadBalancer # \u591a\u52a0\u9019\u4e00\u884c\uff0c\u66b4\u9732\u8857\u53e3 ports: - protocol: TCP name: web # web \u5165\u53e3 port: 8000 - protocol: TCP name: admin # dashboard \u5165\u53e3 port: 8080 - protocol: TCP name: websecure # web https \u5165\u53e3 port: 4443 selector: app: traefik - Deployments kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/user-guides/crd-acme/03-deployments.yml Traefik Routers ``` apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: match: Host( 192.168.0.17 ) && PathPrefix( /notls ) kind: Rule services: name: whoami port: 80 ``` apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: docker-demo namespace: default spec: entryPoints: - web routes: - match: PathPrefix(`/docker-demo`) kind: Rule services: - name: myapp port: 80 Dashboard http://192.168.0.23:8080/dashboard/#/ \u6e2c\u8a66 URL\uff1a http://192.168.0.23:8000/notls Middlewares \u6982\u5ff5 \u4fee\u6539 IngressRoute apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: - match: Host(`192.168.0.23`) && PathPrefix(`/notls`) kind: Rule middlewares: - name: test-auth services: - name: whoami port: 80 \u5efa\u7acb Middleware ``` apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-auth spec: basicAuth: secret: authsecret Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first. To create an encoded user:password pair, the following command can be used: htpasswd -nb user password | openssl base64 apiVersion: v1 kind: Secret metadata: name: authsecret namespace: default data: users: dXNlcjokYXByMSRicC5FV295eCRXTWttUktBLzdjQWcycXNIL09XbXIxCgo= ``` htpasswd -nb user password | openssl base64 \u53bb\u770b Traefik Dashboard\uff0c\u6703\u770b\u5230\u591a\u4e00\u500b Middlewares \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165 http://192.168.0.23:8000/notls \u8f38\u5165\uff1auser/password \u5f8c\uff0c\u5c31\u53ef\u4ee5\u767b\u5165\u6210\u529f\uff0c\u4e26\u53d6\u5f97\u8cc7\u8a0a Middleware - Error \u5efa\u7acb\u4e00\u500b Service apiVersion: v1 kind: Service metadata: name: traefikerror spec: type: LoadBalancer ports: - name: http targetPort: 80 port: 80 selector: app: traefikerror --- apiVersion: apps/v1 kind: Deployment metadata: name: traefikerror spec: replicas: 1 selector: matchLabels: app: traefikerror template: metadata: labels: app: traefikerror spec: containers: - name: traefikerror image: guillaumebriday/traefik-custom-error-pages ports: - containerPort: 80 \u5efa\u7acb Middleware apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-errors spec: errors: status: - \"400-599\" query: /{status}.html service: name: traefikerror port: 80 \u52a0\u5165 Middleware apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: - match: Host(`192.168.0.23`) && PathPrefix(`/notls`) kind: Rule middlewares: - name: test-auth - name: test-errors services: - name: whoami port: 80 \u66b4\u9732 HTTPS \u670d\u52d9 \u5148\u628a STAR_mic.com.tw.crt \u548c STAR_mic.com.tw.key \u5169\u500b\u6a94\u6848\u653e\u5230\u57f7\u884c\u76ee\u9304\u4e0b ![Alt text](image-15.png) \u57f7\u884c\u6307\u4ee4 kubectl create secret tls mic-tls --cert=STAR_mic.com.tw.crt --key=STAR_mic.com.tw.key \u5728 IngressRoute \u4e2d\u52a0\u5165 apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: ingressroutetls namespace: default spec: entryPoints: - websecure routes: - kind: Rule match: Host(`localhost.mic.com.tw`) && PathPrefix(`/tls`) services: - name: whoami port: 80 tls: secretName: mic-tls ps: \u5728\u672c\u6a5f\u7684hosts\u6a94\u4ffa\u4e2d\u52a0\u5165 192.168.0.23 localhost.mic.com.tw (192.168.0.2 \u662f\u5b58\u53d6 Traefik \u7684\u66b4\u9732IP) https://localhost.mic.com.tw/tls \u53c3\u8003\u7db2\u9801\uff1a https://www.readfog.com/a/1665375657830486016","title":"Treafik"},{"location":"traefik/#traefik","text":"","title":"Traefik"},{"location":"traefik/#with-k8s-crd-custom-resource-definitions","text":"IngressRoute Definition # Install Traefik Resource Definitions: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml # Install RBAC for Traefik: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml Services kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/user-guides/crd-acme/02-services.yml \u4fee\u6539 traefik apiVersion: v1 kind: Service metadata: name: traefik spec: type: LoadBalancer # \u591a\u52a0\u9019\u4e00\u884c\uff0c\u66b4\u9732\u8857\u53e3 ports: - protocol: TCP name: web # web \u5165\u53e3 port: 8000 - protocol: TCP name: admin # dashboard \u5165\u53e3 port: 8080 - protocol: TCP name: websecure # web https \u5165\u53e3 port: 4443 selector: app: traefik - Deployments kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/user-guides/crd-acme/03-deployments.yml Traefik Routers ``` apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: match: Host( 192.168.0.17 ) && PathPrefix( /notls ) kind: Rule services: name: whoami port: 80 ``` apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: docker-demo namespace: default spec: entryPoints: - web routes: - match: PathPrefix(`/docker-demo`) kind: Rule services: - name: myapp port: 80 Dashboard http://192.168.0.23:8080/dashboard/#/ \u6e2c\u8a66 URL\uff1a http://192.168.0.23:8000/notls Middlewares \u6982\u5ff5 \u4fee\u6539 IngressRoute apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: - match: Host(`192.168.0.23`) && PathPrefix(`/notls`) kind: Rule middlewares: - name: test-auth services: - name: whoami port: 80 \u5efa\u7acb Middleware ``` apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-auth spec: basicAuth: secret: authsecret","title":"With K8S + CRD (Custom Resource Definitions)"},{"location":"traefik/#note-in-a-kubernetes-secret-the-string-eg-generated-by-htpasswd-must-be-base64-encoded-first","text":"","title":"Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first."},{"location":"traefik/#to-create-an-encoded-userpassword-pair-the-following-command-can-be-used","text":"","title":"To create an encoded user:password pair, the following command can be used:"},{"location":"traefik/#htpasswd-nb-user-password-openssl-base64","text":"apiVersion: v1 kind: Secret metadata: name: authsecret namespace: default data: users: dXNlcjokYXByMSRicC5FV295eCRXTWttUktBLzdjQWcycXNIL09XbXIxCgo= ``` htpasswd -nb user password | openssl base64 \u53bb\u770b Traefik Dashboard\uff0c\u6703\u770b\u5230\u591a\u4e00\u500b Middlewares \u6253\u958b\u700f\u89bd\u5668\uff0c\u8f38\u5165 http://192.168.0.23:8000/notls \u8f38\u5165\uff1auser/password \u5f8c\uff0c\u5c31\u53ef\u4ee5\u767b\u5165\u6210\u529f\uff0c\u4e26\u53d6\u5f97\u8cc7\u8a0a","title":"htpasswd -nb user password | openssl base64"},{"location":"traefik/#middleware-error","text":"\u5efa\u7acb\u4e00\u500b Service apiVersion: v1 kind: Service metadata: name: traefikerror spec: type: LoadBalancer ports: - name: http targetPort: 80 port: 80 selector: app: traefikerror --- apiVersion: apps/v1 kind: Deployment metadata: name: traefikerror spec: replicas: 1 selector: matchLabels: app: traefikerror template: metadata: labels: app: traefikerror spec: containers: - name: traefikerror image: guillaumebriday/traefik-custom-error-pages ports: - containerPort: 80 \u5efa\u7acb Middleware apiVersion: traefik.io/v1alpha1 kind: Middleware metadata: name: test-errors spec: errors: status: - \"400-599\" query: /{status}.html service: name: traefikerror port: 80 \u52a0\u5165 Middleware apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: simpleingressroute namespace: default spec: entryPoints: - web routes: - match: Host(`192.168.0.23`) && PathPrefix(`/notls`) kind: Rule middlewares: - name: test-auth - name: test-errors services: - name: whoami port: 80","title":"Middleware - Error"},{"location":"traefik/#https","text":"\u5148\u628a STAR_mic.com.tw.crt \u548c STAR_mic.com.tw.key \u5169\u500b\u6a94\u6848\u653e\u5230\u57f7\u884c\u76ee\u9304\u4e0b ![Alt text](image-15.png) \u57f7\u884c\u6307\u4ee4 kubectl create secret tls mic-tls --cert=STAR_mic.com.tw.crt --key=STAR_mic.com.tw.key \u5728 IngressRoute \u4e2d\u52a0\u5165 apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: ingressroutetls namespace: default spec: entryPoints: - websecure routes: - kind: Rule match: Host(`localhost.mic.com.tw`) && PathPrefix(`/tls`) services: - name: whoami port: 80 tls: secretName: mic-tls ps: \u5728\u672c\u6a5f\u7684hosts\u6a94\u4ffa\u4e2d\u52a0\u5165 192.168.0.23 localhost.mic.com.tw (192.168.0.2 \u662f\u5b58\u53d6 Traefik \u7684\u66b4\u9732IP) https://localhost.mic.com.tw/tls \u53c3\u8003\u7db2\u9801\uff1a https://www.readfog.com/a/1665375657830486016","title":"\u66b4\u9732 HTTPS \u670d\u52d9"},{"location":"velero/","text":"\u53c3\u8003\u8cc7\u6599\uff1a - Velero \u521d\u63a2\u8207\u5be6\u8e10 https://kaichu.io/posts/velero-research-practice/ - \u5b98\u7db2 https://velero.io/docs/v1.11/how-velero-works/ - \u4f7f\u7528 Velero \u5099\u4efd\u9084\u539f Kubernetes \u96c6\u7fa3 https://www.readfog.com/a/1647215683490123776 - Quick start evaluation install with Minio https://velero.io/docs/main/contributions/minio - k8s1.24 \u4f7f\u7528Velero \u5099\u4efd\u9084\u539fRancher Longhorn\u4e0avolume\u8cc7\u6599 https://www.itnotetk.com/2022/11/28/k8s1-24-velero-%e5%82%99%e4%bb%bd%e9%82%84%e5%8e%9f-rancher-longhorn%e4%b8%8avolume%e8%b3%87%e6%96%99/ \u904b\u4f5c\u65b9\u5f0f Velero \u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f CLI \u6703\u53bb\u64cd\u4f5c Kubernetes API \u5efa\u7acb Backup \u7269\u4ef6 BackupController \u5075\u6e2c\u5230\u65b0\u7684 Backup \u7269\u4ef6\u4e26\u6aa2\u67e5 \u6aa2\u67e5\u901a\u904e\u5f8c\u5c31\u6703\u64cd\u4f5c Kubernetes API Server \u9032\u884c\u8cc7\u6599\u7684\u5099\u4efd BackupController \u5c31\u6703\u900f\u904e Plugin \u6703\u64cd\u4f5c\u5c0d\u61c9\u7528 Object Storage Service \u4e0a\u50b3\u6a94\u6848 \u5982\u679c Provider \u652f\u63f4\u539f\u751f\u7684\u5feb\u7167\u64cd\u4f5c, Plugin \u5c31\u53ef\u4ee5\u900f\u904e API \u5099\u5206\u6c38\u4e45\u78c1\u789f\u5340 \u5b89\u88dd \u4e0b\u8f09\u53ca\u89e3\u58d3\u7e2e wget https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz tar -zxvf velero-v1.11.0-linux-amd64.tar.gz && cd velero-v1.11.0-linux-amd64 \u5b89\u88ddMINIO \u8981\u5c07 examples/minio/00-minio-deployment.yaml \u4fee\u6539\u6210\u4ee5\u4e0b # Copyright 2017 the Velero contributors. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- apiVersion: v1 kind: Namespace metadata: name: velero --- apiVersion: apps/v1 kind: Deployment metadata: namespace: velero name: minio labels: component: minio spec: strategy: type: Recreate selector: matchLabels: component: minio template: metadata: labels: component: minio spec: volumes: - name: storage emptyDir: {} - name: config emptyDir: {} containers: - name: minio image: minio/minio:latest imagePullPolicy: IfNotPresent args: - server - /storage - --config-dir=/config - --console-address=:9001 env: - name: MINIO_ACCESS_KEY value: \"minio\" - name: MINIO_SECRET_KEY value: \"minio123\" ports: - containerPort: 9000 - containerPort: 9001 volumeMounts: - name: storage mountPath: \"/storage\" - name: config mountPath: \"/config\" --- apiVersion: v1 kind: Service metadata: namespace: velero name: minio labels: component: minio spec: type: NodePort ports: - name: api port: 9000 targetPort: 9000 - name: console port: 9001 targetPort: 9001 selector: component: minio --- apiVersion: batch/v1 kind: Job metadata: namespace: velero name: minio-setup labels: component: minio spec: template: metadata: name: minio-setup spec: restartPolicy: OnFailure volumes: - name: config emptyDir: {} containers: - name: mc image: minio/mc:latest imagePullPolicy: IfNotPresent command: - /bin/sh - -c - \"mc --config-dir=/config config host add velero http://minio:9000 minio minio123 && mc --config-dir=/config mb -p velero/velero\" volumeMounts: - name: config mountPath: \"/config\" kubectl apply -f examples/minio/00-minio-deployment.yaml \u958b\u555f kubrnetes dashboard \u770b velero minio \u662f\u54ea\u500b Port\uff0c\u4e26\u958b\u555f\u700f\u89bd\u5668 http://192.168.0.17:32729/browser \u5e33\u865f/\u5bc6\u78bc\uff1aminio/minio123 P.S.\uff1a \u7576\u7136\u5982\u679c\u9700\u8981\u5728\u4e0d\u540c Kubernetes \u548c\u5b58\u5132\u6c60\u96c6\u7fa3\u5099\u4efd\u8207\u6062\u5fa9\u6578\u64da\uff0c\u9700\u8981\u5c07 minio \u670d\u52d9\u7aef\u5b89\u88dd\u5728 Kubernetes \u96c6\u7fa3\u5916\uff0c\u4fdd\u8b49\u5728\u96c6\u7fa3\u767c\u751f\u707d\u96e3\u6027\u6545\u969c\u6642\uff0c\u4e0d\u6703\u5c0d\u5099\u4efd\u6578\u64da\u7522\u751f\u5f71\u97ff\uff0c\u53ef\u4ee5\u901a\u904e\u4e8c\u9032\u5236\u7684\u65b9\u5f0f\u9032\u884c\u5b89\u88dd\u3002 (\u7565) \u8acb\u53c3\u8003 https://www.readfog.com/a/1647215683490123776 \u5b89\u88dd MINIO \u5b89\u88dd velero \u670d\u52d9\u7aef nano credentials-velero # \u79d8\u94a5\u6587\u4ef6credentials-velero [default] aws_access_key_id = minio aws_secret_access_key = minio123 velero install velero install \\ --provider aws \\ --bucket velero \\ --plugins velero/velero-plugin-for-aws:latest \\ --plugins openebs/velero-plugin:ci \\ --secret-file ./credentials-velero \\ --use-volume-snapshots=false \\ --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://minio.velero.svc.cluster.local:9000 PS\uff1as3Url=http://192.168.0.17:31883 PROT \u5f9e\u54ea\u88e1\u53d6\u5f97\uff1f minio.velero:30050 TCP --> MiniO \u7684 URL minio.velero:31883 TCP --> MiniO \u7684 Dashboard URL http://192.168.0.17:30050/ Back up \u5148\u5efa\u7acb\u4e00\u500b Namespace / Development / Service cd ~/velero-v1.11.0-linux-amd64 kubectl apply -f examples/nginx-app/base.yaml Create a backup for any object that matches the app=nginx label selector: velero backup create nginx-backup --selector app=nginx Run velero backup describe nginx-backup or velero backup logs nginx-backup for more details. \u9019\u6642\u5019\u53bb\u770b MiniO \u7684 Dashboard\uff0c\u6703\u770b\u5230\u5099\u4efd\u7684\u6a94\u6848\u5728\u9019\u3002 Simulate a disaster kubectl delete namespace nginx-example To check that the nginx deployment and service are gone, run: kubectl get deployments --namespace=nginx-example kubectl get services --namespace=nginx-example kubectl get namespace/nginx-example Restore velero restore create --from-backup nginx-backup Restore request \"nginx-backup-20230710100823\" submitted successfully. Run velero restore describe nginx-backup-20230710100823 or velero restore logs nginx-backup-20230710100823 for more details. # \u770b\u9032\u5ea6 velero restore get nginx-example \u5c31\u56de\u4f86\u4e86~ Clean up velero backup delete BACKUP_NAME velero uninstall --> \u5168\u90e8\u79fb\u9664 With PV \u7bc4\u4f8b1 cd ~/velero-v1.11.0-linux-amd64 kubectl apply -f examples/nginx-app/with-pv.yaml kubectl -n nginx-example annotate pod/nginx-deployment-78964c9995-cx4qs backup.velero.io/backup-volumes=nginx-logs velero backup create nginx-backup --include-namespaces nginx-example --default-volumes-to-fs-backup --snapshot-volumes --ttl 180h velero backup create nginx-backup --include-namespaces nginx-example --default-volumes-to-fs-backup \u7bc4\u4f8b2 \u8acb\u53c3\u8003 nfs \u7684 MySQL + NFS \u5efa\u7acb\u76f8\u95dc\u74b0\u5883\u8207pod kubectl exec -it mysql-5b46fb64b4-t2m4c -n kube-demo -- /bin/bash \u4e26\u4e14\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u8cc7\u6599\u5eab\uff0c\u4f5c\u70ba\u6e2c\u8a66\u7528 \u5099\u4efd velero backup create mysql-backup --include-namespaces kube-demo --default-volumes-to-restic velero backup describe mysql-backup minio \u6703\u6709\u5099\u4efd\u8cc7\u6599 ![Alt text](image-49.png) \u6a21\u64ec\u707d\u96e3 kubectl delete namespace kube-demo \u5fa9\u539f velero restore create --from-backup mysql-backup velero restore get \u6aa2\u67e5\u8cc7\u6599\u6709\u5426\u9084\u539f kubectl exec -it mysql-5b46fb64b4-zj7n2 -n kube-demo -- /bin/bash","title":"Velero"},{"location":"velero/#_1","text":"Velero \u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f CLI \u6703\u53bb\u64cd\u4f5c Kubernetes API \u5efa\u7acb Backup \u7269\u4ef6 BackupController \u5075\u6e2c\u5230\u65b0\u7684 Backup \u7269\u4ef6\u4e26\u6aa2\u67e5 \u6aa2\u67e5\u901a\u904e\u5f8c\u5c31\u6703\u64cd\u4f5c Kubernetes API Server \u9032\u884c\u8cc7\u6599\u7684\u5099\u4efd BackupController \u5c31\u6703\u900f\u904e Plugin \u6703\u64cd\u4f5c\u5c0d\u61c9\u7528 Object Storage Service \u4e0a\u50b3\u6a94\u6848 \u5982\u679c Provider \u652f\u63f4\u539f\u751f\u7684\u5feb\u7167\u64cd\u4f5c, Plugin \u5c31\u53ef\u4ee5\u900f\u904e API \u5099\u5206\u6c38\u4e45\u78c1\u789f\u5340","title":"\u904b\u4f5c\u65b9\u5f0f"},{"location":"velero/#_2","text":"\u4e0b\u8f09\u53ca\u89e3\u58d3\u7e2e wget https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz tar -zxvf velero-v1.11.0-linux-amd64.tar.gz && cd velero-v1.11.0-linux-amd64","title":"\u5b89\u88dd"},{"location":"velero/#minio","text":"\u8981\u5c07 examples/minio/00-minio-deployment.yaml \u4fee\u6539\u6210\u4ee5\u4e0b # Copyright 2017 the Velero contributors. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- apiVersion: v1 kind: Namespace metadata: name: velero --- apiVersion: apps/v1 kind: Deployment metadata: namespace: velero name: minio labels: component: minio spec: strategy: type: Recreate selector: matchLabels: component: minio template: metadata: labels: component: minio spec: volumes: - name: storage emptyDir: {} - name: config emptyDir: {} containers: - name: minio image: minio/minio:latest imagePullPolicy: IfNotPresent args: - server - /storage - --config-dir=/config - --console-address=:9001 env: - name: MINIO_ACCESS_KEY value: \"minio\" - name: MINIO_SECRET_KEY value: \"minio123\" ports: - containerPort: 9000 - containerPort: 9001 volumeMounts: - name: storage mountPath: \"/storage\" - name: config mountPath: \"/config\" --- apiVersion: v1 kind: Service metadata: namespace: velero name: minio labels: component: minio spec: type: NodePort ports: - name: api port: 9000 targetPort: 9000 - name: console port: 9001 targetPort: 9001 selector: component: minio --- apiVersion: batch/v1 kind: Job metadata: namespace: velero name: minio-setup labels: component: minio spec: template: metadata: name: minio-setup spec: restartPolicy: OnFailure volumes: - name: config emptyDir: {} containers: - name: mc image: minio/mc:latest imagePullPolicy: IfNotPresent command: - /bin/sh - -c - \"mc --config-dir=/config config host add velero http://minio:9000 minio minio123 && mc --config-dir=/config mb -p velero/velero\" volumeMounts: - name: config mountPath: \"/config\" kubectl apply -f examples/minio/00-minio-deployment.yaml \u958b\u555f kubrnetes dashboard \u770b velero minio \u662f\u54ea\u500b Port\uff0c\u4e26\u958b\u555f\u700f\u89bd\u5668 http://192.168.0.17:32729/browser \u5e33\u865f/\u5bc6\u78bc\uff1aminio/minio123 P.S.\uff1a \u7576\u7136\u5982\u679c\u9700\u8981\u5728\u4e0d\u540c Kubernetes \u548c\u5b58\u5132\u6c60\u96c6\u7fa3\u5099\u4efd\u8207\u6062\u5fa9\u6578\u64da\uff0c\u9700\u8981\u5c07 minio \u670d\u52d9\u7aef\u5b89\u88dd\u5728 Kubernetes \u96c6\u7fa3\u5916\uff0c\u4fdd\u8b49\u5728\u96c6\u7fa3\u767c\u751f\u707d\u96e3\u6027\u6545\u969c\u6642\uff0c\u4e0d\u6703\u5c0d\u5099\u4efd\u6578\u64da\u7522\u751f\u5f71\u97ff\uff0c\u53ef\u4ee5\u901a\u904e\u4e8c\u9032\u5236\u7684\u65b9\u5f0f\u9032\u884c\u5b89\u88dd\u3002 (\u7565) \u8acb\u53c3\u8003 https://www.readfog.com/a/1647215683490123776 \u5b89\u88dd MINIO","title":"\u5b89\u88ddMINIO"},{"location":"velero/#velero","text":"nano credentials-velero # \u79d8\u94a5\u6587\u4ef6credentials-velero [default] aws_access_key_id = minio aws_secret_access_key = minio123 velero install velero install \\ --provider aws \\ --bucket velero \\ --plugins velero/velero-plugin-for-aws:latest \\ --plugins openebs/velero-plugin:ci \\ --secret-file ./credentials-velero \\ --use-volume-snapshots=false \\ --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://minio.velero.svc.cluster.local:9000 PS\uff1as3Url=http://192.168.0.17:31883 PROT \u5f9e\u54ea\u88e1\u53d6\u5f97\uff1f minio.velero:30050 TCP --> MiniO \u7684 URL minio.velero:31883 TCP --> MiniO \u7684 Dashboard URL http://192.168.0.17:30050/","title":"\u5b89\u88dd velero \u670d\u52d9\u7aef"},{"location":"velero/#back-up","text":"\u5148\u5efa\u7acb\u4e00\u500b Namespace / Development / Service cd ~/velero-v1.11.0-linux-amd64 kubectl apply -f examples/nginx-app/base.yaml Create a backup for any object that matches the app=nginx label selector: velero backup create nginx-backup --selector app=nginx Run velero backup describe nginx-backup or velero backup logs nginx-backup for more details. \u9019\u6642\u5019\u53bb\u770b MiniO \u7684 Dashboard\uff0c\u6703\u770b\u5230\u5099\u4efd\u7684\u6a94\u6848\u5728\u9019\u3002 Simulate a disaster kubectl delete namespace nginx-example To check that the nginx deployment and service are gone, run: kubectl get deployments --namespace=nginx-example kubectl get services --namespace=nginx-example kubectl get namespace/nginx-example","title":"Back up"},{"location":"velero/#restore","text":"velero restore create --from-backup nginx-backup Restore request \"nginx-backup-20230710100823\" submitted successfully. Run velero restore describe nginx-backup-20230710100823 or velero restore logs nginx-backup-20230710100823 for more details. # \u770b\u9032\u5ea6 velero restore get nginx-example \u5c31\u56de\u4f86\u4e86~","title":"Restore"},{"location":"velero/#clean-up","text":"velero backup delete BACKUP_NAME velero uninstall --> \u5168\u90e8\u79fb\u9664","title":"Clean up"},{"location":"velero/#with-pv","text":"\u7bc4\u4f8b1 cd ~/velero-v1.11.0-linux-amd64 kubectl apply -f examples/nginx-app/with-pv.yaml kubectl -n nginx-example annotate pod/nginx-deployment-78964c9995-cx4qs backup.velero.io/backup-volumes=nginx-logs velero backup create nginx-backup --include-namespaces nginx-example --default-volumes-to-fs-backup --snapshot-volumes --ttl 180h velero backup create nginx-backup --include-namespaces nginx-example --default-volumes-to-fs-backup \u7bc4\u4f8b2 \u8acb\u53c3\u8003 nfs \u7684 MySQL + NFS \u5efa\u7acb\u76f8\u95dc\u74b0\u5883\u8207pod kubectl exec -it mysql-5b46fb64b4-t2m4c -n kube-demo -- /bin/bash \u4e26\u4e14\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u8cc7\u6599\u5eab\uff0c\u4f5c\u70ba\u6e2c\u8a66\u7528 \u5099\u4efd velero backup create mysql-backup --include-namespaces kube-demo --default-volumes-to-restic velero backup describe mysql-backup minio \u6703\u6709\u5099\u4efd\u8cc7\u6599 ![Alt text](image-49.png) \u6a21\u64ec\u707d\u96e3 kubectl delete namespace kube-demo \u5fa9\u539f velero restore create --from-backup mysql-backup velero restore get \u6aa2\u67e5\u8cc7\u6599\u6709\u5426\u9084\u539f kubectl exec -it mysql-5b46fb64b4-zj7n2 -n kube-demo -- /bin/bash","title":"With PV"}]}